<script lang="ts">
	import type { Errors } from '@graphace/commons';
	import { FormItem } from '@graphace/ui';
	import {{ name }}Select from './{{ name }}Select.svelte';
	import type { {{ name }}Input } from '$houdini';

	export let value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined = undefined;
	export let list: boolean = false;
	export let name: string;
	export let label: string;
	export let errors: Errors | undefined = undefined;
	export let readonly = false;
	export let disabled = false;
	export let placeholder: string = '';
	
	let selected: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined = undefined;
	selected = value;

	if (Array.isArray(value)) {
		value = value.map((item) => ({ where: { {{ idName }}: { val: item?.{{ idName }} } } }));
	} else if (value) {
		value = { where: { {{ idName }}: { val: value.{{ idName }} } } };
	}
</script>

<FormItem {label} let:id>
	<{{ name }}Select
		{id}
		{name}
		{list}
		{disabled}
		{readonly}
		{placeholder}
		{errors}
		bind:value={selected}
		on:change={(e) => {
			if (Array.isArray(e.detail.value)) {
				value = e.detail.value.map((item) => ({ where: { {{ idName }}: { val: item?.{{ idName }} } } }));
			} else if (e.detail.value && !Array.isArray(e.detail.value)) {
				value = { where: { {{ idName }}: { val: e.detail.value.{{ idName }} } } };
			} else {
				value = undefined;
			}
		{% raw %}}{% endraw %}}
	/>
</FormItem>
