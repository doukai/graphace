<script lang="ts">
	import { createEventDispatcher } from 'svelte';
	import type { Errors } from '@graphace/commons';
	import type { GraphQLError, __Schema, __Type, __TypeKind } from '@graphace/graphql';
	import { Form, messageBoxs, notifications } from '@graphace/ui';
	import { {% for scalar in scalars %}{{ scalar }}Item, {% endfor %}ObjectItem } from '@graphace/ui-graphql';
	{%- if imports %}
	{%- for import in imports %}
	{{ import }}
	{%- endfor %}
	{%- endif %}
	{%- for enum in enums %}
	import {{ enum }}Item from '~/{{ enumsPath }}/{{ enum | paramCase }}/{{ enum }}Item.svelte';
	{%- endfor %}
	{%- if selectImports %}
	{%- for selectType in selectImports %}
	import {{ selectType }}SelectItem from '~/{{ objectsPath }}/{{ selectType | paramCase }}/{{ selectType }}SelectItem.svelte';
	{%- endfor %}
	{%- endif %}
	import LL from '$i18n/i18n-svelte';
	import type { {{ name }}Input } from '~/{{ schemaTypesPath }}';
	import { buildGraphQLErrors, buildGlobalGraphQLErrorMessage } from '~/lib/utils/validate-util';
	{%- if useAuth %}
	import { permissions } from '~/lib/utils/auth-util';
	{%- endif %}

	export let node: {{ name }}Input = {};
	export let errors: Record<string, Errors> = {};
	export let showRemoveButton: boolean = true;
	export let showGotoSelectButton: boolean = false;
	export let showBackButton: boolean = true;

	const dispatch = createEventDispatcher<{
		mutation: {
			args: {{ name }}Input;
			then: (data: {{ name }}Input | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		};
		gotoSelect: {};
		back: {};
	}>();

	const save = (): void => {
		if (node) {
			dispatch('mutation', {
				args: node,
				then: (data) => {
					notifications.success($LL.web.message.saveSuccess());
					dispatch('back', {});
				},
				catch: (graphQLErrors) => {
					console.error(graphQLErrors);
					errors = buildGraphQLErrors(graphQLErrors);
					const globalError = buildGlobalGraphQLErrorMessage(graphQLErrors);
					if (globalError) {
						messageBoxs.open({
							title: $LL.web.message.saveFailed(),
							content: globalError,
							buttonName: $LL.ui.button.back(),
							buttonType: 'neutral',
							confirm: () => {
								dispatch('back', {});
								return true;
							}
						});
					}
				}
			});
		}
	};

	const remove = (): void => {
		if (node) {
			dispatch('mutation', {
				args: {},
				then: (data) => {
					notifications.success($LL.web.message.removeSuccess());
					dispatch('back', {});
				},
				catch: (graphQLErrors) => {
					console.error(graphQLErrors);
					errors = buildGraphQLErrors(graphQLErrors);
					const globalError = buildGlobalGraphQLErrorMessage(graphQLErrors);
					if (globalError) {
						messageBoxs.open({
							title: $LL.web.message.removeFailed(),
							content: globalError,
							buttonName: $LL.ui.button.back(),
							buttonType: 'neutral',
							confirm: () => {
								dispatch('back', {});
								return true;
							}
						});
					}
				}
			});
		}
	};
</script>

<Form
	title={$LL.graphql.objects.{{ name }}.name()}
	{%- if useAuth %}
	showRemoveButton={permissions.auth('{{ name }}::*::WRITE') && showRemoveButton && node !== undefined && node !== null && Object.keys(node).length > 0}
	showGotoSelectButton={permissions.auth('{{ name }}::*::WRITE') && showGotoSelectButton}
	{%- else %}
	showRemoveButton={showRemoveButton && node !== undefined && node !== null && Object.keys(node).length > 0}
	{showGotoSelectButton}
	{%- endif %}
	{showBackButton}
	on:save={(e) => save()}
	on:remove={(e) =>
		messageBoxs.open({
			title: $LL.web.components.table.removeModalTitle(),
			buttonName: $LL.web.components.table.removeBtn(),
			buttonType: 'error',
			confirm: () => {
				remove();
				return true;
			}
		})}
	on:gotoSelect
	on:back
>
	{%- if fields %}
	{%- for field in fields %}
	{%- if useAuth %}
	{#if permissions.auth('{{ name }}::{{ field.fieldName }}::*')}
	{%- endif %}
	{%- if field.inMutationArgs %}
	{%- if field.component %}
	{{ field.component }}
	{%- else %}
	{%- if field.isScalarType or field.isEnumType %}
	<{{ field.fieldTypeName }}Item label={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()} name="{{ field.fieldName }}" bind:value={node.{{ field.fieldName }}}{% if field.isListType %} list{% endif %} errors={errors.{{ field.fieldName }}} />
	{%- else %}
	{%- if field.select %}
	<{{ field.fieldTypeName }}SelectItem
		name="{{ field.fieldName }}"
		label={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}
		errors={errors.{{ field.fieldName }}}
		bind:value={node.{{ field.fieldName }}}
		{%- if field.isListType %}
		list
		{%- endif %}
	/>
	{%- else %}
	<ObjectItem name="{{ field.fieldName }}" {% if field.isNamed %}namedStruct={node.{{ field.fieldName }}}{% endif %} path="_/{{ field.fieldName | paramCase }}" label={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()} errors={errors.{{ field.fieldName }}} on:gotoField />
	{%- endif %}
	{%- endif %}
	{%- endif %}
	{%- endif %}
	{%- if useAuth %}
	{/if}
	{%- endif %}
	{%- endfor %}
	{%- endif %}
</Form>