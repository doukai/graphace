<script lang="ts">
	import { createEventDispatcher, getContext } from 'svelte';
	import type { Readable } from 'svelte/store';
	{%- if useAuth %}
	import { createPopover, melt } from '@melt-ui/svelte';
	import type { PermissionsStore } from '@graphace/commons';
	import { z_index } from '@graphace/ui';
	{%- endif %} 
	import { {% for scalar in scalars %}{{ scalar }}Filter{% if forloop.last == false %}, {% endif %}{% endfor %} } from '@graphace/ui-graphql';
	import { Icon } from '@steeze-ui/svelte-icon';
	import { Check, XMark } from '@steeze-ui/heroicons';
	{%- for enum in enums %}
	import {{ enum }}Filter from '~/{{ enumsPath }}/{{ enum | paramCase }}/{{ enum }}Filter.svelte';
	{%- endfor %}
	{%- if isNamedStruct %}
	import {{ name }}SelectFilter from '~/{{ objectsPath }}/{{ name | paramCase }}/{{ name }}SelectFilter.svelte';
	{%- endif %}
	{%- if namedStructObjectNames %}
	{%- for namedStructType in namedStructObjectNames %}
	{%- if namedStructType != name %}
	import {{ namedStructType }}SelectFilter from '~/{{ objectsPath }}/{{ namedStructType | paramCase }}/{{ namedStructType }}SelectFilter.svelte';
	{%- endif %}
	{%- endfor %}
	{%- endif %}
	import type { TranslationFunctions } from '$i18n/i18n-types';
	import type { {{ name }}Expression } from '~/{{ schemaTypesPath }}';

	export let value: {{ name }}Expression | null | undefined;

	const LL = getContext<Readable<TranslationFunctions>>('LL');
	{%- if useAuth %}
	const permissions = getContext<PermissionsStore>('permissions');
	{%- endif %}

	const z_class8 = z_index.top(8);

	let _expression = {
		{%- if isNamedStruct %}
		{{ idName }}: undefined,
		{%- endif %}
		{%- if fields %}
		{%- for field in fields %}
		{%- if field.fieldName == idName %}
		{%- if isNamedStruct == false %}
		{{ field.fieldName }}: undefined{% if forloop.last == false %},{% endif %}
		{%- endif %}
		{%- elsif field.isScalarType or field.isEnumType %}
		{{ field.fieldName }}: undefined{% if forloop.last == false %},{% endif %}
		{%- endif %}
		{%- if field.isNamed %}
		{{ field.fieldName }}: { {{ field.fieldTypeIdName }}: undefined }{% if forloop.last == false %},{% endif %}
		{%- endif %}
		{%- endfor %}
		{%- endif %}
	};
	
	const dispatch = createEventDispatcher<{
		filter: {};
	}>();

	const filter = (): void => {
		{%- if isNamedStruct %}
		if (_expression.{{ idName }}) {
			value = { ...value, {{ idName }}: _expression.{{ idName }} };
		} else {
			value = { ...value, {{ idName }}: undefined };
		}
		{%- endif %}
		{%- if fields %}
		{%- for field in fields %}
		{%- if field.isScalarType or field.isEnumType %}
		if (_expression.{{ field.fieldName }}) {
			value = { ...value, {{ field.fieldName }}: _expression.{{ field.fieldName }} };
		} else {
			value = { ...value, {{ field.fieldName }}: undefined };
		}
		{%- endif %}
		{%- if field.isNamed %}
		if (_expression.{{ field.fieldName }}.{{ field.fieldTypeIdName }}) {
			value = { ...value, {{ field.fieldName }}: _expression.{{ field.fieldName }} };
		} else {
			value = { ...value, {{ field.fieldName }}: undefined };
		}
		{%- endif %}
		{%- endfor %}
		{%- endif %}

		if (Object.values(value).filter((item) => item).length === 0) {
			value = undefined;
		}
		dispatch('filter', {});
		$open = false;
	};

	const clear = (): void => {
		_expression = {
			{%- if isNamedStruct %}
			{{ idName }}: undefined,
			{%- endif %}
			{%- if fields %}
			{%- for field in fields %}
			{%- if field.fieldName == idName %}
			{%- if isNamedStruct == false %}
			{{ field.fieldName }}: undefined{% if forloop.last == false %},{% endif %}
			{%- endif %}
			{%- elsif field.isScalarType or field.isEnumType %}
			{{ field.fieldName }}: undefined{% if forloop.last == false %},{% endif %}
			{%- endif %}
			{%- if field.isNamed %}
			{{ field.fieldName }}: { {{ field.fieldTypeIdName }}: undefined }{% if forloop.last == false %},{% endif %}
			{%- endif %}
			{%- endfor %}
			{%- endif %}
		};
		value = undefined;
		dispatch('filter', {});
		$open = false;
	};

	const {
		elements: { trigger, content, arrow, close, overlay },
		states: { open }
	} = createPopover({
		forceVisible: true,
		preventScroll: true
	});
</script>

<slot trigger={$trigger} />

{#if $open}
	<div use:melt={$overlay} class="fixed inset-0 {z_class8}" />
	<div class="p-1 rounded-xl bg-base-200 shadow {z_class8}" use:melt={$content}>
		<div use:melt={$arrow} />
		<div class="space-y-1 max-h-60 overflow-y-auto">
			{%- if fields %}
			{%- if isNamedStruct %}
			{%- if useAuth %}
			{#if permissions.auth('{{ name }}::{{ idName }}::*')}
			{%- endif %}
			<{{ name }}SelectFilter
				label={$LL.graphql.objects.{{ name }}.name()}
				name="{{ idName }}"
				bind:value={_expression.{{ idName }}}
				className="md:input-sm"
				selectClassName="md:select-sm w-full"
				containerClassName="md:min-h-8 max-w-xs"
				tagClassName="md:badge-sm"
				menuClassName="md:menu-sm"
			/>
			<div class="divider m-0 md:hidden" />
			{%- if useAuth %}
			{/if}
			{%- endif %}
			{%- endif %}
			{%- for field in fields %}
			{%- if field.isScalarType or field.isEnumType %}
			{%- if useAuth %}
			{#if permissions.auth('{{ name }}::{{ field.fieldName }}::*')}
			{%- endif %}
			<{{ field.fieldTypeName }}Filter
				label={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}
				name="{{ field.fieldName }}"
				bind:value={_expression.{{ field.fieldName }}}
				{%- if field.isEnumType %}
				className="md:select-sm"
				{%- elsif field.fieldTypeName == "Boolean" %}
				className="md:toggle-sm"
				addBtnClassName="md:btn-sm"
				{%- else %}
				className="md:input-sm"
				addBtnClassName="md:btn-sm"
				{%- endif %}
				selectClassName="md:select-sm w-full"
			/>
			<div class="divider m-0 md:hidden" />
			{%- if useAuth %}
			{/if}
			{%- endif %}
			{%- endif %}
			{%- if field.isNamed %}
			{%- if useAuth %}
			{#if permissions.auth('{{ name }}::{{ field.fieldName }}::*')}
			{%- endif %}
			<{{ field.fieldTypeName }}SelectFilter
				label={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}
				name="{{ field.fieldName }}"
				bind:value={_expression.{{ field.fieldName }}.{{ field.fieldTypeIdName }}}
				className="md:input-sm"
				containerClassName="md:min-h-8 max-w-xs"
				tagClassName="md:badge-sm"
				menuClassName="md:menu-sm"
				selectClassName="md:select-sm w-full"
			/>
			<div class="divider m-0 md:hidden" />
			{%- if useAuth %}
			{/if}
			{%- endif %}
			{%- endif %}
			{%- endfor %}
			{%- endif %}
		</div>
		<div class="flex justify-center space-x-1 pt-1">
			<div class="tooltip" data-tip={$LL.ui_graphql.table.th.filter()}>
				<button class="btn btn-square btn-primary md:btn-sm" on:click={(e) => filter()}>
					<Icon src={Check} class="h-5 w-5" />
				</button>
			</div>
			<div class="tooltip" data-tip={$LL.ui_graphql.table.th.cancel()}>
				<button class="btn btn-square btn-outline btn-error md:btn-sm" on:click={(e) => clear()}>
					<Icon src={XMark} class="h-5 w-5" />
				</button>
			</div>
		</div>
	</div>
{/if}