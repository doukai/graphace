<script lang="ts">
	import { createEventDispatcher, getContext } from 'svelte';
	import type { Readable } from 'svelte/store';
	import { createPopover, melt } from '@melt-ui/svelte';
	import { Icon } from '@steeze-ui/svelte-icon';
	import { Check, XMark } from '@steeze-ui/heroicons';
	import { {% for scalar in scalars %}{{ scalar }}Filter{% if forloop.last == false %}, {% endif %}{% endfor %} } from '@graphace/ui-graphql';
	{%- for enum in enums %}
	import {{ enum }}Filter from '~/{{ componentsPath }}/enums/{{ enum | paramCase }}/{{ enum }}Filter.svelte';
	{%- endfor %}
	{%- if isNamed %}
	import {{ name }}SelectFilter from '~/{{ componentsPath }}/objects/{{ name | paramCase }}/{{ name }}SelectFilter.svelte';
	{%- endif %}
	{%- for select in selects %}
	{%- if select != name %}
	import {{ select }}SelectFilter from '~/{{ componentsPath }}/objects/{{ select | paramCase }}/{{ select }}SelectFilter.svelte';
	{%- endif %}
	{%- endfor %}
	import type { TranslationFunctions } from '$i18n/i18n-types';
	import type { {{ name }}Expression } from '~/{{ schemaTypesPath }}';

	export let value: {{ name }}Expression | null | undefined = undefined;
	export let disabled = false;
	export let zIndex: number = 0;
	let className: string | undefined = undefined;
	export { className as class };

	const LL = getContext<Readable<TranslationFunctions>>('LL');
	
	const dispatch = createEventDispatcher<{
		filter: {};
	}>();

	if (value === null || value === undefined || Object.keys(value).length === 0) {
		value = {
			{%- for field in fields %}
			{%- if field.isScalarType or field.isEnumType %}
			{{ field.fieldName }}: undefined{% if forloop.last == false %},{% endif %}
			{%- elsif field.isSelect %}
			{{ field.fieldName }}: { {{ field.fieldTypeIdName }}: undefined }{% if forloop.last == false %},{% endif %}
			{%- endif %}
			{%- endfor %}
		}
	}

	const filter = (): void => {
		dispatch('filter', {});
		$open = false;
	};

	const clear = (): void => {
		value = {
			{%- for field in fields %}
			{%- if field.isScalarType or field.isEnumType %}
			{{ field.fieldName }}: undefined{% if forloop.last == false %},{% endif %}
			{%- elsif field.isSelect %}
			{{ field.fieldName }}: { {{ field.fieldTypeIdName }}: undefined }{% if forloop.last == false %},{% endif %}
			{%- endif %}
			{%- endfor %}
		};
		dispatch('filter', {});
		$open = false;
	};

	const {
		elements: { trigger, content, arrow, close, overlay },
		states: { open }
	} = createPopover({
		forceVisible: true,
		preventScroll: true
	});
</script>

<slot trigger={$trigger} />

{#if $open}
	<div use:melt={$overlay} class="fixed inset-0 z-[{zIndex + 5}]" />
	<div class="z-[{zIndex + 5}] {className}" use:melt={$content}>
		<div use:melt={$arrow} />
		<div class="space-y-1 max-h-60 overflow-y-auto">
			{%- if isNamed %}
			<span>{$LL.graphql.objects.{{ name }}.name()}</span>
			<{{ name }}SelectFilter
				name="{{ idName }}"
				bind:value={value.{{ idName }}}
			/>
			<div class="divider m-0 md:hidden" />
			{%- endif %}
			{%- for field in fields %}
			{%- if field.isScalarType or field.isEnumType %}
			<span>{$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}</span>
			<{{ field.fieldTypeName }}Filter
				name="{{ field.fieldName }}"
				bind:value={value.{{ field.fieldName }}}
			/>
			<div class="divider m-0 md:hidden" />
			{%- elsif field.isSelect %}
			<span>{$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}</span>
			<{{ field.fieldTypeName }}SelectFilter
				name="{{ field.fieldName }}"
				bind:value={value.{{ field.fieldName }}.{{ field.fieldTypeIdName }}}
			/>
			<div class="divider m-0 md:hidden" />
			{%- endif %}
			{%- endfor %}
		</div>
		<div class="flex justify-center space-x-1 pt-1">
			<div class="tooltip" data-tip={$LL.ui_graphql.table.th.filter()}>
				<button
					{disabled}
					class="btn btn-square btn-primary"
					on:click|preventDefault={(e) => filter()}
				>
					<Icon src={Check} class="h-5 w-5" />
				</button>
			</div>
			<div class="tooltip" data-tip={$LL.ui_graphql.table.th.cancel()}>
				<button
					{disabled}
					class="btn btn-square btn-outline btn-error"
					on:click|preventDefault={(e) => clear()}
				>
					<Icon src={XMark} class="h-5 w-5" />
				</button>
			</div>
		</div>
	</div>
{/if}