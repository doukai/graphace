<script lang="ts">
	import { createEventDispatcher, getContext } from 'svelte';
	import type { Readable } from 'svelte/store';
	import { melt } from '@melt-ui/svelte';
	import { Icon } from '@steeze-ui/svelte-icon';
	import { PencilSquare, Trash, ArchiveBoxXMark, Funnel, Plus } from '@steeze-ui/heroicons';
	import type { Errors } from '@graphace/commons';
	import { Buttons, Empty, Loading, SearchInput, Table, Td } from '@graphace/ui';
	import { type Option, {% for scalar in scalars %}{{ scalar }}Th, {{ scalar }}Td, {% endfor %}{% if hasFileField %}FileTd, {% endif %}ObjectLink } from '@graphace/ui-graphql';
	import {{ name }}Filter from '~/{{ componentsPath }}/objects/{{ name | paramCase }}/{{ name }}Filter.svelte';
	import {{ name }}FormDialog from '~/{{ componentsPath }}/objects/{{ name | paramCase }}/{{ name }}FormDialog.svelte';
	{%- for enum in enums %}
	import {{ enum }}Th from '~/{{ componentsPath }}/enums/{{ enum | paramCase }}/{{ enum }}Th.svelte';
	import {{ enum }}Td from '~/{{ componentsPath }}/enums/{{ enum | paramCase }}/{{ enum }}Td.svelte';
	{%- endfor %}
	{%- for object in objects %}
	import {{ object }}Th from '~/{{ componentsPath }}/objects/{{ object | paramCase }}/{{ object }}Th.svelte';
	{%- endfor %}
	{%- for select in selects %}
	import {{ select }}SelectTd from '~/{{ componentsPath }}/objects/{{ select | paramCase }}/{{ select }}SelectTd.svelte';
	{%- endfor %}
	{%- for dialog in nonSelects %}
	import {{ dialog }}TableDialog from '~/{{ componentsPath }}/objects/{{ dialog | paramCase }}/{{ dialog }}TableDialog.svelte';
	{%- endfor %}
	import type { TranslationFunctions } from '$i18n/i18n-types';
	import type {
		{{ name }}OrderBy,
		{{ queryTypeName }}{{ name }}ListArgs,
		{{ name }}Input
	} from '~/{{ schemaTypesPath }}';

	export let value: ({{ name }}Input | null | undefined)[] | null | undefined = undefined;
	export let args: {{ queryTypeName }}{{ name }}ListArgs = {};
	export let orderBy: {{ name }}OrderBy = {};
	export let selectedIdList: (string | null | undefined)[] = [];
	export let isFetching: boolean = false;
	export let isMutating: boolean = false;
	export let errors: Record<number, Errors> = {};
	export let showEditButton: boolean = false;
	export let showEditDialog: boolean = false;
	export let showRemoveButton: boolean = false;
	export let showUnbindButton: boolean = false;
	export let showSaveButton: boolean = false;
	export let showCreateButton: boolean = false;
	export let showCreateDialog: boolean = false;
	export let showSelectButton: boolean = false;
	export let showBackButton: boolean = false;
	export let showSearchInput: boolean = false;
	export let title: string | undefined = undefined;
	export let zIndex: number = 0;
	let className: string | undefined = 'table-pin-rows table-pin-cols';
	export { className as class };
	export let fields: {
		{%- for field in fields %}
		{{ field.fieldName }}?: Option | undefined;
		{%- endfor %}
	} = {
		{%- for field in fields %}
		{{ field.fieldName }}: { readonly: false, disabled: false, hidden: false }{% if forloop.last == false %},{% endif %}
		{%- endfor %}
	};

	const LL = getContext<Readable<TranslationFunctions>>('LL');

	const dispatch = createEventDispatcher<{
		search: { value: string | undefined };
		query: { args: {{ queryTypeName }}{{ name }}ListArgs; orderBy: {{ name }}OrderBy };
		remove: { 
			value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined;
			row?: number | undefined;
		};
		unbind: { 
			value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined;
			row?: number | undefined;
		};
		edit: { 
			value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined;
			row?: number | undefined;
		};
		save: { value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined };
		select: { value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined };
		create: {};
		back: {};
	}>();

	let selectAll: boolean;
</script>

<div class="flex sm:justify-between">
	<span class="max-sm:hidden text-xl font-semibold self-center">
		{#if title}
			{title}
		{:else}
			{$LL.graphql.objects.{{ name }}.name()}
		{/if}
	</span>
	<Buttons
		class="flex space-x-1 max-sm:w-full"
		showRemoveButton={showRemoveButton && selectedIdList.length > 0}
		showUnbindButton={showUnbindButton && selectedIdList.length > 0}
		{showSaveButton}
		{showCreateButton}
		{showSelectButton}
		{showBackButton}
		loading={isMutating}
		on:save={(e) => dispatch('save', { value })}
		on:remove={(e) =>
			dispatch('remove', {
				value: value?.filter((node) => selectedIdList.includes(node?.{{ idName }}))
			})}
		on:unbind={(e) =>
			dispatch('unbind', {
				value: value?.filter((node) => selectedIdList.includes(node?.{{ idName }}))
			})}
		on:select={(e) =>
			dispatch('select', {
				value: value?.filter((node) => selectedIdList.includes(node?.{{ idName }}))
			})}
		on:create
		on:back
	>
		<svelte:fragment slot="start">
			{#if showSearchInput}
				<SearchInput on:search />
			{/if}
			<div class="sm:hidden">
				<{{ name }}Filter
					bind:value={args}
					let:trigger
					on:filter={(e) => dispatch('query', { args, orderBy })}
				>
					<div class="tooltip" data-tip={$LL.{{ appName }}.components.query.filter()}>
						<button class="btn btn-square" use:melt={trigger}>
							<Icon src={Funnel} class="h-5 w-5" />
						</button>
					</div>
				</{{ name }}Filter>
			</div>
		</svelte:fragment>
		{#if showCreateDialog}
			<{{ name }}FormDialog
				text={$LL.ui.button.create()}
				{fields}
				select
				clearAfterSelect
				class="btn-accent"
				on:select={(e) => {
					value = [...(value || []), e.detail.value];
				{% raw %}}}{% endraw %}
			>
				<Icon slot="sm" src={Plus} class="h-6 w-6" solid />
			</{{ name }}FormDialog>
		{/if}
		<slot />
	</Buttons>
</div>
<div class="divider" />
<Table {zIndex} class="max-sm:hidden {className}">
	<thead>
		<tr>
			<th class="w-0">
				<label>
					<input
						type="checkbox"
						class="checkbox"
						bind:checked={selectAll}
						on:change={(e) => {
							if (value && value.length > 0) {
								if (selectAll) {
									selectedIdList = [
										...new Set([...selectedIdList, ...value.map((node) => node?.{{ idName }})])
									];
								} else {
									selectedIdList = [
										...selectedIdList.filter(
											(selectedId) => !value?.some((node) => node?.{{ idName }} === selectedId)
										)
									];
								}
							}
						{% raw %}}}{% endraw %}
					/>
				</label>
			</th>
			{%- for field in fields %}
			{#if !fields.{{ field.fieldName }}?.hidden}
				{%- if field.isScalarType or field.isEnumType %}
				<{{ field.fieldTypeName }}Th
					name={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}
					bind:value={args.{{ field.fieldName }}}
					{%- if field.isListType == false %}
					bind:sort={orderBy.{{ field.fieldName }}}
					{%- endif %}
					on:filter={(e) => dispatch('query', { args, orderBy })}
				/>
				{%- elsif field.inQueryArgs %}
				<{{ field.fieldTypeName }}Th
					name={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}
					bind:value={args.{{ field.fieldName }}}
					on:filter={(e) => dispatch('query', { args, orderBy })}
				/>
				{%- else %}
				<td>{$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}</td>
				{%- endif %}
			{/if}
			{%- endfor %}
			<th class="w-0" />
		</tr>
	</thead>
	<tbody>
		{#if isFetching}
			<tr>
				<td colspan="999">
					<Loading class="loading-lg" />
				</td>
			</tr>
		{:else if value && value.length > 0}
			{#each value as node, row}
				{#if node}
					<tr class="hover">
						<th>
							<label>
								<input
									type="checkbox"
									class="checkbox"
									bind:group={selectedIdList}
									value={node.{{ idName }}}
								/>
							</label>
						</th>
						{%- for field in fields %}
						<slot name="{{ field.fieldName }}">
							{#if !fields.{{ field.fieldName }}?.hidden}
								{%- if field.isScalarType or field.isEnumType or field.isFile %}
								<{{ field.fieldTypeName }}Td
									name="{{ field.fieldName }}"
									bind:value={node.{{ field.fieldName }}}
									{%- if field.isListType %}
									list
									{%- endif %}
									{%- if field.inMutationArgs and field.fieldName != idName %}
									on:save={(e) =>
										dispatch('save', {
											value: { {{ field.fieldName }}: node?.{{ field.fieldName }}, where: { {{ idName }}: { val: node?.{{ idName }} } } }
										})}
									readonly={fields.{{ field.fieldName }}?.readonly}
									disabled={fields.{{ field.fieldName }}?.disabled}
									{%- else %}
									readonly
									{%- endif %}
									errors={errors?.[row]?.iterms?.{{ field.fieldName }}}
									{%- if field.isFile %}
									on:upload
									{%- endif %}
									{zIndex}
								/>
								{%- elsif field.isSelect %}
								<{{ field.fieldTypeName }}SelectTd
									name="{{ field.fieldName }}"
									bind:value={node.{{ field.fieldName }}}
									{%- if field.isListType %}
									list
									{%- endif %}
									errors={errors?.[row]?.iterms?.{{ field.fieldName }}}
									readonly={fields.{{ field.fieldName }}?.readonly}
									disabled={fields.{{ field.fieldName }}?.disabled}
									on:save={(e) =>
										dispatch('save', {
											value: { {{ field.fieldName }}: node?.{{ field.fieldName }}, where: { {{ idName }}: { val: node?.{{ idName }} } } }
										})}
									{zIndex}
								/>
								{%- else %}
								<Td errors={errors?.[row]?.iterms?.{{ field.fieldName }}} {zIndex}>
									{#if node.{{idName}}}
										<ObjectLink
											bind:value={node.{{ field.fieldName }}}
											{%- if field.isNamed %}
											textFieldName="name"
											{%- endif %}
											path={`${node.{{ idName }}}/{{ field.fieldName | paramCase }}`}
											name={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}
											on:goto
										/>
									{:else}
										<{{ field.fieldTypeName }}TableDialog
											bind:value={node.{{ field.fieldName }}}
											class="btn-link"
											{%- if field.isNamed %}
											textFieldName="name"
											{%- endif %}
											{%- if field.isListType == false %}
											singleChoice
											{%- endif %}
											readonly={fields.{{ field.fieldName }}?.readonly}
											disabled={fields.{{ field.fieldName }}?.disabled}
										/>
									{/if}
								</Td>
								{%- endif %}
							{/if}
						</slot>
						{%- endfor %}
						<th class="hover:z-[{zIndex + 3}]">
							<div class="flex space-x-1">
								{#if showEditButton}
									<div class="tooltip" data-tip={$LL.{{ appName }}.components.table.editBtn()}>
										<button
											class="btn btn-square btn-ghost btn-xs"
											on:click|preventDefault={(e) => dispatch('edit', { value: node, row })}
										>
											<Icon src={PencilSquare} solid />
										</button>
									</div>
								{/if}
								{#if showEditDialog}
									<{{ name }}FormDialog
										text={$LL.{{ appName }}.components.table.editBtn()}
										class="btn btn-square btn-ghost btn-xs"
										bind:value={node}
										select
										{fields}
									>
										<Icon slot="sm" src={PencilSquare} solid />
										<Icon src={PencilSquare} solid />
									</{{ name }}FormDialog>
								{/if}
								{#if showUnbindButton}
									<div class="tooltip" data-tip={$LL.{{ appName }}.components.table.unbindBtn()}>
										<button
											class="btn btn-square btn-ghost btn-xs"
											on:click|preventDefault={(e) => dispatch('unbind', { value: node, row })}
										>
											<Icon src={ArchiveBoxXMark} solid />
										</button>
									</div>
								{/if}
								{#if showRemoveButton}
									<div class="tooltip" data-tip={$LL.{{ appName }}.components.table.removeBtn()}>
										<button
											class="btn btn-square btn-ghost btn-xs"
											on:click|preventDefault={(e) => dispatch('remove', { value: node, row })}
										>
											<Icon src={Trash} solid />
										</button>
									</div>
								{/if}
							</div>
						</th>
					</tr>
				{/if}
			{/each}
		{:else}
			<tr>
				<td colspan="999">
					<Empty class="badge-lg" />
				</td>
			</tr>
		{/if}
	</tbody>
</Table>
<div class="sm:hidden">
	{#if isFetching}
		<Loading />
	{:else if value && value.length > 0}
		{#each value as node, row}
			{#if node}
				<Table {zIndex} class={className}>
					<thead>
						<tr>
							<th class="w-0">
								<label>
									<input
										type="checkbox"
										class="checkbox"
										bind:group={selectedIdList}
										value={node.{{ idName }}}
									/>
								</label>
							</th>
							<th class="flex justify-end hover:z-[{zIndex + 3}]">
								<div class="flex space-x-1">
									{#if showEditButton}
										<div class="tooltip" data-tip={$LL.{{ appName }}.components.table.editBtn()}>
											<button
												class="btn btn-square btn-ghost btn-xs"
												on:click|preventDefault={(e) => dispatch('edit', { value: node, row })}
											>
												<Icon src={PencilSquare} solid />
											</button>
										</div>
									{/if}
									{#if showEditDialog}
										<{{ name }}FormDialog
											text={$LL.{{ appName }}.components.table.editBtn()}
											class="btn btn-square btn-ghost btn-xs"
											bind:value={node}
											select
											{fields}
										>
											<Icon slot="sm" src={PencilSquare} solid />
											<Icon src={PencilSquare} solid />
										</{{ name }}FormDialog>
									{/if}
									{#if showUnbindButton}
										<div class="tooltip" data-tip={$LL.{{ appName }}.components.table.unbindBtn()}>
											<button
												class="btn btn-square btn-ghost btn-xs"
												on:click|preventDefault={(e) => dispatch('unbind', { value: node, row })}
											>
												<Icon src={ArchiveBoxXMark} solid />
											</button>
										</div>
									{/if}
									{#if showRemoveButton}
										<div class="tooltip" data-tip={$LL.{{ appName }}.components.table.removeBtn()}>
											<button
												class="btn btn-square btn-ghost btn-xs"
												on:click|preventDefault={(e) => dispatch('remove', { value: node, row })}
											>
												<Icon src={Trash} solid />
											</button>
										</div>
									{/if}
								</div>
							</th>
						</tr>
					</thead>
					<tbody>
						{%- for field in fields %}
						<slot name="{{ field.fieldName }}">
							{#if !fields.{{ field.fieldName }}?.hidden}
								<tr class="hover">
									<td>{$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}</td>
									{%- if field.isScalarType or field.isEnumType or field.isFile %}
									<{{ field.fieldTypeName }}Td
										name="{{ field.fieldName }}"
										bind:value={node.{{ field.fieldName }}}
										{%- if field.isListType %}
										list
										{%- endif %}
										{%- if field.inMutationArgs and field.fieldName != idName %}
										on:save={(e) =>
											dispatch('save', {
												value: { {{ field.fieldName }}: node?.{{ field.fieldName }}, where: { {{ idName }}: { val: node?.{{ idName }} } } }
											})}
										readonly={fields.{{ field.fieldName }}?.readonly}
										disabled={fields.{{ field.fieldName }}?.disabled}
										{%- else %}
										readonly
										{%- endif %}
										errors={errors?.[row]?.iterms?.{{ field.fieldName }}}
										{%- if field.isFile %}
										on:upload
										{%- endif %}
										{zIndex}
									/>
									{%- elsif field.isSelect %}
									<{{ field.fieldTypeName }}SelectTd
										name="{{ field.fieldName }}"
										bind:value={node.{{ field.fieldName }}}
										{%- if field.isListType %}
										list
										{%- endif %}
										errors={errors?.[row]?.iterms?.{{ field.fieldName }}}
										readonly={fields.{{ field.fieldName }}?.readonly}
										disabled={fields.{{ field.fieldName }}?.disabled}
										on:save={(e) =>
											dispatch('save', {
												value: { {{ field.fieldName }}: node?.{{ field.fieldName }}, where: { {{ idName }}: { val: node?.{{ idName }} } } }
											})}
										{zIndex}
									/>
									{%- else %}
									<Td errors={errors?.[row]?.iterms?.{{ field.fieldName }}} {zIndex}>
										{#if node.{{idName}}}
											<ObjectLink
												bind:value={node.{{ field.fieldName }}}
												{%- if field.isNamed %}
												textFieldName="name"
												{%- endif %}
												path={`${node.{{ idName }}}/{{ field.fieldName | paramCase }}`}
												name={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}
												on:goto
											/>
										{:else}
											<{{ field.fieldTypeName }}TableDialog
												bind:value={node.{{ field.fieldName }}}
												class="btn-link"
												{%- if field.isNamed %}
												textFieldName="name"
												{%- endif %}
												{%- if field.isListType == false %}
												singleChoice
												{%- endif %}
												readonly={fields.{{ field.fieldName }}?.readonly}
												disabled={fields.{{ field.fieldName }}?.disabled}
											/>
										{/if}
									</Td>
									{%- endif %}
								</tr>
							{/if}
						</slot>
						{%- endfor %}
					</tbody>
				</Table>
				{#if row < value.length - 1}
					<div class="divider my-0" />
				{/if}
			{/if}
		{/each}
	{:else}
		<Empty />
	{/if}
</div>