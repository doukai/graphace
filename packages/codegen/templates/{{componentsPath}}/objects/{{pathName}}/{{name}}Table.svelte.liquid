<script lang="ts">
	import { createEventDispatcher, getContext } from 'svelte';
	import type { Readable } from 'svelte/store';
	import { Icon } from '@steeze-ui/svelte-icon';
	import { PencilSquare, Trash, ArchiveBoxXMark } from '@steeze-ui/heroicons';
	import type { Errors } from '@graphace/commons';
	import { Buttons, Empty, Loading, SearchInput, Table, Td } from '@graphace/ui';
	import { type Option, {% for scalar in scalars %}{{ scalar }}Th, {{ scalar }}Td, {% endfor %}{% if hasFileField %}FileTd, {% endif %}ObjectTd } from '@graphace/ui-graphql';
	{%- for enum in enums %}
	import {{ enum }}Th from '~/{{ componentsPath }}/enums/{{ enum | paramCase }}/{{ enum }}Th.svelte';
	import {{ enum }}Td from '~/{{ componentsPath }}/enums/{{ enum | paramCase }}/{{ enum }}Td.svelte';
	{%- endfor %}
	{%- for object in objects %}
	import {{ object }}Th from '~/{{ componentsPath }}/objects/{{ object | paramCase }}/{{ object }}Th.svelte';
	{%- endfor %}
	{%- for select in selects %}
	import {{ select }}SelectTd from '~/{{ componentsPath }}/objects/{{ select | paramCase }}/{{ select }}SelectTd.svelte';
	{%- endfor %}
	{%- for dialog in nonSelects %}
	import {{ dialog }}TableDialog from '~/{{ componentsPath }}/objects/{{ dialog | paramCase }}/{{ dialog }}TableDialog.svelte';
	{%- endfor %}
	import type { TranslationFunctions } from '$i18n/i18n-types';
	import type {
		{{ name }}OrderBy,
		{{ queryTypeName }}{{ name }}ListArgs,
		{{ name }}Input
	} from '~/{{ schemaTypesPath }}';

	export let value: ({{ name }}Input | null | undefined)[] | null | undefined = undefined;
	export let args: {{ queryTypeName }}{{ name }}ListArgs = {};
	export let orderBy: {{ name }}OrderBy = {};
	export let selectedIdList: (string | null | undefined)[] = [];
	export let isFetching: boolean = false;
	export let isMutating: boolean = false;
	export let errors: Record<number, Errors> = {};
	export let showEditButton: boolean = false;
	export let showRemoveButton: boolean = false;
	export let showUnbindButton: boolean = false;
	export let showSaveButton: boolean = false;
	export let showCreateButton: boolean = false;
	export let showSelectButton: boolean = false;
	export let showBackButton: boolean = false;
	export let zIndex: number = 0;
	let className: string | undefined = undefined;
	export { className as class };
	export let fields: {
		{%- for field in fields %}
		{{ field.fieldName }}: Option;
		{%- endfor %}
	} = {
		{%- for field in fields %}
		{{ field.fieldName }}: { readonly: false, disabled: false, hidden: false }{% if forloop.last == false %},{% endif %}
		{%- endfor %}
	};

	const LL = getContext<Readable<TranslationFunctions>>('LL');

	const dispatch = createEventDispatcher<{
		search: { value: string | undefined };
		query: { args: {{ queryTypeName }}{{ name }}ListArgs; orderBy: {{ name }}OrderBy };
		remove: { value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined };
		unbind: { value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined };
		edit: { value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined };
		save: { value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined };
		select: { value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined };
		create: {};
		back: {};
	}>();

	let selectAll: boolean;
</script>

<div class="flex md:justify-between">
	<span class="max-sm:hidden text-xl font-semibold self-center">
		{$LL.graphql.objects.{{ name }}.name()}
	</span>
	<Buttons
		class="flex space-x-1 max-sm:w-full"
		showRemoveButton={showRemoveButton && selectedIdList.length > 0}
		showUnbindButton={showUnbindButton && selectedIdList.length > 0}
		{showSaveButton}
		{showCreateButton}
		showSelectButton={showSelectButton && selectedIdList.length > 0}
		{showBackButton}
		loading={isMutating}
		on:save={(e) => dispatch('save', { value })}
		on:remove={(e) =>
			dispatch('remove', {
				value: value?.filter((node) => selectedIdList.includes(node?.{{ idName }}))
			})}
		on:unbind={(e) =>
			dispatch('unbind', {
				value: value?.filter((node) => selectedIdList.includes(node?.{{ idName }}))
			})}
		on:select={(e) =>
			dispatch('select', {
				value: value?.filter((node) => selectedIdList.includes(node?.{{ idName }}))
			})}
		on:create
		on:back
	>
		<SearchInput slot="start" on:search />
	</Buttons>
</div>
<div class="divider" />
<Table {zIndex} class={className}>
	<thead>
		<tr>
			<th class="w-0">
				<label>
					<input
						type="checkbox"
						class="checkbox"
						bind:checked={selectAll}
						on:change={(e) => {
							if (value && value.length > 0) {
								selectedIdList = selectAll ? value.map((node) => node?.{{ idName }}) : [];
							}
						{% raw %}}}{% endraw %}
					/>
				</label>
			</th>
			{%- for field in fields %}
			{#if !fields.{{ field.fieldName }}.hidden}
				{%- if field.isScalarType or field.isEnumType %}
				<{{ field.fieldTypeName }}Th
					name={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}
					bind:value={args.{{ field.fieldName }}}
					{%- if field.isListType == false %}
					bind:sort={orderBy.{{ field.fieldName }}}
					{%- endif %}
					on:filter={(e) => dispatch('query', { args, orderBy })}
				/>
				{%- elsif field.inQueryArgs %}
				<{{ field.fieldTypeName }}Th
					name={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}
					bind:value={args.{{ field.fieldName }}}
					on:filter={(e) => dispatch('query', { args, orderBy })}
				/>
				{%- else %}
				<td>{$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}</td>
				{%- endif %}
			{/if}
			{%- endfor %}
			<th class="w-0" />
		</tr>
	</thead>
	<tbody>
		{#if isFetching}
			<tr>
				<td colspan="999">
					<Loading class="loading-lg" />
				</td>
			</tr>
		{:else if value && value.length > 0}
			{#each value as node, row}
				{#if node}
					<tr class="hover">
						<th>
							<label>
								<input
									type="checkbox"
									class="checkbox"
									bind:group={selectedIdList}
									value={node.{{ idName }}}
								/>
							</label>
						</th>
						{%- for field in fields %}
						<slot name="{{ field.fieldName }}">
							{#if !fields.{{ field.fieldName }}.hidden}
								{%- if field.isScalarType or field.isEnumType %}
								<{{ field.fieldTypeName }}Td
									name="{{ field.fieldName }}"
									bind:value={node.{{ field.fieldName }}}
									{%- if field.isListType %}
									list
									{%- endif %}
									{%- if field.inMutationArgs and field.fieldName != idName %}
									on:save={(e) =>
										dispatch('save', {
											value: { {{ field.fieldName }}: node?.{{ field.fieldName }}, where: { {{ idName }}: { val: node?.{{ idName }} } } }
										})}
									readonly={fields.{{ field.fieldName }}.readonly}
									disabled={fields.{{ field.fieldName }}.disabled}
									{%- else %}
									readonly
									{%- endif %}
									errors={errors?.[row]?.iterms?.{{ field.fieldName }}}
									{%- if field.isFile %}
									on:upload
									{%- endif %}
									{zIndex}
								/>
								{%- elsif field.isSelect %}
								<{{ field.fieldTypeName }}SelectTd
									name="{{ field.fieldName }}"
									bind:value={node.{{ field.fieldName }}}
									{%- if field.isListType %}
									list
									{%- endif %}
									errors={errors?.[row]?.iterms?.{{ field.fieldName }}}
									readonly={fields.{{ field.fieldName }}.readonly}
									disabled={fields.{{ field.fieldName }}.disabled}
									on:save={(e) =>
										dispatch('save', {
											value: { {{ field.fieldName }}: node?.{{ field.fieldName }}, where: { {{ idName }}: { val: node?.{{ idName }} } } }
										})}
									{zIndex}
								/>
								{%- else %}
								{#if node.{{ idName }}}
									<ObjectTd
										{%- if field.isNamed %}
										namedStruct={node.{{ field.fieldName }}}
										{%- endif %}
										errors={errors?.[row]?.iterms?.{{ field.fieldName }}}
										disabled={fields.{{ field.fieldName }}.disabled}
										path={`${node.{{ idName }}}/{{ field.fieldName | paramCase }}`}
										name={node.{% if isNamed %}name{% else %}{{ idName }}{% endif %} + ':' + $LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}
										on:goto
										{zIndex}
									/>
								{:else}
									<Td {zIndex}>
										<{{ field.fieldTypeName }}TableDialog
											bind:value={node.{{ field.fieldName }}}
											{%- if field.isListType == false %}
											singleChoice={true}
											{%- endif %}
											readonly={fields.{{ field.fieldName }}.readonly}
											disabled={fields.{{ field.fieldName }}.disabled}
											on:select={(e) =>
												dispatch('save', {
													value: { {{ field.fieldName }}: node?.{{ field.fieldName }}, where: { {{ idName }}: { val: node?.{{ idName }} } } }
												})}
											class="btn-xs"
										/>
									</Td>
								{/if}
								{%- endif %}
							{/if}
						</slot>
						{%- endfor %}
						<th class="hover:z-[{zIndex + 3}]">
							<div class="flex space-x-1">
								{#if showEditButton}
									<div class="tooltip" data-tip={$LL.{{ appName }}.components.table.editBtn()}>
										<button
											class="btn btn-square btn-ghost btn-xs"
											on:click|preventDefault={(e) => dispatch('edit', { value: node })}
										>
											<Icon src={PencilSquare} solid />
										</button>
									</div>
								{/if}
								{#if showUnbindButton}
									<div class="tooltip" data-tip={$LL.{{ appName }}.components.table.unbindBtn()}>
										<button
											class="btn btn-square btn-ghost btn-xs"
											on:click|preventDefault={(e) => dispatch('unbind', { value: node })}
										>
											<Icon src={ArchiveBoxXMark} solid />
										</button>
									</div>
								{/if}
								{#if showRemoveButton}
									<div class="tooltip" data-tip={$LL.{{ appName }}.components.table.removeBtn()}>
										<button
											class="btn btn-square btn-ghost btn-xs"
											on:click|preventDefault={(e) => dispatch('remove', { value: node })}
										>
											<Icon src={Trash} solid />
										</button>
									</div>
								{/if}
							</div>
						</th>
					</tr>
				{/if}
			{/each}
		{:else}
			<tr>
				<td colspan="999">
					<Empty class="badge-lg" />
				</td>
			</tr>
		{/if}
	</tbody>
</Table>
