<script lang="ts">
	import { createEventDispatcher } from 'svelte';
	import type { Errors, GraphQLError } from '@graphace/commons/types';
	import { {% for scalar in scalars %}{{ scalar }}Th, {{ scalar }}Td{% if forloop.last == false %}, {% endif %}{% endfor %} } from '@graphace/ui-graphql/components/table';
	{%- if imports %}
	{%- for import in imports %}
	{{ import }}
	{%- endfor %}
	{%- endif %}
	{%- for enum in enums %}
	import {{ enum }}Th from '~/{{ enumsPath }}/{{ enum | paramCase }}/{{ enum }}Th.svelte';
	import {{ enum }}Td from '~/{{ enumsPath }}/{{ enum | paramCase }}/{{ enum }}Td.svelte';
	{%- endfor %}
	import { Card } from '@graphace/ui/components/card';
	import { Table, TableHead, TableLoading, TableEmpty } from '@graphace/ui/components/table';
	import { notifications } from '@graphace/ui/components/Notifications.svelte';
	import { Icon } from '@steeze-ui/svelte-icon';
	import { ArchiveBoxArrowDown } from '@steeze-ui/heroicons';
	import LL from '$i18n/i18n-svelte';
	import type {
		{{ name }},
		{{ name }}OrderBy,
		{{ queryTypeName }}{{ name }}ListArgs,
		{{ name }}Input
	} from '~/{{ schemaTypesPath }}';

	export let nodes: ({{ name }} | null | undefined)[] | null | undefined;
	export let isFetching: boolean;
	export let errors: Record<number, Errors> = {};
	export let multipleSelect: boolean = true;
	export let showBackButton: boolean = true;

	const dispatch = createEventDispatcher<{
		fetch: {
			args: {{ queryTypeName }}{{ name }}ListArgs;
			then: (data: ({{ name }} | null | undefined)[] | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		};
		mutation: {
			args: {{ name }}Input;
			then: (data: {{ name }} | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		};
		select: {
			selected: {{ name }}Input | null | undefined | ({{ name }}Input | null | undefined)[];
			then: () => void;
			catch: (errors: GraphQLError[]) => void;
		};
		back: {};
	}>();

	let showSelectButton = false;
	let args: {{ queryTypeName }}{{ name }}ListArgs = {};
	let orderBy: {{ name }}OrderBy = {};

	let selectAll: boolean;
	let selectedIdList: string | null | undefined | (string | null | undefined)[] = multipleSelect
		? []
		: undefined;

	$: if (selectedIdList && !Array.isArray(selectedIdList) || Array.isArray(selectedIdList) && selectedIdList.length > 0) {
		showSelectButton = true;
	} else {
		showSelectButton = false;
	}

	const query = () => {
		if (Object.keys(orderBy).length > 0) {
			args.orderBy = orderBy;
		} else {
			args.orderBy = undefined;
		}

		dispatch('fetch', {
			args,
			then: (data) => {
				errors = {};
			},
			catch: (errors) => {
				console.error(errors);
				notifications.error($LL.web.message.requestFailed());
			}
		});
	};

	const search = (searchValue: string | undefined) => {
		let args: {{ queryTypeName }}{{ name }}ListArgs = {};
		if (searchValue) {
			args.cond = 'OR';
			{%- if fields %}
			{%- for field in fields %}
			{%- if field.isScalarType and field.inQueryArgs and field.fieldType.name == 'String' %}
			args.{{ field.fieldName }} = { opr: 'LK', val: `%${searchValue}%` };
			{%- endif %}
			{%- endfor %}
			{%- endif %}
		} else {
			args.cond = undefined;
			{%- if fields %}
			{%- for field in fields %}
			{%- if field.isScalarType and field.inQueryArgs and field.fieldType.name == 'String' %}
			args.{{ field.fieldName }} = undefined;
			{%- endif %}
			{%- endfor %}
			{%- endif %}
		}

		dispatch('fetch', {
			args,
			then: (data) => {
				errors = {};
			},
			catch: (errors) => {
				console.error(errors);
				notifications.error($LL.web.message.requestFailed());
			}
		});
	};

	const updateField = (args: {{ name }}Input | null | undefined) => {
		if (args) {
			dispatch('mutation', {
				args,
				then: (data) => {
					notifications.success($LL.web.message.saveSuccess());
				},
				catch: (errors) => {
					console.error(errors);
					notifications.error($LL.web.message.saveFailed());
				}
			});
		}
	}
</script>

<Card>
	<TableHead
		title={$LL.graphql.objects.{{ name }}.name()}
		showCreateButton={false}
		showSaveButton={false}
		showRemoveButton={false}
		{showSelectButton}
		{showBackButton}
		on:search={(e) => search(e.detail.value)}
		on:select={() =>
			dispatch('select', {
				selected: Array.isArray(selectedIdList)
					? selectedIdList.flatMap((id) => nodes?.find((node) => node?.{{ idName }} === id))
					: nodes?.find((node) => node?.{{ idName }} === selectedIdList),
				then: () => {
					notifications.success($LL.web.message.saveSuccess());
					dispatch('back');
				},
				catch: (errors) => {
					console.error(errors);
					notifications.error($LL.web.message.saveFailed());
				}
			})}
		on:back
	/>
	<div class="divider" />
	<Table>
		<thead>
			<tr class="z-20">
				<th class="w-12">
					{#if multipleSelect}
						<label>
							<input
								type="checkbox"
								class="checkbox"
								bind:checked={selectAll}
								on:change={() => {
									if (nodes && nodes.length > 0) {
										selectedIdList = selectAll ? nodes.map((node) => node?.{{ idName }}) : [];
									}
								}}
							/>
						</label>
					{/if}
				</th>
				{%- if fields %}
				{%- for field in fields %}
				{%- if field.isScalarType or field.isEnumType %}
				{%- if field.inQueryArgs %}
				<{{ field.fieldType.name }}Th
					name={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}
					bind:expression={args.{{ field.fieldName }}}
					{%- if field.isListType == false %}
					bind:sort={orderBy.{{ field.fieldName }}}
					{%- endif %}
					on:filter={query}
				/>
				{%- else %}
				<td>{$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}</td>
				{%- endif %}
				{%- endif %}
				{%- endfor %}
				{%- endif %}
				<th />
			</tr>
		</thead>
		{#if isFetching}
			<TableLoading rows={10} cols={% raw %}{{% endraw %}{{cols}} + 2}/>
		{:else}
			<tbody>
				{#if nodes && nodes.length > 0}
					{#each nodes as node, row}
						{#if node && node.{{ idName }}}
							<tr class="hover">
								<th class="z-10 w-12">
									<label>
										{#if multipleSelect}
											<input type="checkbox" class="checkbox" bind:group={selectedIdList} value={node.id} />
										{:else}
											<input type="radio" class="radio" bind:group={selectedIdList} value={node.id} />
										{/if}
									</label>
								</th>
								{%- if fields %}
								{%- for field in fields %}
								{%- if field.isScalarType or field.isEnumType %}
								{%- if field.component %}
								{{ field.component }}
								{%- else %}
								<{{ field.fieldType.name }}Td
									name="{{ field.fieldName }}"
									bind:value={node.{{ field.fieldName }}}
									{%- if field.isListType %}
									list
									{%- endif %}
									{%- if field.inMutationArgs and field.fieldName != idName %}
									on:save={() => updateField({ {{ field.fieldName }}: node?.{{ field.fieldName }}, where: { {{ idName }}: { val: node?.{{ idName }} } } })}
									{%- else %}
									readonly
									{%- endif %}
									errors={errors[row]?.iterms?.{{ field.fieldName }}}
								/>
								{%- endif %}
								{%- endif %}
								{%- endfor %}
								{%- endif %}
								<th class="z-10 w-12">
									<div class="flex space-x-1">
										<div class="tooltip" data-tip={$LL.web.components.table.selectBtn()}>
											<button
												class="btn btn-square btn-ghost btn-xs"
												on:click={(e) => {
													e.preventDefault();
													if (node && node.{{ idName }}) {
														dispatch('select', {
															selected: multipleSelect ? [node] : node,
															then: () => {
																notifications.success($LL.web.message.saveSuccess());
																dispatch('back');
															},
															catch: (errors) => {
																console.error(errors);
																notifications.error($LL.web.message.saveFailed());
															}
														});
													}
												}}
											>
												<Icon src={ArchiveBoxArrowDown} solid />
											</button>
										</div>
									</div>
								</th>
							</tr>
						{/if}
					{/each}
				{:else}
					<TableEmpty cols={% raw %}{{% endraw %}{{cols}} + 2}/>
				{/if}
			</tbody>
		{/if}
	</Table>
</Card>
