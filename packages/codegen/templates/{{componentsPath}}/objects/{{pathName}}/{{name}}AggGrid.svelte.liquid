<script lang='ts'>
	import { getContext } from 'svelte';
	import type { Readable, Writable } from 'svelte/store';
	import { RevoGrid } from '@revolist/svelte-datagrid';
	import NumberColumnType from '@revolist/revogrid-column-numeral';
	import type { Field } from '@graphace/graphql';
	import {{ name }}Agg from '~/{{ objectsPath }}/{{ name | paramCase }}/{{ name }}Agg.svelte';
	import type { {{ name }}Connection, {{ name }}ConnectionQueryArguments } from '~/{{ schemaTypesPath }}';
	import { getGridTheme, fieldsToAggColumns, nodesToAggSource } from '~/utils';

	export let connection: {{ name }}Connection;
	export let fields: Field[] = [];
	export let queryArguments: {{ name }}ConnectionQueryArguments = {};
	export let isFetching: boolean = false;
	export let showHeader: boolean = true;
	export let showFooter: boolean = true;
	export let showOptionButton: boolean = true;
	export let showFilterButton: boolean = true;
	export let showBookmarkButton: boolean = false;

	const LL = getContext<Readable<TranslationFunctions>>('LL');
	const themeStore = getContext<Writable<string | undefined>>('theme');
	const typeName = '{{ name }}';

	const columnTypes = {
		numeric: new NumberColumnType()
	};

	let getFieldName: (fieldName: string, subFieldName?: string) => string;
	let getGrouByName: (fieldName: string) => string;

	$: theme = getGridTheme($themeStore);
	$: nodes = connection?.edges?.map((edge) => edge?.node);
	$: totalCount = connection?.totalCount || 0;

	$: filter = {
		localization: {
			captions: {
				title: $LL.{{ appName }}.components.grid.captions.title(),
				save: $LL.{{ appName }}.components.grid.captions.save(),
				reset: $LL.{{ appName }}.components.grid.captions.reset(),
				ok: $LL.{{ appName }}.components.grid.captions.ok(),
				cancel: $LL.{{ appName }}.components.grid.captions.cancel(),
				add: $LL.{{ appName }}.components.grid.captions.add(),
				placeholder: $LL.{{ appName }}.components.grid.captions.placeholder(),
				and: $LL.{{ appName }}.components.grid.captions.and(),
				or: $LL.{{ appName }}.components.grid.captions.or()
			},
			filterNames: {
				none: $LL.{{ appName }}.components.grid.filterNames.none(),
				empty: $LL.{{ appName }}.components.grid.filterNames.empty(),
				notEmpty: $LL.{{ appName }}.components.grid.filterNames.notEmpty(),
				eq: $LL.{{ appName }}.components.grid.filterNames.eq(),
				notEq: $LL.{{ appName }}.components.grid.filterNames.notEq(),
				begins: $LL.{{ appName }}.components.grid.filterNames.begins(),
				contains: $LL.{{ appName }}.components.grid.filterNames.contains(),
				notContains: $LL.{{ appName }}.components.grid.filterNames.notContains(),
				eqN: $LL.{{ appName }}.components.grid.filterNames.eqN(),
				neqN: $LL.{{ appName }}.components.grid.filterNames.neqN(),
				gt: $LL.{{ appName }}.components.grid.filterNames.gt(),
				gte: $LL.{{ appName }}.components.grid.filterNames.gte(),
				lt: $LL.{{ appName }}.components.grid.filterNames.lt(),
				lte: $LL.{{ appName }}.components.grid.filterNames.lte()
			}
		}
	};

	$: columns = fieldsToAggColumns(
		typeName,
		queryArguments.groupBy || [],
		fields,
		getFieldName,
		getGrouByName
	);
	$: source = nodesToAggSource(typeName, queryArguments.groupBy || [], fields, nodes);
</script>

<{{ name }}Agg
	bind:fields
	bind:queryArguments
	{isFetching}
	{showHeader}
	{showFooter}
	{showOptionButton}
	{showFilterButton}
	{showBookmarkButton}
	{totalCount}
	className="p-0 md:h-screen"
	on:query
	on:bookmark
	bind:getFieldName
	bind:getGrouByName
>
	<RevoGrid
		{source}
		{columns}
		{filter}
		range={true}
		resize={true}
		autoSizeColumn={true}
		rowHeaders={true}
		{columnTypes}
		{theme}
	/>
</{{ name }}Agg>
