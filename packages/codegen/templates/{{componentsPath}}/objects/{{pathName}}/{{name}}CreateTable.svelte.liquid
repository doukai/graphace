<script lang="ts">
	import { createEventDispatcher, getContext } from 'svelte';
	import type { Readable } from 'svelte/store';
	import type { Errors{%- if useAuth -%}, PermissionsStore{%- endif -%} } from '@graphace/commons';
	import { Table, TableHead, TableEmpty, messageBoxs } from '@graphace/ui';
	import { ObjectTd, {% for scalar in scalars %}{{ scalar }}Th, {{ scalar }}Td{% if forloop.last == false %}, {% endif %}{% endfor %}{% if hasFileField %}, FileTd{% endif %} } from '@graphace/ui-graphql';
	{%- if imports %}
	{%- for import in imports %}
	{{ import }}
	{%- endfor %}
	{%- endif %}
	{%- for enum in enums %}
	import {{ enum }}Th from '~/{{ enumsPath }}/{{ enum | paramCase }}/{{ enum }}Th.svelte';
	import {{ enum }}Td from '~/{{ enumsPath }}/{{ enum | paramCase }}/{{ enum }}Td.svelte';
	{%- endfor %}
	import { Icon } from '@steeze-ui/svelte-icon';
	import { PencilSquare, Trash } from '@steeze-ui/heroicons';
	import type { TranslationFunctions } from '$i18n/i18n-types';
	import type { {{ name }}Input } from '~/{{ schemaTypesPath }}';

	export let nodes: ({{ name }}Input | null | undefined)[] | null | undefined;
	export let errors: Record<number, Errors> = {};
	export let showRemoveButton: boolean = true;
	export let showSaveButton: boolean = true;
	export let showBackButton: boolean = true;
	export let showGotoSelectButton: boolean = false;

	const LL = getContext<Readable<TranslationFunctions>>('LL');
	{%- if useAuth %}
	const permissions = getContext<PermissionsStore>('permissions');
	{%- endif %}

	const dispatch = createEventDispatcher<{
		edit: { row: number };
		create: {};
		mutation: { nodes: ({{ name }}Input | null | undefined)[] | null | undefined };
		save: { nodes: ({{ name }}Input | null | undefined)[] | null | undefined };
		gotoSelect: {};
		back: {};
	}>();

	let selectAll: boolean;
	let selectedRowList: (number | undefined)[] = [];

	const removeRow = (row: number) => {
		nodes = [...(nodes || []).splice(row, 1)];
		dispatch('mutation', { nodes });
	};

	const removeRows = () => {
		nodes = [...(nodes || []).filter((_, index) => !selectedRowList.includes(index))];
		dispatch('mutation', { nodes });
		selectedRowList = [];
	};
</script>

<TableHead
	title={$LL.graphql.objects.{{ name }}.name()}
	{%- if useAuth %}
	showRemoveButton={permissions.auth('{{ name }}::*::WRITE') && showRemoveButton && selectedRowList.length > 0}
	showSaveButton={permissions.auth('{{ name }}::*::WRITE') && showSaveButton}
	showGotoSelectButton={permissions.auth('{{ name }}::*::WRITE') && showGotoSelectButton}
	{%- else %}
	showRemoveButton={showRemoveButton && selectedRowList.length > 0}
	{showSaveButton}
	{showGotoSelectButton}
	{%- endif %}
	{showBackButton}
	showSearchInput={false}
	on:create
	on:save={(e) => dispatch('save', { nodes })}
	on:remove={(e) => {
		messageBoxs.open({
			title: $LL.{{ appName }}.components.table.removeModalTitle(),
			buttonName: $LL.{{ appName }}.components.table.removeBtn(),
			buttonType: 'error',
			confirm: () => {
				removeRows();
				return true;
			}
		});
	{% raw %}}{% endraw %}}
	on:gotoSelect
	on:back
/>
<div class="divider" />
<Table className="table-zebra table-pin-rows table-pin-cols md:table-sm">
	<thead>
		<tr class="z-20">
			<th class="w-12">
				<label>
					<input
						type="checkbox"
						class="checkbox md:checkbox-sm"
						bind:checked={selectAll}
						on:change={(e) => {
							if (nodes && nodes.length > 0) {
								selectedRowList = selectAll ? nodes.map((node) => nodes?.indexOf(node)) : [];
							}
						{% raw %}}{% endraw %}}
					/>
				</label>
			</th>
			{%- if fields %}
			{%- for field in fields %}
			{%- if useAuth %}
			{#if permissions.auth('{{ name }}::{{ field.fieldName }}::*')}
			{%- endif %}
			{%- if field.inMutationArgs %}
			<td>{$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}</td>
			{%- endif %}
			{%- if useAuth %}
			{/if}
			{%- endif %}
			{%- endfor %}
			{%- endif %}
			<th />
		</tr>
	</thead>
	<tbody>
		{#if nodes && nodes.length > 0}
			{#each nodes as node, row}
				{#if node}
					<tr class="hover">
						<th class="z-10 w-12">
							<label>
								<input type="checkbox" class="checkbox md:checkbox-sm" bind:group={selectedRowList} value={row} />
							</label>
						</th>
						{%- if fields %}
						{%- for field in fields %}
						{%- if useAuth %}
						{#if permissions.auth('{{ name }}::{{ field.fieldName }}::*')}
						{%- endif %}
						{%- if field.inMutationArgs %}
						{%- if field.component %}
						{{ field.component }}
						{%- else %}
						{%- if field.isScalarType or field.isEnumType or field.fieldTypeName == 'File' %}
						<{{ field.fieldTypeName }}Td
							name="{{ field.fieldName }}"
							bind:value={node.{{ field.fieldName }}}
							{%- if field.isListType %}
							list
							{%- endif %}
							{%- if field.inMutationArgs and field.fieldName != idName %}
							{%- if useAuth %}
							readonly={!permissions.auth('{{ name }}::{{ field.fieldName }}::WRITE')}
							{%- endif %}
							{%- else %}
							readonly
							{%- endif %}
							errors={errors[row]?.iterms?.{{ field.fieldName }}}
							{%- if field.fieldTypeName == 'File' %}
							on:upload
							{%- endif %}
						/>
						{%- else %}
						<ObjectTd name="{{ field.fieldName }}"{% if field.isNamed %} namedStruct={node.{{ field.fieldName }}}{% endif %} errors={errors[row]?.iterms?.{{ field.fieldName }}} path="_/{{ field.fieldName | paramCase }}" on:gotoField />
						{%- endif %}
						{%- endif %}
						{%- endif %}
						{%- if useAuth %}
						{/if}
						{%- endif %}
						{%- endfor %}
						{%- endif %}
						{%- if useAuth %}
						{#if permissions.auth('{{ name }}::*::WRITE')}
						{%- endif %}
						<th class="z-10 hover:z-30 w-24">
							<div class="flex space-x-1">
								<div class="tooltip" data-tip={$LL.{{ appName }}.components.table.editBtn()}>
									<button
										class="btn btn-square btn-ghost btn-xs"
										on:click|preventDefault={(e) => {
											dispatch('edit', { row });
										{% raw %}}{% endraw %}}
									>
										<Icon src={PencilSquare} solid />
									</button>
								</div>
								<div class="tooltip" data-tip={$LL.{{ appName }}.components.table.removeBtn()}>
									<button
										class="btn btn-square btn-ghost btn-xs"
										on:click|preventDefault={(e) => {
											messageBoxs.open({
												title: $LL.{{ appName }}.components.table.removeModalTitle(),
												buttonName: $LL.{{ appName }}.components.table.removeBtn(),
												buttonType: 'error',
												confirm: () => {
													removeRow(row);
													return true;
												}
											});
										{% raw %}}{% endraw %}}
									>
										<Icon src={Trash} solid />
									</button>
								</div>
							</div>
						</th>
						{%- if useAuth %}
						{/if}
						{%- endif %}
					</tr>
				{/if}
			{/each}
		{:else}
			<TableEmpty cols={% raw %}{{% endraw %}{{cols}} + 2}/>
		{/if}
	</tbody>
</Table>
