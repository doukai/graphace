<script lang="ts">
	import { Card, SearchInput } from '@graphace/ui';
	import {{ name }}TreeMenu from '~/lib/components/objects/{{ name | camelCase }}/{{ name }}TreeMenu.svelte';
	import { Operator, graphql } from '$houdini';
	import type { {{ name }}RootNodesQueryVariables } from './$houdini';

	export let currentDeep = 0;
	export let deeps = 2;
	export let showSearchInput: boolean = true;
	export let active{{ name }}Id: string | null | undefined = undefined;
	export let {{ name | camelCase }}Name: string | undefined = undefined;

	export const _{{ name }}RootNodesQueryVariables: {{ name }}RootNodesQueryVariables = ({ props }) => {
		return { deep: { opr: Operator.LT, val: deeps } };
	};

	const {{ name }}RootNodesQuery = graphql(`
		query {{ name }}RootNodesQuery($deep: IntExpression) @load {
			{{ name | camelCase }}List(deep: $deep) {
				{{ idName }}
				name
				path
				deep
				parentId
			}
		}
	`);

	let queryNodes: ({{ name | camelCase }}Name?: string | null | undefined) => void;
</script>

<Card>
	{#if showSearchInput}
		<SearchInput
			on:search={(e) => {
				active{{ name }}Id = undefined;
				if (e.detail.value) {
					queryNodes(e.detail.value);
				} else {
					queryNodes();
				}
			{% raw %}}{% endraw %}}
		/>
	{/if}
	<div class="divider" />

	<{{ name }}TreeMenu bind:active{{ name }}Id bind:{{ name | camelCase }}Name treeStructs={$GroupRootNodesQuery.data?.groupList} {currentDeep} {deeps} on:change bind:queryNodes />
</Card>
