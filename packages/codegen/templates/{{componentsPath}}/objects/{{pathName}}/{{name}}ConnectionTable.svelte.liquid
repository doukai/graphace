<script lang="ts">
	import { createEventDispatcher, getContext } from 'svelte';
	import type { Readable } from 'svelte/store';
	import type { Errors{%- if useAuth -%}, PermissionsStore{%- endif -%} } from '@graphace/commons';
	import { type GraphQLError, buildArguments } from '@graphace/graphql';
	import { Table, TableHead, TableLoading, TableEmpty, Pagination, messageBoxs, notifications, z_index } from '@graphace/ui';
	import { ObjectTd, {% for scalar in scalars %}{{ scalar }}Th, {{ scalar }}Td{% if forloop.last == false %}, {% endif %}{% endfor %}{% if hasFileField %}, FileTd{% endif %} } from '@graphace/ui-graphql';
	{%- if imports %}
	{%- for import in imports %}
	{{ import }}
	{%- endfor %}
	{%- endif %}
	{%- for enum in enums %}
	import {{ enum }}Th from '~/{{ enumsPath }}/{{ enum | paramCase }}/{{ enum }}Th.svelte';
	import {{ enum }}Td from '~/{{ enumsPath }}/{{ enum | paramCase }}/{{ enum }}Td.svelte';
	{%- endfor %}
	{%- for object in objects %}
	import {{ object }}Th from '~/{{ objectsPath }}/{{ object | paramCase }}/{{ object }}Th.svelte';
	{%- endfor %}
	{%- if selectImports %}
	{%- for selectType in selectImports %}
	import {{ selectType }}SelectTd from '~/{{ objectsPath }}/{{ selectType | paramCase }}/{{ selectType }}SelectTd.svelte';
	{%- endfor %}
	{%- endif %}
	import { Icon } from '@steeze-ui/svelte-icon';
	import { PencilSquare, Trash, ArchiveBoxXMark } from '@steeze-ui/heroicons';
	import { buildGraphQLErrors, buildGlobalGraphQLErrorMessage } from '~/utils';
	import type { TranslationFunctions } from '$i18n/i18n-types';
	import type {
		{{ name }}OrderBy,
		{{ queryTypeName }}{{ name }}ConnectionArgs,
		{{ name }}Input
	} from '~/{{ schemaTypesPath }}';

	export let nodes: ({{ name }}Input | null | undefined)[] | null | undefined = undefined;
	export let totalCount: number = 0;
	export let isFetching: boolean;
	export let errors: Record<number, Errors> = {};
	export let showSaveButton: boolean = true;
	export let showRemoveButton: boolean = true;
	export let showUnbindButton: boolean = false;
	export let showBackButton: boolean = true;
	export let showGotoSelectButton: boolean = false;
	
	const LL = getContext<Readable<TranslationFunctions>>('LL');
	{%- if useAuth %}
	const permissions = getContext<PermissionsStore>('permissions');
	{%- endif %}
	const z_class = z_index.top(1);
	const z_class2 = z_index.top(2);
	const z_class3 = z_index.top(3);

	const dispatch = createEventDispatcher<{
		fetch: {
			args: {{ queryTypeName }}{{ name }}ConnectionArgs;
			then: (data: ({{ name }}Input | null | undefined)[] | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		};
		mutation: {
			args: {{ name }}Input;
			then: (data: {{ name }}Input | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		};
		parentMutation: {
			args: {{ name }}Input[];
			then: (data: {{ name }}Input[] | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		};
		edit: { id: string };
		create: {};
		save: { nodes: ({{ name }}Input | null | undefined)[] | null | undefined };
		gotoSelect: {};
		back: {};
	}>();

	export let args: {{ queryTypeName }}{{ name }}ConnectionArgs = {};
	export let orderBy: {{ name }}OrderBy = {};
	export let after: string | undefined = undefined;
	export let before: string | undefined = undefined;
	export let pageNumber: number = 1;
	export let pageSize: number = 10;

	let selectAll: boolean;
	export let selectedIdList: (string | null | undefined)[] = [];

	export const queryPage = (toPageNumber?: number | undefined) => {
		let _args: {{ queryTypeName }}{{ name }}ConnectionArgs = buildArguments(args);

		if (Object.keys(orderBy).length > 0) {
			_args.orderBy = orderBy;
		} else {
			_args.orderBy = undefined;
		}

		if (after) {
			_args.after = after;
			_args.first = pageSize;
		} else if (before) {
			_args.before = before;
			_args.last = pageSize;
		} else {
			_args.offset = ((toPageNumber || pageNumber) - 1) * pageSize;
			_args.first = pageSize;
		}

		dispatch('fetch', {
			args: _args,
			then: (data) => {
				errors = {};
			},
			catch: (errors) => {
				console.error(errors);
				notifications.error($LL.{{ appName }}.message.requestFailed());
			}
		});
	};

	export const search = (searchValue: string | undefined) => {
		let _args: {{ queryTypeName }}{{ name }}ConnectionArgs = {};
		if (searchValue) {
			_args.cond = 'OR';
			{%- if fields %}
			{%- for field in fields %}
			{%- if field.isScalarType and field.inQueryArgs and field.fieldTypeName == 'String' %}
			_args.{{ field.fieldName }} = { opr: 'LK', val: `%${searchValue}%` };
			{%- endif %}
			{%- endfor %}
			{%- endif %}
		} else {
			_args.cond = undefined;
			{%- if fields %}
			{%- for field in fields %}
			{%- if field.isScalarType and field.inQueryArgs and field.fieldTypeName == 'String' %}
			_args.{{ field.fieldName }} = undefined;
			{%- endif %}
			{%- endfor %}
			{%- endif %}
		}
		
		if (after) {
			_args.after = after;
			_args.first = pageSize;
		} else if (before) {
			_args.before = before;
			_args.last = pageSize;
		} else {
			_args.offset = (pageNumber - 1) * pageSize;
			_args.first = pageSize;
		}

		dispatch('fetch', {
			args: _args,
			then: (data) => {
				errors = {};
			},
			catch: (errors) => {
				console.error(errors);
				notifications.error($LL.{{ appName }}.message.requestFailed());
			}
		});
	};

	const updateField = (args: {{ name }}Input | null | undefined, row?: number) => {
		if (args) {
			dispatch('mutation', {
				args,
				then: (data) => {
					if (nodes && row) {
						nodes[row] = data;
					}
					notifications.success($LL.{{ appName }}.message.saveSuccess());
				},
				catch: (graphQLErrors) => {
					console.error(graphQLErrors);
					errors = buildGraphQLErrors(graphQLErrors);
					const globalError = buildGlobalGraphQLErrorMessage(graphQLErrors);
					if (globalError) {
						messageBoxs.open({
							title: $LL.{{ appName }}.message.saveFailed(),
							content: globalError,
							buttonName: $LL.ui.button.back(),
							buttonType: 'neutral',
							confirm: () => {
								queryPage(1);
								return true;
							}
						});
					}
				}
			});
		}
	};

	const removeRow = (id: string) => {
		dispatch('mutation', {
			args: { where: { {{ idName }}: { val: id } }, isDeprecated: true },
			then: (data) => {
				notifications.success($LL.{{ appName }}.message.removeSuccess());
				queryPage(1);
			},
			catch: (graphQLErrors) => {
				console.error(graphQLErrors);
				errors = buildGraphQLErrors(graphQLErrors);
				const globalError = buildGlobalGraphQLErrorMessage(graphQLErrors);
				if (globalError) {
					messageBoxs.open({
						title: $LL.{{ appName }}.message.removeFailed(),
						content: globalError,
						buttonName: $LL.ui.button.back(),
						buttonType: 'neutral',
						confirm: () => {
							queryPage(1);
							return true;
						}
					});
				}
			}
		});
	};

	const removeRows = () => {
		dispatch('mutation', {
			args: {
				where: { {{ idName }}: { opr: 'IN', arr: selectedIdList } },
				isDeprecated: true
			},
			then: (data) => {
				notifications.success($LL.{{ appName }}.message.removeSuccess());
				queryPage(1);
			},
			catch: (graphQLErrors) => {
				console.error(graphQLErrors);
				errors = buildGraphQLErrors(graphQLErrors);
				const globalError = buildGlobalGraphQLErrorMessage(graphQLErrors);
				if (globalError) {
					messageBoxs.open({
						title: $LL.{{ appName }}.message.removeFailed(),
						content: globalError,
						buttonName: $LL.ui.button.back(),
						buttonType: 'neutral',
						confirm: () => {
							queryPage(1);
							return true;
						}
					});
				}
			}
		});
	};

	const unbindRows = (selectedIdList: (string | null | undefined)[]) => {
		dispatch('parentMutation', {
			args: selectedIdList
				.map((id) => {
					return { where: { {{ idName }}: { val: id } }, isDeprecated: true };
				}),
			then: (data) => {
				notifications.success($LL.{{ appName }}.message.unbindSuccess());
				queryPage(1);
			},
			catch: (graphQLErrors) => {
				console.error(graphQLErrors);
				errors = buildGraphQLErrors(graphQLErrors);
				const globalError = buildGlobalGraphQLErrorMessage(graphQLErrors);
				if (globalError) {
					messageBoxs.open({
						title: $LL.{{ appName }}.message.unbindFailed(),
						content: globalError,
						buttonName: $LL.ui.button.back(),
						buttonType: 'neutral',
						confirm: () => {
							queryPage(1);
							return true;
						}
					});
				}
			}
		});
	};
</script>

<TableHead
	title={$LL.graphql.objects.{{ name }}.name()}
	{%- if useAuth %}
	showRemoveButton={permissions.auth('{{ name }}::*::WRITE') && showRemoveButton && selectedIdList.length > 0}
	showUnbindButton={permissions.auth('{{ name }}::*::WRITE') && showUnbindButton && selectedIdList.length > 0}
	showSaveButton={permissions.auth('{{ name }}::*::WRITE') && showSaveButton}
	showGotoSelectButton={permissions.auth('{{ name }}::*::WRITE') && showGotoSelectButton}
	{%- else %}
	showRemoveButton={showRemoveButton && selectedIdList.length > 0}
	showUnbindButton={showUnbindButton && selectedIdList.length > 0}
	{showSaveButton}
	{showGotoSelectButton}
	{%- endif %}
	{showBackButton}
	on:create
	on:search={(e) => search(e.detail.value)}
	on:save={(e) => dispatch('save', { nodes })}
	on:remove={(e) => {
		messageBoxs.open({
			title: $LL.{{ appName }}.components.table.removeModalTitle(),
			buttonName: $LL.{{ appName }}.components.table.removeBtn(),
			buttonType: 'error',
			confirm: () => {
				removeRows();
				return true;
			}
		});
	{% raw %}}{% endraw %}}
	on:unbind={(e) =>
		messageBoxs.open({
			title: $LL.{{ appName }}.components.table.unbindModalTitle(),
			buttonName: $LL.{{ appName }}.components.table.unbindBtn(),
			buttonType: 'error',
			confirm: () => {
				unbindRows(selectedIdList);
				return true;
			},
			button1: {
				name: $LL.{{ appName }}.components.table.removeBtn(),
				className: 'btn-error',
				onClick: () => {
					removeRows();
					return true;
				}
			}
		})}
	on:gotoSelect
	on:back
/>
<div class="divider" />
<Table className="table-zebra table-pin-rows table-pin-cols md:table-sm">
	<thead>
		<tr class="{z_class2}">
			<th class="w-12">
				<label>
					<input
						type="checkbox"
						class="checkbox md:checkbox-sm"
						bind:checked={selectAll}
						on:change={(e) => {
							if (nodes && nodes.length > 0) {
								selectedIdList = selectAll ? nodes.map((node) => node?.{{ idName }}) : [];
							}
						{% raw %}}{% endraw %}}
					/>
				</label>
			</th>
			{%- if fields %}
			{%- for field in fields %}
			{%- if useAuth %}
			{#if permissions.auth('{{ name }}::{{ field.fieldName }}::*')}
			{%- endif %}
			{%- if field.inQueryArgs %}
			{%- if field.isScalarType or field.isEnumType %}
			<{{ field.fieldTypeName }}Th
				name={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}
				bind:value={args.{{ field.fieldName }}}
				{%- if field.isListType == false %}
				bind:sort={orderBy.{{ field.fieldName }}}
				{%- endif %}
				on:filter={(e) => queryPage(1)}
			/>
			{%- else %}
			<{{ field.fieldTypeName }}Th
				name={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}
				bind:value={args.{{ field.fieldName }}}
				on:filter={(e) => queryPage(1)}
			/>
			{%- endif %}
			{%- else %}
			<td>{$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}</td>
			{%- endif %}
			{%- if useAuth %}
			{/if}
			{%- endif %}
			{%- endfor %}
			{%- endif %}
			{%- if useAuth %}
			{#if permissions.auth('{{ name }}::*::WRITE')}
			{%- endif %}
			<th />
			{%- if useAuth %}
			{/if}
			{%- endif %}
		</tr>
	</thead>
	{#if isFetching}
		<TableLoading rows={pageSize} cols={% raw %}{{% endraw %}{{cols}} + 2}/>
	{:else}
		<tbody>
			{#if nodes && nodes.length > 0}
				{#each nodes as node, row}
					{#if node}
						<tr class="hover">
							<th class="{z_class} w-12">
								<label>
									<input type="checkbox" class="checkbox md:checkbox-sm" bind:group={selectedIdList} value={ node.{{ idName }} } />
								</label>
							</th>
							{%- if fields %}
							{%- for field in fields %}
							{%- if useAuth %}
							{#if permissions.auth('{{ name }}::{{ field.fieldName }}::*')}
							{%- endif %}
							{%- if field.component %}
							{{ field.component }}
							{%- else %}
							{%- if field.isScalarType or field.isEnumType or field.fieldTypeName == 'File' %}
							<{{ field.fieldTypeName }}Td
								name="{{ field.fieldName }}"
								bind:value={node.{{ field.fieldName }}}
								{%- if field.isListType %}
								list
								{%- endif %}
								{%- if field.inMutationArgs and field.fieldName != idName %}
								on:save={(e) => updateField({ {{ field.fieldName }}: node?.{{ field.fieldName }}, where: { {{ idName }}: { val: node?.{{ idName }} } } }, row)}
								{%- if useAuth %}
								readonly={!permissions.auth('{{ name }}::{{ field.fieldName }}::WRITE')}
								{%- endif %}
								{%- else %}
								readonly
								{%- endif %}
								errors={errors?.[row]?.iterms?.{{ field.fieldName }}}
								{%- if field.fieldTypeName == 'File' %}
								on:upload
								{%- endif %}
							/>
							{%- else %}
							{%- if field.select %}
							<{{ field.fieldTypeName }}SelectTd
								name="{{ field.fieldName }}"
								bind:value={node.{{ field.fieldName }}}
								{%- if field.isListType %}
								list
								{%- endif %}
								errors={errors?.[row]?.iterms?.{{ field.fieldName }}}
								{%- if useAuth %}
								readonly={!permissions.auth('{{ name }}::{{ field.fieldName }}::WRITE')}
								{%- endif %}
								on:save={(e) =>
									updateField({ {{ field.fieldName }}: node?.{{ field.fieldName }}, where: { {{ idName }}: { val: node?.{{ idName }} } } }, row)}
							/>
							{%- else %}
							<ObjectTd name="{{ field.fieldName }}"{% if field.isNamed %} namedStruct={node.{{ field.fieldName }}}{% endif %} errors={errors?.[row]?.iterms?.{{ field.fieldName }}} path={`${node.{{ idName }}}/{{ field.fieldName | paramCase }}`} on:gotoField />
							{%- endif %}
							{%- endif %}
							{%- endif %}
							{%- if useAuth %}
							{/if}
							{%- endif %}
							{%- endfor %}
							{%- endif %}
							{%- if useAuth %}
							{#if permissions.auth('{{ name }}::*::WRITE')}
							{%- endif %}
							<th class="{z_class} hover:{z_class3} w-24">
								<div class="flex space-x-1">
									<div class="tooltip" data-tip={$LL.{{ appName }}.components.table.editBtn()}>
										<button
											class="btn btn-square btn-ghost btn-xs"
											on:click|preventDefault={(e) => {
												if (node && node.{{ idName }}) {
													dispatch('edit', { id: node.{{ idName }} });
												}
											{% raw %}}{% endraw %}}
										>
											<Icon src={PencilSquare} solid />
										</button>
									</div>
									{#if showUnbindButton}
										<div class="tooltip" data-tip={$LL.{{ appName }}.components.table.unbindBtn()}>
											<button
												class="btn btn-square btn-ghost btn-xs"
												on:click|preventDefault={(e) => {
													messageBoxs.open({
														title: $LL.{{ appName }}.components.table.unbindModalTitle(),
														buttonName: $LL.{{ appName }}.components.table.unbindBtn(),
														buttonType: 'error',
														confirm: () => {
															if (node?.{{ idName }}) {
																unbindRows([node.{{ idName }}]);
															}
															return true;
														},
														button1: {
															name: $LL.{{ appName }}.components.table.removeBtn(),
															className: 'btn-error',
															onClick: () => {
																if (node?.{{ idName }}) {
																	removeRow(node.{{ idName }});
																}
																return true;
															}
														}
													});
												{% raw %}}{% endraw %}}
											>
												<Icon src={ArchiveBoxXMark} solid />
											</button>
										</div>
									{:else}
										<div class="tooltip" data-tip={$LL.{{ appName }}.components.table.removeBtn()}>
											<button
												class="btn btn-square btn-ghost btn-xs"
												on:click|preventDefault={(e) => {
													messageBoxs.open({
														title: $LL.{{ appName }}.components.table.removeModalTitle(),
														buttonName: $LL.{{ appName }}.components.table.removeBtn(),
														buttonType: 'error',
														confirm: () => {
															if (node?.{{ idName }}) {
																removeRow(node.{{ idName }});
															}
															return true;
														}
													});
												{% raw %}}{% endraw %}}
											>
												<Icon src={Trash} solid />
											</button>
										</div>
									{/if}
								</div>
							</th>
							{%- if useAuth %}
							{/if}
							{%- endif %}
						</tr>
					{/if}
				{/each}
			{:else}
				<TableEmpty cols={% raw %}{{% endraw %}{{cols}} + 2}/>
			{/if}
		</tbody>
	{/if}
</Table>
<div class="divider" />
<Pagination
	bind:pageNumber
	bind:pageSize
	{totalCount}
	on:pageChange={(e) => queryPage()}
	on:sizeChange={(e) => queryPage()}
/>