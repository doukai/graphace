<script lang="ts">
	import { createEventDispatcher } from 'svelte';
	import type { Errors } from '@graphace/commons/types';
	import { ObjectTd, {% for scalar in scalars %}{{ scalar }}Th, {{ scalar }}Td{% if forloop.last == false %}, {% endif %}{% endfor %} } from '@graphace/ui-graphql/components/table';
	{%- for enum in enums %}
	import {{ enum }}Th from '~/{{ enumsPath }}/{{ enum | paramCase }}/{{ enum }}Th.svelte';
	import {{ enum }}Td from '~/{{ enumsPath }}/{{ enum | paramCase }}/{{ enum }}Td.svelte';
	{%- endfor %}
	import { Card } from '@graphace/ui/components/card';
	import { Table, TableHead, TableLoading, TableEmpty } from '@graphace/ui/components/table';
	import { Pagination } from '@graphace/ui/components/connection';
	import { messageBoxs } from '@graphace/ui/components/MessageBoxs.svelte';
	import { notifications } from '@graphace/ui/components/Notifications.svelte';
	import { Icon } from '@steeze-ui/svelte-icon';
	import { PencilSquare, Trash } from '@steeze-ui/heroicons';
	import LL from '$i18n/i18n-svelte';
	import {
		Conditional,
		Operator,
		{{ name }},
		{{ name }}OrderBy,
		QueryType{{ name }}ConnectionArgs,
		MutationType{{ name }}Args
	} from '~/{{ schemaTypesPath }}';

	export let nodes: ({{ name }} | null | undefined)[] | null | undefined;
	export let totalCount: number = 0;
	export let isFetching: boolean;
	export let errors: Record<number, Errors> = {};
	export let showSaveButton: boolean = true;
	export let showBackButton: boolean = true;

	const dispatch = createEventDispatcher<{
		fetch: {
			args: QueryType{{ name }}ConnectionArgs;
			then: (data: ({{ name }} | null | undefined)[] | null | undefined) => void;
			catch: (errors: Errors) => void;
		};
		mutation: {
			args: MutationType{{ name }}Args;
			update?: boolean;
			then: (data: {{ name }} | null | undefined) => void;
			catch: (errors: Errors) => void;
		};
		edit: { id: string };
		create: {};
		save: { nodes: ({{ name }} | null | undefined)[] | null | undefined };
		back: {};
	}>();

	let showRemoveButton = false;
	let args: QueryType{{ name }}ConnectionArgs = {};
	let orderBy: {{ name }}OrderBy = {};
	let after: string | undefined;
	let before: string | undefined;
	let pageNumber: number = 1;
	let pageSize: number = 10;

	let selectAll: boolean;
	let selectedRows: Record<string, boolean> = {};

	$: selectedIdList = Object.keys(selectedRows)
		.filter((id) => selectedRows[id])
		.map((id) => id);

	$: if (selectedIdList.length > 0) {
		showRemoveButton = true;
	} else {
		showRemoveButton = false;
	}

	const query = () => {
		if (Object.keys(orderBy).length > 0) {
			args.orderBy = orderBy;
		} else {
			args.orderBy = undefined;
		}

		if (after) {
			args.after = after;
			args.first = pageSize;
		} else if (before) {
			args.before = before;
			args.last = pageSize;
		} else {
			args.offset = (pageNumber - 1) * pageSize;
			args.first = pageSize;
		}

		dispatch('fetch', {
			args,
			then: (data) => {
				errors = {};
			},
			catch: (errors) => {
				console.error(errors);
				notifications.error($LL.web.message.requestFailed());
			}
		});
	};

	const search = (searchValue: string | undefined) => {
		let args: QueryType{{ name }}ConnectionArgs = {};
		if (searchValue) {
			args.cond = Conditional.OR;
			{%- if fields %}
			{%- for field in fields %}
			{%- if field.isScalarType and field.inQueryArgs and field.fieldType.name == 'String' %}
			args.{{ field.fieldName }} = { opr: Operator.LK, val: `%${searchValue}%` };
			{%- endif %}
			{%- endfor %}
			{%- endif %}
		} else {
			args.cond = undefined;
			{%- if fields %}
			{%- for field in fields %}
			{%- if field.isScalarType and field.inQueryArgs and field.fieldType.name == 'String' %}
			args.{{ field.fieldName }} = undefined;
			{%- endif %}
			{%- endfor %}
			{%- endif %}
		}
		
		if (after) {
			args.after = after;
			args.first = pageSize;
		} else if (before) {
			args.before = before;
			args.last = pageSize;
		} else {
			args.offset = (pageNumber - 1) * pageSize;
			args.first = pageSize;
		}

		dispatch('fetch', {
			args,
			then: (data) => {
				errors = {};
			},
			catch: (errors) => {
				console.error(errors);
				notifications.error($LL.web.message.requestFailed());
			}
		});
	};

	const updateField = (args: MutationType{{ name }}Args | null | undefined) => {
		if (args) {
			dispatch('mutation', {
				args,
				update: true,
				then: (data) => {
					notifications.success($LL.web.message.saveSuccess());
				},
				catch: (errors) => {
					console.error(errors);
					notifications.error($LL.web.message.saveFailed());
				}
			});
		}
	};

	const removeRow = (id: string) => {
		dispatch('mutation', {
			args: { id: id, isDeprecated: true },
			update: true,
			then: (data) => {
				notifications.success($LL.web.message.removeSuccess());
				query();
			},
			catch: (errors) => {
				console.error(errors);
				notifications.error($LL.web.message.removeFailed());
			}
		});
	};

	const removeRows = () => {
		dispatch('mutation', {
			args: {
				where: { id: { opr: Operator.IN, in: selectedIdList } },
				isDeprecated: true
			},
			update: true,
			then: (data) => {
				notifications.success($LL.web.message.removeSuccess());
				query();
			},
			catch: (errors) => {
				console.error(errors);
				notifications.error($LL.web.message.removeFailed());
			}
		});
	};
</script>

<Card>
	<TableHead
		title="{{ name }}"
		{showRemoveButton}
		{showSaveButton}
		{showBackButton}
		on:create
		on:search={(e) => search(e.detail.value)}
		on:save={() => dispatch('save', { nodes })}
		on:removeRows={() => {
			messageBoxs.open({
				title: $LL.web.components.table.removeModalTitle(),
				buttonName: $LL.web.components.table.removeBtn(),
				buttonType: 'error',
				confirm: () => {
					removeRows();
					return true;
				}
			});
		}}
		on:back
	/>
	<div class="divider" />
	<Table>
		<thead>
			<tr>
				<th class="z-10">
					<label>
						<input
							type="checkbox"
							class="checkbox"
							bind:checked={selectAll}
							on:change={() => {
								if (nodes && nodes.length > 0) {
									nodes.forEach((node) => {
										if (node?.{{ idName }}) {
											selectedRows[node.{{ idName }}] = selectAll;
										}
									});
								}
							}}
						/>
					</label>
				</th>
				{%- if fields %}
				{%- for field in fields %}
				{%- if field.isScalarType or field.isEnumType %}
				{%- if field.inQueryArgs %}
				<{{ field.fieldType.name }}Th
					name="{{ field.fieldName }}"
					bind:expression={args.{{ field.fieldName }}}
					{%- if field.isListType == false %}
					bind:sort={orderBy.{{ field.fieldName }}}
					{%- endif %}
					on:filter={query}
				/>
				{%- else %}
				<td>{{ field.fieldName }}</td>
				{%- endif %}
				{%- else %}
				<td>{{ field.fieldName }}</td>
				{%- endif %}
				{%- endfor %}
				{%- endif %}
				<th />
			</tr>
		</thead>
		{#if isFetching}
			<TableLoading rows={pageSize} cols={% raw %}{{% endraw %}{{cols}} + 2}/>
		{:else}
			<tbody>
				{#if nodes && nodes.length > 0}
					{#each nodes as node, row}
						{#if node && node.{{ idName }}}
							<tr class="hover">
								<th class="z-10">
									<label>
										<input type="checkbox" class="checkbox" bind:checked={selectedRows[node.{{ idName }}]} />
									</label>
								</th>
								{%- if fields %}
								{%- for field in fields %}
								{%- if field.isScalarType or field.isEnumType %}
								<{{ field.fieldType.name }}Td
									name="{{ field.fieldName }}"
									bind:value={node.{{ field.fieldName }}}
									{%- if field.isListType %}
									list
									{%- endif %}
									{%- if field.inMutationArgs and field.fieldName != idName %}
									on:save={() => updateField({ {{ idName }}: node?.{{ idName }}, {{ field.fieldName }}: node?.{{ field.fieldName }} })}
									{%- else %}
									readonly
									{%- endif %}
									errors={errors[row]?.iterms?.{{ field.fieldName }}}
								/>
								{%- else %}
								<ObjectTd name="{{ field.fieldName }}" errors={errors[row]?.iterms?.{{ field.fieldName }}} path={`${node.{{ idName }}}/{{ field.fieldName | paramCase }}`} on:gotoField />
								{%- endif %}
								{%- endfor %}
								{%- endif %}
								<th class="z-10">
									<div class="flex space-x-1">
										<div class="tooltip" data-tip={$LL.web.components.table.editBtn()}>
											<button
												class="btn btn-square btn-ghost btn-xs"
												on:click={(e) => {
													e.preventDefault();
													if (node && node.{{ idName }}) {
														dispatch('edit', { id: node.{{ idName }} });
													}
												}}
											>
												<Icon src={PencilSquare} solid />
											</button>
										</div>
										<div class="tooltip" data-tip={$LL.web.components.table.removeBtn()}>
											<button
												class="btn btn-square btn-ghost btn-xs"
												on:click={(e) => {
													e.preventDefault();
													messageBoxs.open({
														title: $LL.web.components.table.removeModalTitle(),
														buttonName: $LL.web.components.table.removeBtn(),
														buttonType: 'error',
														confirm: () => {
															if (node?.{{ idName }}) {
																removeRow(node.{{ idName }});
															}
															return true;
														}
													});
												}}
											>
												<Icon src={Trash} solid />
											</button>
										</div>
									</div>
								</th>
							</tr>
						{/if}
					{/each}
				{:else}
					<TableEmpty cols={% raw %}{{% endraw %}{{cols}} + 2}/>
				{/if}
			</tbody>
		{/if}
	</Table>
	<div class="divider" />
	<Pagination
		bind:pageNumber
		bind:pageSize
		{totalCount}
		on:pageChange={query}
		on:sizeChange={query}
	/>
</Card>