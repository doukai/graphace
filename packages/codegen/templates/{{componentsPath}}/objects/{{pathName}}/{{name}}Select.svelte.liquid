<script lang="ts">
	import { createEventDispatcher } from 'svelte';
	import type { Errors } from '@graphace/commons';
	import type { Option } from '@graphace/ui';
	import { ObjectSelect } from '@graphace/ui-graphql';
	import { graphql, type {{ name }}Input, Operator } from '$houdini';

	export let value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined = undefined;
	export let errors: Errors | undefined = undefined;
	export let list: boolean | undefined = false;
	export let id: string | null = null;
	export let name: string;
	export let disabled = false;
	export let readonly = false;
	export let placeholder: string | null | undefined = undefined;
	export let className: string = '';
	export let containerClassName: string = '';
	export let tagClassName: string = '';
	export let menuClassName: string = '';

	const dispatch = createEventDispatcher<{
		change: {
			value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined;
		};
	}>();

	const {{ name }}NameListQuery = graphql(`
		query {{ name }}NameListQuery($name: StringExpression, $first: Int) {
			{{ name | camelCase }}List(name: $name, first: $first) {
				{{ idName }}
				name
				description
			}
		}
	`);

	$: options =
		${{ name }}NameListQuery.data?.{{ name | camelCase }}List?.map((item) => ({
			label: item?.name,
			value: item?.{{ idName }}
		})) || [];

	$: loading = ${{ name }}NameListQuery.fetching;

	let selected: Option | Option[] | undefined;

	if (Array.isArray(value)) {
		selected = value?.map((item) => ({
			label: item?.name,
			value: item?.{{ idName }}
		}));
	} else if (value) {
		selected = { label: value.name, value: value.{{ idName }} };
	}
</script>

<ObjectSelect
	{list}
	{id}
	{name}
	{disabled}
	{readonly}
	{placeholder}
	{errors}
	{loading}
	{className}
	{containerClassName}
	{tagClassName}
	{menuClassName}
	bind:options
	bind:value={selected}
	on:change={(e) => {
		if (Array.isArray(e.detail.value)) {
			value = e.detail.value.map((item) => ({ id: item.value, name: item.label }));
		} else if (e.detail.value && !Array.isArray(e.detail.value)) {
			value = { id: e.detail.value.value, name: e.detail.value.label };
		} else {
			value = undefined;
		}
		dispatch('change', { value });
	{% raw %}}{% endraw %}}
	on:search={(e) => {
		if (e.detail.searchValue) {
			{{ name }}NameListQuery.fetch({
				variables: { name: { opr: Operator.LK, val: `%${e.detail.searchValue}%` } }
			});
		} else {
			{{ name }}NameListQuery.fetch({ variables: { name: undefined, first: 10 } });
		}
	{% raw %}}{% endraw %}}
/>
