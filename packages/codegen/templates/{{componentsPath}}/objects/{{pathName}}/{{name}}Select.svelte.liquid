<script lang="ts">
	import { createEventDispatcher } from 'svelte';
	import type { Errors } from '@graphace/commons';
	import { ObjectMultiSelect } from '@graphace/ui-graphql';
	import type { ObjectOption } from 'svelte-multiselect';
	import { graphql, {{ name }}Input, Operator } from '$houdini';

	export let value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined = undefined;
	export let errors: Errors | undefined = undefined;
	export let list: boolean | undefined = false;
	export let id: string | null = null;
	export let name: string;
	export let disabled = false;
	export let readonly = false;
	export let placeholder: string | null | undefined = undefined;
	export let className: string = '';

	const dispatch = createEventDispatcher<{
		change: {
			value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined;
		};
	}>();

	const {{ name }}NameListQuery = graphql(`
		query {{ name }}NameListQuery($name: StringExpression, $first: Int) {
			{{ name | camelCase }}List(name: $name, first: $first) {
				{{ idName }}
				name
				description
			}
		}
	`);

	let searchText: string = '';
	let loading: boolean = false;
	let options: ObjectOption[] = [];
	let selected: ObjectOption[] = [];

	$: if (Array.isArray(value)) {
		selected = value?.map((item) => ({
			label: item?.name || '',
			value: item
		}));
		value = value.map((item) => ({ name: item?.name, description: item?.description, where: { {{ idName }}: { val: item?.{{ idName }} } } }));
	} else if (value) {
		selected = [{ label: value?.name || '', value: value }];
		value = { name: value.name, description: value.description, where: { {{ idName }}: { val: value.{{ idName }} } } };
	} else {
		selected = [];
	}

	$: options =
		${{ name }}NameListQuery.data?.{{ name | camelCase }}List?.map((item) => ({
			label: item?.name || '',
			value: { name: item?.name, description: item?.description, where: { {{ idName }}: { val: item?.{{ idName }} } } }
		})) || [];

	$: if (searchText) {
		loading = true;
		{{ name }}NameListQuery.fetch({
			variables: { name: { opr: Operator.LK, val: `%${searchText}%` } }
		}).finally(() => (loading = false));
	}
</script>

<ObjectMultiSelect
	{list}
	{id}
	{name}
	{disabled}
	{readonly}
	{placeholder}
	{errors}
	{className}
	bind:selected
	bind:options
	bind:searchText
	{loading}
	on:change={(e) => {
		if (e.detail.type === 'add') {
			if (list && Array.isArray(value)) {
				value = [...value, e.detail.option.value];
			} else if (list) {
				value = [e.detail.option.value];
			} else {
				value = e.detail.option.value;
			}
		} else if (e.detail.type === 'remove') {
			if (list && Array.isArray(value)) {
				value = [
					...value.filter((item) => item?.where?.{{ idName }}?.val !== e.detail.option.value?.where?.{{ idName }}?.val)
				];
			} else {
				value = undefined;
			}
		} else if (e.detail.type === 'removeAll') {
			value = undefined;
		}
		dispatch('change', { value });
	{% raw %}}{% endraw %}}
	on:open={(e) => {
		if (searchText) {
			loading = true;
			{{ name }}NameListQuery.fetch({
				variables: { name: { opr: Operator.LK, val: `%${searchText}%` } }
			}).finally(() => (loading = false));
		} else {
			{{ name }}NameListQuery.fetch({ variables: { name: undefined, first: 10 } }).finally(() => (loading = false));
		}
	{% raw %}}{% endraw %}}
/>
