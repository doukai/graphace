<script lang="ts">
	import { createEventDispatcher, getContext } from 'svelte';
	import type { Readable } from 'svelte/store';
	import type { Errors } from '@graphace/commons';
	import { Buttons, Empty, Form, FormControl, Label, Loading } from '@graphace/ui';
	import { type Option, {% for scalar in scalars %}{{ scalar }}Input, {% endfor %}{% if hasFileField %}FileInput, {% endif %}ObjectInput } from '@graphace/ui-graphql';
	{%- for enum in enums %}
	import {{ enum }}Input from '~/{{ componentsPath }}/enums/{{ enum | paramCase }}/{{ enum }}Input.svelte';
	{%- endfor %}
	{%- for select in selects %}
	import {{ select }}Select from '~/{{ componentsPath }}/objects/{{ select | paramCase }}/{{ select }}Select.svelte';
	{%- endfor %}
	import type { TranslationFunctions } from '$i18n/i18n-types';
	import type { {{ name }}Input } from '~/{{ schemaTypesPath }}';
	
	export let value: {{ name }}Input | null | undefined = undefined;
	export let isFetching: boolean = false;
	export let errors: Record<string, Errors> = {};
	export let showRemoveButton: boolean = false;
	export let showUnbindButton: boolean = false;
	export let showSaveButton: boolean = false;
	export let showSelectButton: boolean = false;
	export let showBackButton: boolean = false;
	let className: string | undefined =
		'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-2';
	export { className as class };
	export let fields: {
		{%- for field in fields %}
		{{ field.fieldName }}: Option;
		{%- endfor %}
	} = {
		{%- for field in fields %}
		{{ field.fieldName }}: { readonly: false, disabled: false, hidden: false }{% if forloop.last == false %},{% endif %}
		{%- endfor %}
	};

	const LL = getContext<Readable<TranslationFunctions>>('LL');

	const dispatch = createEventDispatcher<{
		remove: { value: {{ name }}Input | null | undefined };
		unbind: { value: {{ name }}Input | null | undefined };
		save: { value: {{ name }}Input | null | undefined };
		back: {};
	}>();
</script>

<div class="flex justify-end md:justify-between">
	<span class="max-sm:hidden text-xl font-semibold self-center">
		{$LL.graphql.objects.{{ name }}.name()}
	</span>
	<Buttons
		{showRemoveButton}
		{showUnbindButton}
		{showSaveButton}
		{showSelectButton}
		{showBackButton}
		on:save={(e) => dispatch('save', { value })}
		on:remove={(e) => dispatch('remove', { value })}
		on:unbind={(e) => dispatch('unbind', { value })}
		on:back
	/>
</div>
<div class="divider" />
<Form class={className}>
	{#if isFetching}
		<Loading />
	{:else if value}
		{%- for field in fields %}
		<slot name="{{ field.fieldName }}">
			{#if !fields.{{ field.fieldName }}.hidden}
				<FormControl let:id>
					<Label {id} text={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()} />
					{%- if field.isScalarType or field.isEnumType or field.isFile %}
					<{{ field.fieldTypeName }}Input
					 	{id}
						name="{{ field.fieldName }}"
						bind:value={value.{{ field.fieldName }}}
						errors={errors.{{ field.fieldName }}}
						readonly={fields.{{ field.fieldName }}.readonly}
						disabled={fields.{{ field.fieldName }}.disabled}
						{%- if field.isListType %}
						list
						{%- endif %}
						{%- if field.fieldTypeName == 'File' %}
						on:upload
						{%- endif %}
					/>
					{%- elsif field.isSelect %}
					<{{ field.fieldTypeName }}Select
					 	{id}
						name="{{ field.fieldName }}"
						errors={errors.{{ field.fieldName }}}
						bind:value={value.{{ field.fieldName }}}
						where={true}
						readonly={fields.{{ field.fieldName }}.readonly}
						disabled={fields.{{ field.fieldName }}.disabled}
						{%- if field.isListType %}
						list
						{%- endif %}
					/>
					{%- else %}
					<ObjectInput
						{%- if field.isNamed %}
						namedStruct={value.{{ field.fieldName }}}
						{%- endif %}
						path={`${value.{{ idName }}}/{{ field.fieldName | paramCase }}`}
						errors={errors.{{ field.fieldName }}}
						disabled={fields.{{ field.fieldName }}.disabled}
						on:gotoField
					/>
					{%- endif %}
				</FormControl>
			{/if}
		</slot>
		{%- endfor %}
	{:else}
		<div class="col-span-full">
			<Empty />
		</div>
	{/if}
</Form>
<div class="divider" />
<div class="flex justify-end">
	<Buttons
		{showRemoveButton}
		{showUnbindButton}
		{showSaveButton}
		{showSelectButton}
		{showBackButton}
		on:save={(e) => dispatch('save', { value })}
		on:remove={(e) => dispatch('remove', { value })}
		on:unbind={(e) => dispatch('unbind', { value })}
		on:back
	/>
</div>