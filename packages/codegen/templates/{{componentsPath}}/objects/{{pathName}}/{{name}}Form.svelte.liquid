<script lang="ts">
	import { createEventDispatcher, getContext } from 'svelte';
	import type { Readable } from 'svelte/store';
	import type { Errors{%- if useAuth -%}, PermissionsStore{%- endif -%} } from '@graphace/commons';
	import type { GraphQLError, __Schema, __Type, __TypeKind, GlobalGraphQLErrorMessageFunction, GraphQLErrorsFunction } from '@graphace/graphql';
	import { Form, FormLoading, messageBoxs, notifications } from '@graphace/ui';
	import { {% for scalar in scalars %}{{ scalar }}Item, {% endfor %}ObjectItem } from '@graphace/ui-graphql';
	{%- if imports %}
	{%- for import in imports %}
	{{ import }}
	{%- endfor %}
	{%- endif %}
	{%- for enum in enums %}
	import {{ enum }}Item from '~/{{ enumsPath }}/{{ enum | paramCase }}/{{ enum }}Item.svelte';
	{%- endfor %}
	{%- if selectImports %}
	{%- for selectType in selectImports %}
	import {{ selectType }}SelectItem from '~/{{ objectsPath }}/{{ selectType | paramCase }}/{{ selectType }}SelectItem.svelte';
	{%- endfor %}
	{%- endif %}
	import type { TranslationFunctions } from '$i18n/i18n-types';
	import type { {{ name }}Input } from '~/{{ schemaTypesPath }}';
	export let node: {{ name }}Input | null | undefined;
	export let isFetching: boolean;
	export let errors: Record<string, Errors> = {};
	export let showRemoveButton: boolean = true;
	export let showUnbindButton: boolean = false;
	export let showGotoSelectButton: boolean = false;
	export let showBackButton: boolean = true;
	const LL = getContext('LL') as Readable<TranslationFunctions>;
	{%- if useAuth %}
	const permissions = getContext('permissions') as PermissionsStore;
	{%- endif %}
	const buildGraphQLErrors = getContext('buildGraphQLErrors') as GraphQLErrorsFunction;
	const buildGlobalGraphQLErrorMessage = getContext('buildGlobalGraphQLErrorMessage') as GlobalGraphQLErrorMessageFunction;

	const dispatch = createEventDispatcher<{
		mutation: {
			args: {{ name }}Input;
			then: (data: {{ name }}Input | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		};
		parentMutation: {
			args: {{ name }}Input | null;
			then: (data: {{ name }}Input | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		};
		gotoSelect: {};
		back: {};
	}>();

	const save = (): void => {
		if (node) {
			let args = { ...node };
			dispatch('mutation', {
				args: args,
				then: (data) => {
					node = data;
					notifications.success($LL.{{ appName }}.message.saveSuccess());
					dispatch('back', {});
				},
				catch: (graphQLErrors) => {
					console.error(graphQLErrors);
					errors = buildGraphQLErrors(graphQLErrors);
					const globalError = buildGlobalGraphQLErrorMessage(graphQLErrors);
					if (globalError) {
						messageBoxs.open({
							title: $LL.{{ appName }}.message.saveFailed(),
							content: globalError,
							buttonName: $LL.ui.button.back(),
							buttonType: 'neutral',
							confirm: () => {
								dispatch('back', {});
								return true;
							}
						});
					}
				}
			});
		}
	};

	const remove = (): void => {
		if (node) {
			dispatch('mutation', {
				args: { where: { {{ idName }}: { val: node.{{ idName }} } }, isDeprecated: true },
				then: (data) => {
					notifications.success($LL.{{ appName }}.message.removeSuccess());
					dispatch('back', {});
				},
				catch: (graphQLErrors) => {
					console.error(graphQLErrors);
					errors = buildGraphQLErrors(graphQLErrors);
					const globalError = buildGlobalGraphQLErrorMessage(graphQLErrors);
					if (globalError) {
						messageBoxs.open({
							title: $LL.{{ appName }}.message.removeFailed(),
							content: globalError,
							buttonName: $LL.ui.button.back(),
							buttonType: 'neutral',
							confirm: () => {
								dispatch('back', {});
								return true;
							}
						});
					}
				}
			});
		}
	};

	const unbind = (): void => {
		if (node) {
			dispatch('parentMutation', {
				args: null,
				then: (data) => {
					notifications.success($LL.{{ appName }}.message.unbindSuccess());
					dispatch('back', {});
				},
				catch: (graphQLErrors) => {
					console.error(graphQLErrors);
					errors = buildGraphQLErrors(graphQLErrors);
					const globalError = buildGlobalGraphQLErrorMessage(graphQLErrors);
					if (globalError) {
						messageBoxs.open({
							title: $LL.{{ appName }}.message.unbindFailed(),
							content: globalError,
							buttonName: $LL.ui.button.back(),
							buttonType: 'neutral',
							confirm: () => {
								dispatch('back', {});
								return true;
							}
						});
					}
				}
			});
		}
	};
</script>

<Form
	title={$LL.graphql.objects.{{ name }}.name()}
	{%- if useAuth %}
	showRemoveButton={permissions.auth('{{ name }}::*::WRITE') && showRemoveButton}
	showUnbindButton={permissions.auth('{{ name }}::*::WRITE') && showUnbindButton}
	showGotoSelectButton={permissions.auth('{{ name }}::*::WRITE') && showGotoSelectButton}
	{%- else %}
	{showRemoveButton}
	{showUnbindButton}
	{showGotoSelectButton}
	{%- endif %}
	{showBackButton}
	on:save={(e) => save()}
	on:remove={(e) =>
		messageBoxs.open({
			title: $LL.{{ appName }}.components.table.removeModalTitle(),
			buttonName: $LL.{{ appName }}.components.table.removeBtn(),
			buttonType: 'error',
			confirm: () => {
				remove();
				return true;
			}
		})}
	on:unbind={(e) =>
		messageBoxs.open({
			title: $LL.{{ appName }}.components.table.unbindModalTitle(),
			buttonName: $LL.{{ appName }}.components.table.unbindBtn(),
			buttonType: 'error',
			confirm: () => {
				unbind();
				return true;
			},
			button1: {
				name: $LL.{{ appName }}.components.table.removeBtn(),
				className: 'btn-error',
				onClick: () => {
					remove();
					return true;
				}
			}
		})}
	on:gotoSelect
	on:back
>
	{#if isFetching}
		<FormLoading rows={% raw %}{{% endraw %}{{rows}}} />
	{:else}
		{#if node}
			{%- if fields %}
			{%- for field in fields %}
			{%- if useAuth %}
			{#if permissions.auth('{{ name }}::{{ field.fieldName }}::*')}
			{%- endif %}
			{%- if field.component %}
			{{ field.component }}
			{%- else %}
			{%- if field.isScalarType or field.isEnumType %}
			<{{ field.fieldTypeName }}Item label={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()} name="{{ field.fieldName }}" bind:value={node.{{ field.fieldName }}}{% if field.isListType %} list{% endif %}{% if field.inMutationArgs == false %} readonly{% endif %} errors={errors.{{ field.fieldName }}} />
			{%- else %}
			{%- if field.select %}
			<{{ field.fieldTypeName }}SelectItem
				name="{{ field.fieldName }}"
				label={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}
				errors={errors.{{ field.fieldName }}}
				bind:value={node.{{ field.fieldName }}}
				{%- if field.isListType %}
				list
				{%- endif %}
			/>
			{%- else %}
			<ObjectItem name="{{ field.fieldName }}" {% if field.isNamed %}namedStruct={node.{{ field.fieldName }}}{% endif %} path={`${node.{{ idName }}}/{{ field.fieldName | paramCase }}`} label={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()} errors={errors.{{ field.fieldName }}} on:gotoField />
			{%- endif %}
			{%- endif %}
			{%- endif %}
			{%- if useAuth %}
			{/if}
			{%- endif %}
			{%- endfor %}
			{%- endif %}
		{/if}
	{/if}
</Form>
