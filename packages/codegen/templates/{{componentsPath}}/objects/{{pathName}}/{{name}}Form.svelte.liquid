<script lang="ts">
	import { createEventDispatcher } from 'svelte';
	import type { Errors } from '@graphace/commons';
	import type { GraphQLError, __Schema, __Type, __TypeKind } from '@graphace/graphql';
	import { Form, FormLoading, messageBoxs, notifications } from '@graphace/ui';
	import { {% for scalar in scalars %}{{ scalar }}Item, {% endfor %}ObjectItem } from '@graphace/ui-graphql';
	{%- if imports %}
	{%- for import in imports %}
	{{ import }}
	{%- endfor %}
	{%- endif %}
	{%- for enum in enums %}
	import {{ enum }}Item from '~/{{ enumsPath }}/{{ enum | paramCase }}/{{ enum }}Item.svelte';
	{%- endfor %}
	import LL from '$i18n/i18n-svelte';
	import type { {{ name }}, {{ name }}Input } from '~/{{ schemaTypesPath }}';
	{%- if useAuth %}
	import { auth } from '@graphace/common';
	{%- endif %}

	export let node: {{ name }} | null | undefined;
	export let isFetching: boolean;
	export let errors: Record<string, Errors> = {};
	export let showRemoveButton: boolean = true;
	export let showUnbindButton: boolean = false;
	export let showGotoSelectButton: boolean = false;
	export let showBackButton: boolean = true;

	const dispatch = createEventDispatcher<{
		mutation: {
			args: {{ name }}Input;
			then: (data: {{ name }} | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		};
		parentMutation: {
			args: {{ name }}Input | null;
			then: (data: {{ name }} | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		};
		gotoSelect: {};
		back: {};
	}>();

	const save = (): void => {
		if (node) {
			dispatch('mutation', {
				args: node,
				then: (data) => {
					node = data;
					notifications.success($LL.web.message.saveSuccess());
					dispatch('back');
				},
				catch: (errors) => {
					console.error(errors);
					notifications.error($LL.web.message.saveFailed());
				}
			});
		}
	};

	const remove = (): void => {
		if (node) {
			dispatch('mutation', {
				args: { where: { {{ idName }}: { val: node.{{ idName }} } }, isDeprecated: true },
				then: (data) => {
					notifications.success($LL.web.message.removeSuccess());
					dispatch('back');
				},
				catch: (errors) => {
					console.error(errors);
					notifications.error($LL.web.message.removeFailed());
				}
			});
		}
	};

	const unbind = (): void => {
		if (node) {
			dispatch('parentMutation', {
				args: null,
				then: (data) => {
					notifications.success($LL.web.message.unbindSuccess());
					dispatch('back');
				},
				catch: (errors) => {
					console.error(errors);
					notifications.error($LL.web.message.unbindFailed());
				}
			});
		}
	};
</script>

<Form
	title={$LL.graphql.objects.{{ name }}.name()}
	{%- if useAuth %}
	showRemoveButton={auth('{{ name }}::*::WRITE') && showRemoveButton}
	showUnbindButton={auth('{{ name }}::*::WRITE') && showUnbindButton}
	showGotoSelectButton={auth('{{ name }}::*::WRITE') && showGotoSelectButton}
	{%- else %}
	{showRemoveButton}
	{showUnbindButton}
	{showGotoSelectButton}
	{%- endif %}
	{showBackButton}
	on:save={(e) => save()}
	on:remove={(e) =>
		messageBoxs.open({
			title: $LL.web.components.table.removeModalTitle(),
			buttonName: $LL.web.components.table.removeBtn(),
			buttonType: 'error',
			confirm: () => {
				remove();
				return true;
			}
		})}
	on:unbind={(e) =>
		messageBoxs.open({
			title: $LL.web.components.table.unbindModalTitle(),
			buttonName: $LL.web.components.table.unbindBtn(),
			buttonType: 'error',
			confirm: () => {
				unbind();
				return true;
			},
			button1: {
				name: $LL.web.components.table.removeBtn(),
				className: 'btn-error',
				onClick: () => {
					remove();
					return true;
				}
			}
		})}
	on:gotoSelect
	on:back
>
	{#if isFetching}
		<FormLoading rows={% raw %}{{% endraw %}{{rows}}} />
	{:else}
		{#if node}
			{%- if fields %}
			{%- for field in fields %}
			{%- if useAuth %}
			{#if auth('{{ name }}::{{ field.fieldName }}::*')}
			{%- endif %}
			{%- if field.component %}
			{{ field.component }}
			{%- else %}
			{%- if field.isScalarType or field.isEnumType %}
			<{{ field.fieldType.name }}Item label={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()} name="{{ field.fieldName }}" bind:value={node.{{ field.fieldName }}}{% if field.isListType %} list{% endif %}{% if field.inMutationArgs == false %} readonly{% endif %} errors={errors.{{ field.fieldName }}} />
			{%- else %}
			<ObjectItem name="{{ field.fieldName }}" path={`${node.{{ idName }}}/{{ field.fieldName | paramCase }}`} label={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()} errors={errors.{{ field.fieldName }}} on:gotoField />
			{%- endif %}
			{%- endif %}
			{%- if useAuth %}
			{/if}
			{%- endif %}
			{%- endfor %}
			{%- endif %}
		{/if}
	{/if}
</Form>
