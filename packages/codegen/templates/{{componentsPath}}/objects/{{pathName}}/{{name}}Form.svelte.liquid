<script lang="ts">
	import { createEventDispatcher, getContext } from 'svelte';
	import type { Readable } from 'svelte/store';
	import type { Errors{%- if useAuth -%}, PermissionsStore{%- endif -%} } from '@graphace/commons';
	import type { GraphQLError, GlobalGraphQLErrorMessageFunction, GraphQLErrorsFunction } from '@graphace/graphql';
	import { Form, FormLoading, messageBoxs, notifications } from '@graphace/ui';
	import { {% for scalar in scalars %}{{ scalar }}Item, {% endfor %}ObjectItem{% if hasFileField %}, FileItem{% endif %} } from '@graphace/ui-graphql';
	{%- for enum in enums %}
	import {{ enum }}Item from '~/{{ enumsPath }}/{{ enum | paramCase }}/{{ enum }}Item.svelte';
	{%- endfor %}
	{%- for selectType in selectImports %}
	import {{ selectType }}SelectItem from '~/{{ objectsPath }}/{{ selectType | paramCase }}/{{ selectType }}SelectItem.svelte';
	{%- endfor %}
	import { buildGraphQLErrors, buildGlobalGraphQLErrorMessage } from '~/utils';
	import type { TranslationFunctions } from '$i18n/i18n-types';
	import type { {{ name }}Input } from '~/{{ schemaTypesPath }}';
	
	export let value: {{ name }}Input | null | undefined = undefined;
	export let isFetching: boolean;
	export let errors: Record<string, Errors> = {};
	export let showRemoveButton: boolean = true;
	export let showUnbindButton: boolean = false;
	export let showSelectButton: boolean = false;
	export let showBackButton: boolean = true;
	export let fields: {
		{%- for field in fields %}
		{{ field.fieldName }}: { readonly: boolean; disabled: boolean; hidden: boolean };
		{%- endfor %}
	} = {
		{%- for field in fields %}
		{{ field.fieldName }}: { readonly: false, disabled: false, hidden: false }{% if forloop.last == false %},{% endif %}
		{%- endfor %}
	};

	const dispatch = createEventDispatcher<{
		remove: { value: {{ name }}Input | null | undefined };
		unbind: { value: {{ name }}Input | null | undefined };
		save: { value: {{ name }}Input | null | undefined };
		create: { value: {{ name }}Input | null | undefined };
		select: {};
		back: {};
	}>();
</script>


<div class="flex justify-end md:justify-between">
	<span class="max-sm:hidden text-xl font-semibold self-center">
		{$LL.graphql.objects.{{ name }}.name()}
	</span>
	<Buttons
		{%- if useAuth %}
		showRemoveButton={permissions.auth('{{ name }}::*::WRITE') && showRemoveButton}
		showUnbindButton={permissions.auth('{{ name }}::*::WRITE') && showUnbindButton}
		showSelectButton={permissions.auth('{{ name }}::*::WRITE') && showSelectButton}
		{%- else %}
		{showRemoveButton}
		{showUnbindButton}
		{showSelectButton}
		{%- endif %}
		{showBackButton}
		on:save={(e) => dispatch('save', { value })}
		on:remove={(e) => dispatch('remove', { value })}
		on:unbind={(e) => dispatch('unbind', { value })}
		on:select
		on:back
	/>
</div>
<div class="divider" />
<Form class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-2">
	{#if isFetching}
		<Loading />
	{:else}
		{#if value}
			{%- for field in fields %}
			<slot name="{{ field.fieldName }}">
				{#if !fields.{{ field.fieldName }}.hidden}
					<FormControl let:id>
						<Label {id} text={$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()} />
						{%- if field.isScalarType or field.isEnumType or field.fieldTypeName == 'File' %}
						<{{ field.fieldTypeName }}Input{% if field.isListType %}List{% endif %}
						 	{id}
							name="{{ field.fieldName }}"
							bind:value={node.{{ field.fieldName }}}
							errors={errors.{{ field.fieldName }}}
							readonly={fields.{{ field.fieldName }}.readonly}
							disabled={fields.{{ field.fieldName }}.disabled}
							{%- if field.fieldTypeName == 'File' %}
							on:upload
							{%- endif %}
						/>
						{%- elsif field.select %}
						<{{ field.fieldTypeName }}Select
						 	{id}
							name="{{ field.fieldName }}"
							errors={errors.{{ field.fieldName }}}
							bind:value={value.{{ field.fieldName }}}
							readonly={fields.{{ field.fieldName }}.readonly}
							disabled={fields.{{ field.fieldName }}.disabled}
							{%- if field.isListType %}
							list
							{%- endif %}
						/>
						{%- else %}
						<ObjectInput
						 	{id}
							name="{{ field.fieldName }}"
							{%- if field.isNamed %}
							namedStruct={value.{{ field.fieldName }}}
							{%- endif %}
							path={`${value.{{ idName }}}/{{ field.fieldName | paramCase }}`}
							errors={errors.{{ field.fieldName }}}
							readonly={fields.{{ field.fieldName }}.readonly}
							disabled={fields.{{ field.fieldName }}.disabled}
							on:gotoField
						/>
						{%- endif %}
					</FormControl>
				{/if}
			</slot>
			{%- endfor %}
		{:else}
			<Empty />
		{/if}
	{/if}
</Form>
<div class="divider" />
<div class="flex justify-end">
	<Buttons
		{%- if useAuth %}
		showRemoveButton={permissions.auth('{{ name }}::*::WRITE') && showRemoveButton}
		showUnbindButton={permissions.auth('{{ name }}::*::WRITE') && showUnbindButton}
		showSelectButton={permissions.auth('{{ name }}::*::WRITE') && showSelectButton}
		{%- else %}
		{showRemoveButton}
		{showUnbindButton}
		{showSelectButton}
		{%- endif %}
		{showBackButton}
		on:save={(e) => dispatch('save', { value })}
		on:remove={(e) => dispatch('remove', { value })}
		on:unbind={(e) => dispatch('unbind', { value })}
		on:select
		on:back
	/>
</div>