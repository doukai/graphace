<script lang="ts">
	import { getContext, createEventDispatcher } from 'svelte';
	import { melt } from '@melt-ui/svelte';
	import type { Errors{% if useAuth %}, PermissionsStore{% endif %} } from '@graphace/commons';
	import { buildArguments } from '@graphace/graphql';
	import { to, Pagination, Dialog, toast } from '@graphace/ui';
	import { type Option } from '@graphace/ui-graphql';
	import { createQuery_{{ name | camelCase }}Connection_Store } from '~/{{ storesPath }}/query/query_{{ name | camelCase }}Connection_store';
	import {{ name }}Table from '~/{{ componentsPath }}/objects/{{ name | paramCase }}/{{ name }}Table.svelte';
	import { getLoadEvent } from '~/utils';
	import type { {{ name }}, {{ queryTypeName }}{{ name }}ConnectionArgs, {{ name }}OrderBy, {{ name }}Input } from '~/{{ schemaTypesPath }}';
	import LL from '$i18n/i18n-svelte';

	export let value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined =
		undefined;
	export let textFieldName: (keyof {{ name }} & keyof {{ name }}Input) | undefined = undefined;
	export let text: string | undefined = undefined;
	export let singleChoice: boolean | undefined = false;
	export let readonly = false;
	export let disabled = false;
	let className: string | undefined = 'btn-link p-0 truncate';
	export { className as class };

	{%- if useAuth %}
	const permissions = getContext<PermissionsStore>('permissions');
	export let fields: {
		{%- for field in fields %}
		{{ field.fieldName }}?: Option | undefined;
		{%- endfor %}
	} = {
		{%- for field in fields %}
		{{ field.fieldName }}: {
			readonly: !permissions.auth('{{ name }}::{{ field.fieldName }}::WRITE'),
			disabled: !permissions.auth('{{ name }}::{{ field.fieldName }}::WRITE'),
			hidden: !permissions.auth('{{ name }}::{{ field.fieldName }}::READ')
		}{% if forloop.last == false %},{% endif %}
		{%- endfor %}
	};
	{%- endif %}

	const dispatch = createEventDispatcher<{
		select: { value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined };
	}>();

	const query_{{ name | camelCase }}Connection_Store = createQuery_{{ name | camelCase }}Connection_Store(getLoadEvent());
	$: nodes = $query_{{ name | camelCase }}Connection_Store.response.data?.{{ name | camelCase }}Connection?.edges?.map(
		(edge) => edge?.node
	);
	$: totalCount = $query_{{ name | camelCase }}Connection_Store.response.data?.{{ name | camelCase }}Connection?.totalCount || 0;
	export let args: Query{{ name }}ConnectionArgs = {};
	export let orderBy: {{ name }}OrderBy = {};
	export let pageNumber: number = 1;
	export let pageSize: number = 10;
	export let selectedIdList: (string | null | undefined)[] | undefined = [];
	export let close: (() => void) | undefined = undefined;
	
	$: if (Array.isArray(value)) {
		if (textFieldName) {
			if (value.some((item) => !item?.[textFieldName])) {
				query_{{ name | camelCase }}Connection_Store
					.fetch({
						{{ idName }}: { opr: 'IN', arr: value?.map((item) => item?.{{ idName }}) }
					})
					.then((response) => {
						value = response.data?.{{ name | camelCase }}Connection?.edges?.map((edge) => ({
							[textFieldName]: edge?.node?.[textFieldName],
							{{ idName }}: edge?.node?.{{ idName }}
						}));
						if (value) {
							if (value.length > 0 && selectedIdList?.length === 0) {
								selectedIdList = value?.map((node) => node?.{{ idName }});
							}
							if (value.length > 3) {
								text = value
									.slice(0, 3)
									.map((node) => node?.[textFieldName])
									.filter((name) => name !== null)
									.join(',')
									.concat('...');
							} else {
								text = value
									.map((node) => node?.[textFieldName])
									.filter((name) => name !== null)
									.join(',');
							}
						}
					});
			} else {
				if (value.length > 0 && selectedIdList?.length === 0) {
					selectedIdList = value?.map((node) => node?.{{ idName }});
				}
				if (value.length > 3) {
					text = value
						.slice(0, 3)
						.map((node) => node?.[textFieldName])
						.filter((name) => name !== null)
						.join(',')
						.concat('...');
				} else {
					text = value
						.map((node) => node?.[textFieldName])
						.filter((name) => name !== null)
						.join(',');
				}
			}
		} else {
			if (value.length > 0 && selectedIdList?.length === 0) {
				selectedIdList = value?.map((node) => node?.{{ idName }});
			}
		}
	} else if (value) {
		if (textFieldName) {
			if (!value?.[textFieldName]) {
				query_{{ name | camelCase }}Connection_Store
					.fetch({
						{{ idName }}: { opr: 'EQ', val: value.{{ idName }} }
					})
					.then((response) => {
						value = response.data?.{{ name | camelCase }}Connection?.edges?.map((edge) => ({
							[textFieldName]: edge?.node?.[textFieldName],
							{{ idName }}: edge?.node?.{{ idName }}
						}))?.[0];
						if (value) {
							if (selectedIdList?.length === 0) {
								selectedIdList = [value?.{{ idName }}];
							}
							text = value?.[textFieldName] + '';
						}
					});
			} else {
				if (selectedIdList?.length === 0) {
					selectedIdList = [value?.{{ idName }}];
				}
				text = value?.[textFieldName] + '';
			}
		} else {
			if (selectedIdList?.length === 0) {
				selectedIdList = [value?.{{ idName }}];
			}
		}
	}

	const query = (to?: number | undefined) => {
		args.orderBy = orderBy;
		args.first = pageSize;
		args.offset = ((to || pageNumber) - 1) * pageSize;
		query_{{ name | camelCase }}Connection_Store.fetch(buildArguments(args)).then((result) => {
			if (result.errors) {
				console.error(result.errors);
				toast.error($LL.{{ appName }}.message.requestFailed());
			}
		});
	};
</script>

<Dialog bind:close>
	<svelte:fragment slot="trigger" let:trigger let:zIndex>
		<div class="tooltip md:hidden" data-tip={text}>
			<button
				use:melt={trigger}
				class="btn {className} max-sm:btn-square"
				{disabled}
				on:click={(e) => query(1)}
			>
				<slot name="sm">
					{#if text}
						{text}
					{:else}
						{$LL.ui.button.select()}
					{/if}
				</slot>
			</button>
		</div>
		<button
			use:melt={trigger}
			class="btn {className} max-md:hidden"
			{disabled}
			on:click={(e) => query(1)}
		>
			<slot>
				{#if text}
					{text}
				{:else}
					{$LL.ui.button.select()}
				{/if}
			</slot>
		</button>
	</svelte:fragment>
	<svelte:fragment let:zIndex>
		<{{ name }}Table
			value={nodes}
			bind:selectedIdList
			bind:args
			bind:orderBy
			showEditButton={!readonly}
			showCreateButton={!readonly}
			showSelectButton={!readonly && (!singleChoice || (selectedIdList?.length || 0) <= 1)}
			isFetching={$query_{{ name | camelCase }}Connection_Store.isFetching}
			{zIndex}
			{%- if useAuth %}
			{fields}
			{%- endif %}
			on:select={(e) => {
				if (Array.isArray(e.detail.value)) {
					if (singleChoice) {
						value = e.detail.value?.[0] || null;
					} else {
						value = e.detail.value;
					}
				} else if (e.detail.value) {
					value = e.detail.value;
				} else {
					value = null;
				}
				dispatch('select', { value });
				if (close) {
					close();
				}
			{% raw %}}}{% endraw %}
			on:search={(e) => {
				if (e.detail.value) {
					args = {
						cond: 'OR',
						{%- for field in fields %}
						{%- if field.isScalarType and field.inQueryArgs and field.fieldTypeName == 'String' %}
						{{ field.fieldName }}: { opr: 'LK', val: e.detail.value },
						{%- endif %}
						{%- endfor %}
						first: pageSize,
						offset: 0
					};
				} else {
					args = { first: pageSize, offset: 0 };
				}
				query();
			{% raw %}}}{% endraw %}
			on:query={(e) => query()}
			on:edit={(e) => {
				if (e.detail.value && !Array.isArray(e.detail.value)) {
					to(`./{{ name | paramCase }}/${e.detail.value.{{ idName }}}`);
				}
			{% raw %}}}{% endraw %}
			on:create={(e) => to('./{{ name | paramCase }}/_')}
		/>
		<div class="divider" />
		<Pagination
			bind:pageSize
			bind:pageNumber
			{totalCount}
			on:pageChange={(e) => query()}
			on:sizeChange={(e) => query(1)}
		/>
	</svelte:fragment>
</Dialog>
