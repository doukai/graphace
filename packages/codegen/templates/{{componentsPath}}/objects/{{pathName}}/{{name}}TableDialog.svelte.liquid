<script lang="ts">
	import { getContext, createEventDispatcher } from 'svelte';
	import { melt } from '@melt-ui/svelte';
	import { Icon } from '@steeze-ui/svelte-icon';
	import { ListBullet } from '@steeze-ui/heroicons';
	import type { Errors{% if useAuth %}, PermissionsStore{% endif %} } from '@graphace/commons';
	import { buildArguments } from '@graphace/graphql';
	import { to, Pagination, Dialog, toast } from '@graphace/ui';
	import { createQuery_{{ name | camelCase }}Connection_Store } from '~/{{ storesPath }}/query/query_{{ name | camelCase }}Connection_store';
	import {{ name }}Table from '~/{{ componentsPath }}/objects/{{ name | paramCase }}/{{ name }}Table.svelte';
	import { getLoadEvent } from '~/utils';
	import type { {{ queryTypeName }}{{ name }}ConnectionArgs, {{ name }}OrderBy, {{ name }}Input } from '~/{{ schemaTypesPath }}';
	import LL from '$i18n/i18n-svelte';

	export let value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined = undefined;
	export let triggerErrors: Errors | undefined = undefined;
	export let textFieldName: string | undefined = undefined;
	export let text: string | undefined = undefined;
	export let singleChoice: boolean | undefined = false;
	export let readonly = false;
	export let disabled = false;
	let original: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined = undefined;
	let className: string | undefined = 'p-1';
	export { className as class };

	{%- if useAuth %}
	const permissions = getContext<PermissionsStore>('permissions');
	{%- endif %}

	const dispatch = createEventDispatcher<{
		select: {
			value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined;
			original: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined;
		};
	}>();

	const query_{{ name | camelCase }}Connection_Store = createQuery_{{ name | camelCase }}Connection_Store(getLoadEvent());
	$: nodes = $query_{{ name | camelCase }}Connection_Store.response.data?.{{ name | camelCase }}Connection?.edges?.map(
		(edge) => edge?.node
	);
	$: totalCount = $query_{{ name | camelCase }}Connection_Store.response.data?.{{ name | camelCase }}Connection?.totalCount || 0;
	let args: Query{{ name }}ConnectionArgs = {};
	let orderBy: {{ name }}OrderBy = {};
	let pageNumber: number = 1;
	let pageSize: number = 10;
	let selectedIdList: (string | null | undefined)[] | undefined = [];
	let close: () => void;

	original = value;

	if (Array.isArray(original)) {
		value = original.map((item) => ({ where: { {{ idName }}: { val: item?.{{ idName }} } } }));
		selectedIdList = original?.map((node) => node?.{{ idName }});
	} else if (original) {
		value = { where: { {{ idName }}: { val: original.{{ idName }} } } };
		selectedIdList = [original.{{ idName }}];
	}

	$: if (Array.isArray(original)) {
		if (textFieldName) {
			if (original.length > 3) {
				text = original
					.slice(0, 3)
					.map((node) => node?.[textFieldName])
					.join(',')
					.concat('...');
			} else {
				text = original.map((node) => node?.[textFieldName]).join(',');
			}
		}
	} else if (original) {
		if (textFieldName) {
			text = original?.[textFieldName];
		}
	} else {
		text = undefined;
	}

	const query = (to?: number | undefined) => {
		args.orderBy = orderBy;
		args.first = pageSize;
		args.offset = ((to || pageNumber) - 1) * pageSize;
		query_{{ name | camelCase }}Connection_Store.fetch(buildArguments(args)).then((result) => {
			if (result.errors) {
				console.error(result.errors);
				toast.error($LL.{{ appName }}.message.requestFailed());
			}
		});
	};
</script>

<Dialog bind:close>
	<div class="flex space-x-1 items-center" slot="trigger" let:trigger let:zIndex>
		<div
			class="tooltip {triggerErrors ? 'tooltip-open tooltip-error ' : ''} hover:z-[{zIndex + 3}]"
			data-tip={triggerErrors
				? triggerErrors?.errors?.map((error) => error.message).join(', ')
				: $LL.ui.button.select()}
		>
			<button
				use:melt={trigger}
				class="btn {text ? 'btn-link' : 'btn-square btn-outline'} {className}"
				{disabled}
				on:click={(e) => query(1)}
			>
				{#if text}
					{text}
				{:else}
					<Icon src={ListBullet} class="h-5 w-5" />
				{/if}
			</button>
		</div>
		<slot/>
	</div>
	<svelte:fragment let:zIndex>
		<{{ name }}Table
			value={nodes}
			bind:selectedIdList
			bind:args
			bind:orderBy
			showEditButton={!readonly}
			showCreateButton={!readonly}
			showSelectButton={!readonly && (!singleChoice || (selectedIdList?.length || 0) <= 1)}
			isFetching={$query_{{ name | camelCase }}Connection_Store.isFetching}
			{zIndex}
			fields={% raw %}{{{% endraw %}
				{%- for field in fields %}
				{{ field.fieldName }}: {
					readonly: !permissions.auth('{{ name }}::{{ field.fieldName }}::WRITE'),
					disabled: !permissions.auth('{{ name }}::{{ field.fieldName }}::WRITE'),
					hidden: !permissions.auth('{{ name }}::{{ field.fieldName }}::READ')
				}{% if forloop.last == false %},{% endif %}
				{%- endfor %}
			{% raw %}}}{% endraw %}
			on:select={(e) => {
				if (Array.isArray(e.detail.value)) {
					if (singleChoice) {
						original = e.detail.value?.[0];
					} else {
						original = e.detail.value;
					}
				} else if (e.detail.value) {
					original = e.detail.value;
				} else {
					original = undefined;
				}
				if (Array.isArray(original)) {
					value = original.map((item) => ({ where: { {{ idName }}: { val: item?.{{ idName }} } } }));
				} else if (original) {
					value = { where: { {{ idName }}: { val: original.{{ idName }} } } };
				} else {
					value = undefined;
				}
				dispatch('select', { value, original });
				close();
			{% raw %}}}{% endraw %}
			on:search={(e) => {
				if (e.detail.value) {
					args = {
						cond: 'OR',
						{%- for field in fields %}
						{%- if field.isScalarType and field.inQueryArgs and field.fieldTypeName == 'String' %}
						{{ field.fieldName }}: { opr: 'LK', val: e.detail.value },
						{%- endif %}
						{%- endfor %}
						first: pageSize,
						offset: 0
					};
				} else {
					args = { first: pageSize, offset: 0 };
				}
				query();
			{% raw %}}}{% endraw %}
			on:query={(e) => query()}
			on:edit={(e) => {
				if (e.detail.value && !Array.isArray(e.detail.value)) {
					to(`./{{ name | camelCase }}/${e.detail.value.{{ idName }}}`);
				}
			{% raw %}}}{% endraw %}
			on:create={(e) => to('./{{ name | camelCase }}/_')}
		/>
		<div class="divider" />
		<Pagination
			bind:pageSize
			bind:pageNumber
			{totalCount}
			on:pageChange={(e) => query()}
			on:sizeChange={(e) => query(1)}
		/>
	</svelte:fragment>
</Dialog>
