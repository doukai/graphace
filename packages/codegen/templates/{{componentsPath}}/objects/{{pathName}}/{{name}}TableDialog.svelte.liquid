<script lang="ts">
	import { getContext, createEventDispatcher } from 'svelte';
	import { melt } from '@melt-ui/svelte';
	import { Icon } from '@steeze-ui/svelte-icon';
	import { ListBullet } from '@steeze-ui/heroicons';
	{%- if useAuth %}
	import type { PermissionsStore } from '@graphace/commons';
	{%- endif %}
	import { buildArguments } from '@graphace/graphql';
	import { to, Pagination, Dialog, toast } from '@graphace/ui';
	import { createQuery_{{ name | camelCase }}Connection_Store } from '~/{{ storesPath }}/query/query_{{ name | camelCase }}Connection_store';
	import {{ name }}Table from '~/{{ componentsPath }}/objects/{{ name | paramCase }}/{{ name }}Table.svelte';
	import { getLoadEvent } from '~/utils';
	import type { {{ queryTypeName }}{{ name }}ConnectionArgs, {{ name }}Input } from '~/{{ schemaTypesPath }}';
	import LL from '$i18n/i18n-svelte';

	export let value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined = undefined;
	export let singleChoice: boolean | undefined = false;
	export let readonly = false;
	export let disabled = false;
	let className: string | undefined = 'p-1';
	export { className as class };

	{%- if useAuth %}
	const permissions = getContext<PermissionsStore>('permissions');
	{%- endif %}

	const dispatch = createEventDispatcher<{
		select: {
			value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined;
		};
	}>();

	const query_{{ name | camelCase }}Connection_Store = createQuery_{{ name | camelCase }}Connection_Store(getLoadEvent());
	$: nodes = $query_{{ name | camelCase }}Connection_Store.response.data?.{{ name | camelCase }}Connection?.edges?.map(
		(edge) => edge?.node
	);
	$: totalCount = $query_{{ name | camelCase }}Connection_Store.response.data?.{{ name | camelCase }}Connection?.totalCount || 0;
	let pageNumber: number = 1;
	let pageSize: number = 10;
	let selectedIdList: (string | null | undefined)[] | undefined = [];
	let close: () => void;

	if (Array.isArray(value)) {
		value = value.map((item) => ({ where: { {{ idName }}: { val: item?.{{ idName }} } } }));
		selectedIdList = value?.map((node) => node?.where?.{{ idName }}?.val);
	} else if (value) {
		value = { where: { {{ idName }}: { val: value.{{ idName }} } } };
		selectedIdList = [value.where?.{{ idName }}?.val];
	}

	$: if (Array.isArray(value)) {
		selectedIdList = value?.map((node) => node?.where?.{{ idName }}?.val);
	} else if (value) {
		selectedIdList = [value.where?.{{ idName }}?.val];
	}

	const query = (args: {{ queryTypeName }}{{ name }}ConnectionArgs) => {
		query_{{ name | camelCase }}Connection_Store.fetch(args).then((result) => {
			if (result.errors) {
				console.error(result.errors);
				toast.error($LL.{{ appName }}.message.requestFailed());
			}
		});
	};
</script>

<Dialog bind:close>
	<div class="flex items-center" slot="trigger" let:trigger let:zIndex>
		<div class="tooltip hover:z-[{zIndex + 3}]" data-tip={$LL.ui.button.select()}>
			<button
				use:melt={trigger}
				class="btn btn-square btn-outline {className}"
				{disabled}
				on:click={(e) => query({ first: pageSize, offset: 0 })}
			>
				<Icon src={ListBullet} class="h-5 w-5" />
			</button>
		</div>
	</div>
	<svelte:fragment let:zIndex>
		<{{ name }}Table
			value={nodes}
			bind:selectedIdList
			showEditButton={!readonly}
			showCreateButton={!readonly}
			showSelectButton={!readonly && (!singleChoice || selectedIdList?.length === 1)}
			isFetching={$query_{{ name | camelCase }}Connection_Store.isFetching}
			{zIndex}
			fields={% raw %}{{{% endraw %}
				{%- for field in fields %}
				{{ field.fieldName }}: {
					readonly: !permissions.auth('{{ name }}::{{ field.fieldName }}::WRITE'),
					disabled: !permissions.auth('{{ name }}::{{ field.fieldName }}::WRITE'),
					hidden: !permissions.auth('{{ name }}::{{ field.fieldName }}::READ')
				}{% if forloop.last == false %},{% endif %}
				{%- endfor %}
			{% raw %}}}{% endraw %}
			on:select={(e) => {
				if (Array.isArray(e.detail.value)) {
					if (singleChoice) {
						value = [{ where: { {{ idName }}: { val: e.detail.value?.[0]?.{{ idName }} } } }];
					} else {
						value = e.detail.value.map((node) => ({ where: { {{ idName }}: { val: node?.{{ idName }} } } }));
					}
				} else {
					value = [{ where: { {{ idName }}: { val: e.detail.value?.{{ idName }} } } }];
				}
				dispatch('select', { value });
				close();
			{% raw %}}}{% endraw %}
			on:search={(e) => {
				if (e.detail.value) {
					query({
						cond: 'OR',
						{%- for field in fields %}
						{%- if field.isScalarType and field.inQueryArgs and field.fieldTypeName == 'String' %}
						{{ field.fieldName }}: { opr: 'LK', val: e.detail.value },
						{%- endif %}
						{%- endfor %}
						first: pageSize,
						offset: 0
					});
				} else {
					query({ first: pageSize, offset: 0 });
				}
			{% raw %}}}{% endraw %}
			on:query={(e) => {
				e.detail.args = buildArguments(e.detail.args);
				if (Object.keys(e.detail.orderBy).length > 0) {
					e.detail.args.orderBy = e.detail.orderBy;
				}
				query(e.detail.args);
			{% raw %}}}{% endraw %}
			on:edit={(e) => {
				if (e.detail.value && !Array.isArray(e.detail.value)) {
					to(`./{{ name | camelCase }}/${e.detail.value.{{ idName }}}`);
				}
			{% raw %}}}{% endraw %}
			on:create={(e) => to('./{{ name | camelCase }}/_')}
		/>
		<div class="divider" />
		<Pagination
			bind:pageSize
			bind:pageNumber
			{totalCount}
			on:pageChange={(e) => query({ first: pageSize, offset: (pageNumber - 1) * pageSize })}
			on:sizeChange={(e) => query({ first: pageSize, offset: 0 })}
		/>
	</svelte:fragment>
</Dialog>
