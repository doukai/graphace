<script lang="ts">
	import { createEventDispatcher } from 'svelte';
	import { tippy } from '@graphace/ui';
	import { OperatorSelect, {% for scalar in scalars %}{{ scalar }}Input{% if forloop.last == false %}, {% endif %}{% endfor %} } from '@graphace/ui-graphql';
	import { Icon } from '@steeze-ui/svelte-icon';
	import { Check, XMark, Funnel } from '@steeze-ui/heroicons';
	{%- for enum in enums %}
	import {{ enum }}Input from '~/{{ enumsPath }}/{{ enum | paramCase }}/{{ enum }}Input.svelte';
	{%- endfor %}
	import type { {% for scalar in scalars %}{{ scalar }}Expression{% if forloop.last == false %}, {% endif %}{% endfor %} } from '~/{{ schemaTypesPath }}';
	{%- if isNamedStruct %}
	import {{ name }}Select from '~/{{ objectsPath }}/{{ name | paramCase }}/{{ name }}Select.svelte';
	{%- endif %}
	{%- if namedStructObjectNames %}
	{%- for namedStructType in namedStructObjectNames %}
	{%- if namedStructType != name %}
	import {{ namedStructType }}Select from '~/{{ objectsPath }}/{{ namedStructType | paramCase }}/{{ namedStructType }}Select.svelte';
	{%- endif %}
	{%- endfor %}
	{%- endif %}
	import LL from '$i18n/i18n-svelte';
	import { Operator } from '$houdini';
	import type { {% if isNamedStruct %}{{ name }}Input, {% endif %}{% if namedStructObjectNames %}{% for namedStructType in namedStructObjectNames %}{% if namedStructType != name %}{{ namedStructType }}Input, {% endif %}{% endfor %}{% endif %}{% for enum in enums %}{{ enum }}Expression, {% endfor %}{{ name }}Expression } from '$houdini';
	{%- if useAuth %}
	import { permissions } from '~/lib/utils/auth-util';
	{%- endif %}

	export let name: string;
	export let expression: {{ name }}Expression | null | undefined;
	{%- if isNamedStruct %}
	let value: {{ name }}Input | ({{ name }}Input | null | undefined)[] | null | undefined = undefined;
	{%- endif %}
	{%- if fields %}
	{%- for field in fields %}
	{%- if field.isNamed %}
	let {{ field.fieldName }}: {{ field.fieldType.name }}Input | ({{ field.fieldType.name }}Input | null | undefined)[] | null | undefined = undefined;
	{%- endif %}
	{%- endfor %}
	{%- endif %}

	let _expression: {
		{%- if isNamedStruct %}
		{{ idName }}: StringExpression;
		{%- endif %}
		{%- if fields %}
		{%- for field in fields %}
		{%- if field.isScalarType or field.isEnumType %}
		{{ field.fieldName }}: {{ field.fieldType.name }}Expression;
		{%- endif %}
		{%- if field.isNamed %}
		{{ field.fieldName }}: { {{ field.fieldTypeIdName }}: StringExpression };
		{%- endif %}
		{%- endfor %}
		{%- endif %}
	} = {
		{%- if isNamedStruct %}
		{{ idName }}: { opr: Operator.EQ },
		{%- endif %}
		{%- if fields %}
		{%- for field in fields %}
		{%- if field.isScalarType or field.isEnumType %}
		{{ field.fieldName }}: { opr: Operator.EQ }{% if forloop.last == false %},{% endif %}
		{%- endif %}
		{%- if field.isNamed %}
		{{ field.fieldName }}: { id: { opr: Operator.EQ } }{% if forloop.last == false %},{% endif %}
		{%- endif %}
		{%- endfor %}
		{%- endif %}
	};
	
	{%- if isNamedStruct %}
	$: if (Array.isArray(value)) {
		_expression.{{ idName }}.in = value?.map((item) => item?.where?.{{ idName }}?.val);
	} else if (value) {
		_expression.{{ idName }}.val = value?.where?.{{ idName }}?.val;
	}
	{%- endif %}

	{%- if fields %}
	{%- for field in fields %}
	{%- if field.isNamed %}
	$: if (Array.isArray({{ field.fieldName }})) {
		_expression.{{ field.fieldName }}.{{ field.fieldTypeIdName }}.in = {{ field.fieldName }}?.map((item) => item?.where?.{{ field.fieldTypeIdName }}?.val);
	} else if ({{ field.fieldName }}) {
		_expression.{{ field.fieldName }}.{{ field.fieldTypeIdName }}.val = {{ field.fieldName }}?.where?.{{ field.fieldTypeIdName }}?.val;
	}
	{%- endif %}
	{%- endfor %}
	{%- endif %}

	let content: HTMLElement;
	let tippyElement: any;
	const dispatch = createEventDispatcher<{
		filter: {};
	}>();

	const filter = (): void => {
		{%- if isNamedStruct %}
		if (_expression.{{ idName }}.val || (_expression.{{ idName }}.in && _expression.{{ idName }}.in.length > 0)) {
			expression = { ...expression, {{ idName }}: _expression.{{ idName }} };
		} else {
			expression = { ...expression, {{ idName }}: undefined };
		}
		{%- endif %}
		{%- if fields %}
		{%- for field in fields %}
		{%- if field.isScalarType or field.isEnumType %}
		if (_expression.{{ field.fieldName }}.val || (_expression.{{ field.fieldName }}.in && _expression.{{ field.fieldName }}.in.length > 0)) {
			expression = { ...expression, {{ field.fieldName }}: _expression.{{ field.fieldName }} };
		} else {
			expression = { ...expression, {{ field.fieldName }}: undefined };
		}
		{%- endif %}
		{%- if field.isNamed %}
		if (
			_expression.{{ field.fieldName }}.{{ field.fieldTypeIdName }}?.val ||
			(_expression.{{ field.fieldName }}.{{ field.fieldTypeIdName }}?.in && _expression.{{ field.fieldName }}.{{ field.fieldTypeIdName }}?.in.length > 0)
		) {
			expression = { ...expression, {{ field.fieldName }}: _expression.{{ field.fieldName }} };
		} else {
			expression = { ...expression, {{ field.fieldName }}: undefined };
		}
		{%- endif %}
		{%- endfor %}
		{%- endif %}
		
		if (Object.values(expression).filter((item) => item).length === 0) {
			expression = undefined;
		}
		dispatch('filter');
		tippyElement._tippy.hide();
	};

	const clear = (): void => {
		{%- if isNamedStruct %}
		_expression.{{ idName }} = { opr: Operator.EQ };
		{%- endif %}
		{%- if fields %}
		{%- for field in fields %}
		{%- if field.isScalarType or field.isEnumType %}
		_expression.{{ field.fieldName }} = { opr: Operator.EQ };
		{%- endif %}
		{%- if field.isNamed %}
		_expression.{{ field.fieldName }} = { {{ field.fieldTypeIdName }}: { opr: Operator.EQ } };
		{%- endif %}
		{%- endfor %}
		{%- endif %}
		expression = undefined;
		dispatch('filter');
		tippyElement._tippy.hide();
	};

	
	{%- if isNamedStruct %}
	const {{ idName }}OprChange = (): void => {
		_expression.{{ idName }}.in = [];
		_expression.{{ idName }}.val = undefined;
	};	
	{%- endif %}

	{%- if fields %}
	{%- for field in fields %}
	{%- if field.isScalarType or field.isEnumType %}
	const {{ field.fieldName }}OprChange = (): void => {
		_expression.{{ field.fieldName }}.in = [];
		_expression.{{ field.fieldName }}.val = undefined;
	};
	
	{%- endif %}
	{%- if field.isNamed %}
	const {{ field.fieldName }}OprChange = (): void => {
		_expression.{{ field.fieldName }}.{{ field.fieldTypeIdName }}.in = [];
		_expression.{{ field.fieldName }}.{{ field.fieldTypeIdName }}.val = undefined;
	};

	{%- endif %}
	{%- endfor %}
	{%- endif %}
</script>
<div class="hidden">
	<div class="space-y-2" bind:this={content}>
		{%- if fields %}
		<div class="grid grid-cols-2 gap-2">
		{%- if isNamedStruct %}
			{%- if useAuth %}
			{#if permissions.auth('{{ name }}::{{ idName }}::*')}
			{%- endif %}
			<div class="join">
				<button class="btn btn-active btn-ghost join-item w-16">
					{$LL.graphql.objects.{{ name }}.name()}
				</button>
				<OperatorSelect
					className="join-item w-32"
					bind:value={_expression.{{ idName }}.opr}
					on:change={(e) => {{ idName }}OprChange()}
				/>
			</div>
			{#if _expression.{{ idName }}.opr === 'IN' || _expression.{{ idName }}.opr === 'NIN' || _expression.{{ idName }}.opr === 'BT' || _expression.{{ idName }}.opr === 'NBT'}
				<{{ name }}Select
					{name}
					placeholder={$LL.uiGraphql.table.th.filterPlaceholder()}
					list
					bind:value
				/>
			{:else}
				<{{ name }}Select {name} placeholder={$LL.uiGraphql.table.th.filterPlaceholder()} bind:value />
			{/if}
			{%- if useAuth %}
			{/if}
			{%- endif %}
		{%- endif %}
		{%- for field in fields %}
		{%- if field.isScalarType or field.isEnumType %}
			{%- if useAuth %}
			{#if permissions.auth('{{ name }}::{{ field.fieldName }}::*')}
			{%- endif %}
			<div class="join">
				<button class="btn btn-active btn-ghost join-item w-16">
					{$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}
				</button>
				<OperatorSelect
					className="join-item w-32"
					bind:value={_expression.{{ field.fieldName }}.opr}
					on:change={(e) => {{ field.fieldName }}OprChange()}
				/>
			</div>
			{#if _expression.{{ field.fieldName }}.opr === 'IN' || _expression.{{ field.fieldName }}.opr === 'NIN' || _expression.{{ field.fieldName }}.opr === 'BT' || _expression.{{ field.fieldName }}.opr === 'NBT'}
				<{{ field.fieldType.name }}Input
					{%- if field.fieldType.name != "Boolean" %}
					placeholder={$LL.uiGraphql.table.th.filterPlaceholder()}
					{%- endif %}
					{name}
					bind:value={_expression.{{ field.fieldName }}.in}
				/>
			{:else}
				<{{ field.fieldType.name }}Input
					{%- if field.fieldType.name != "Boolean" %}
					placeholder={$LL.uiGraphql.table.th.filterPlaceholder()}
					{%- endif %}
					{name}
					bind:value={_expression.{{ field.fieldName }}.val}
				/>
			{/if}
			{%- if useAuth %}
			{/if}
			{%- endif %}
		{%- endif %}
		{%- if field.isNamed %}
			{%- if useAuth %}
			{#if permissions.auth('{{ name }}::{{ field.fieldName }}::*')}
			{%- endif %}
			<div class="join">
				<button class="btn btn-active btn-ghost join-item w-16">
					{$LL.graphql.objects.{{ name }}.fields.{{ field.fieldName }}.name()}
				</button>
				<OperatorSelect
					className="join-item w-32"
					bind:value={_expression.{{ field.fieldName }}.{{ field.fieldTypeIdName }}.opr}
					on:change={(e) => {{ field.fieldName }}OprChange()}
				/>
			</div>
			{#if _expression.{{ field.fieldName }}.{{ field.fieldTypeIdName }}.opr === 'IN' || _expression.{{ field.fieldName }}.{{ field.fieldTypeIdName }}.opr === 'NIN' || _expression.{{ field.fieldName }}.{{ field.fieldTypeIdName }}.opr === 'BT' || _expression.{{ field.fieldName }}.{{ field.fieldTypeIdName }}.opr === 'NBT'}
				<{{ field.fieldType.name }}Select
					{name}
					placeholder={$LL.uiGraphql.table.th.filterPlaceholder()}
					list
					bind:value={ {{ field.fieldName }} }
				/>
			{:else}
				<{{ field.fieldType.name }}Select {name} placeholder={$LL.uiGraphql.table.th.filterPlaceholder()} bind:value={ {{ field.fieldName }} } />
			{/if}
			{%- if useAuth %}
			{/if}
			{%- endif %}
		{%- endif %}
		{%- endfor %}
		</div>
		{%- endif %}
		<div class="flex justify-center space-x-2">
			<div class="tooltip" data-tip={$LL.uiGraphql.table.th.filter()}>
				<button class="btn btn-square btn-primary" on:click={(e) => filter()}>
					<Icon src={Check} class="h-5 w-5" />
				</button>
			</div>
			<div class="tooltip" data-tip={$LL.uiGraphql.table.th.cancel()}>
				<button class="btn btn-square btn-outline btn-error" on:click={(e) => clear()}>
					<Icon src={XMark} class="h-5 w-5" />
				</button>
			</div>
		</div>
	</div>
</div>

<td>
	<a
		class="link group inline-flex"
		href={null}
		use:tippy={% raw %}{{{% endraw %}
			content,
			placement: 'bottom',
			interactive: true,
			arrow: true,
			trigger: 'click',
			interactiveBorder: 30,
			theme: 'daisy',
			maxWidth: 'none',
			appendTo: () => document.body
		{% raw %}}}{% endraw %}
		bind:this={tippyElement}
	>
		{name}
		{#if expression && Object.keys(expression).length > 0}
			<span class="flex-none">
				<Icon src={Funnel} class="h-5 w-5" />
			</span>
		{/if}
	</a>
</td>
