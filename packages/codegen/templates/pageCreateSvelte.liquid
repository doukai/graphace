<script lang="ts">
	import { goto, afterNavigate } from '$app/navigation';
	import { base } from '$app/paths'
	import { page } from '$app/stores';
	import {{ name }}CreateForm from '~/{{ formPath }}/{{ name | paramCase }}/{{ name }}CreateForm.svelte';
	import type { __Schema, __Type, __TypeKind } from '@graphace/graphql/types';
	import type { Error } from '@graphace/commons/types';
	import {
		updateNodeParam,
		getChildPathParam
	} from '~/lib/utils';
	import { Mutation_{{ name | camelCase }}Store } from '$houdini';
	import type { MutationType{{ name }}Args, {{ name }} } from '~/{{ schemaTypesPath }}';
	import type { PageData } from './$houdini';

	export let data: PageData;
	$: node = data.node as MutationType{{ name }}Args;

	const Mutation_{{ name | camelCase }} = new Mutation_{{ name | camelCase }}Store();

	let previousPage: string = base;
	afterNavigate(({ from }) => {
		previousPage = from?.url.pathname || previousPage;
	});

	const mutation = (
		event: CustomEvent<{
			args: MutationType{{ name }}Args;
			then: (data: {{ name }} | null | undefined) => void;
			catch: (error: Error) => void;
		}>
	) => {
		Mutation_{{ name | camelCase }}.mutate(event.detail.args)
			.then((result) => {
				event.detail.then(result?.{{ name | camelCase }});
			})
			.catch((error) => {
				event.detail.catch(error);
			});
	};

	const back = (event: CustomEvent<{}>) => {
		goto(previousPage);
	};

	const gotoField = (event: CustomEvent<{ path: string; name: string; }>) => {
		const url = new URL(`./${event.detail.path}`, $page.url.href);
		url.searchParams.set('node', updateNodeParam($page.url, node));
		url.searchParams.set('path', getChildPathParam($page.url, event.detail.name));
		goto(url);
	};
</script>

<{{ name }}CreateForm bind:node on:mutation={mutation} on:back={back} on:gotoField={gotoField} />
