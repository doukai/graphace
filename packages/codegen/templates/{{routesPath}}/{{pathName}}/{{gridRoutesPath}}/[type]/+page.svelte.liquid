<script lang="ts">
	import { getContext } from 'svelte';
	import type { Errors, JsonSchema } from '@graphace/commons';
	import { Field, Directive, buildArguments, createConnectionField } from '@graphace/graphql';
	import { Card, CardBody, Pagination, modal, toast } from '@graphace/ui';
	import type { OperationStore } from '@graphace/ui-graphql';
	import {{ name }}Query from '~/{{ componentsPath }}/objects/{{ name | paramCase }}/{{ name }}.svelte';
	import {{ name }}Agg from '~/{{ componentsPath }}/objects/{{ name | paramCase }}/{{ name }}Agg.svelte';
	import {{ name }}Grid from '~/{{ componentsPath }}/objects/{{ name | paramCase }}/{{ name }}Grid.svelte';
	import {{ name }}AggGrid from '~/{{ componentsPath }}/objects/{{ name | paramCase }}/{{ name }}AggGrid.svelte';
	import type { Query{{ name }}ConnectionArgs, {{ name }}, {{ name }}Connection } from '~/{{ schemaTypesPath }}';
	import { buildGlobalGraphQLErrorMessage, buildGraphQLErrors } from '~/utils';
	import LL from '$i18n/i18n-svelte';
	import { locale } from '$i18n/i18n-svelte';
	import type { PageData } from './$types';

	export let data: PageData;

	const { validate } = getContext<JsonSchema>('jsonSchema');

	$: showHeader = data.showHeader;
	$: showFooter = data.showFooter;
	$: showOptionButton = data.showOptionButton;
	$: showFilterButton = data.fields;

	$: query_{{ name | camelCase }}Connection_Store = data.query_{{ name | camelCase }}Connection_Store as OperationStore<{{ name }}Connection>;
	$: nodes = $query_{{ name | camelCase }}Connection_Store.response.data?.{{ name | camelCase }}Connection?.edges?.map(
		(edge) => edge?.node
	);
	$: totalCount = $query_{{ name | camelCase }}Connection_Store.response.data?.{{ name | camelCase }}Connection?.totalCount || 0;
	const mutation_{{ name | camelCase }}List_Store = data.mutation_{{ name | camelCase }}List_Store as OperationStore<{{ name }}[]>;

	let fields: Field[] = data.fields || [];
	let queryFields: Field[] = data.fields || [];
	let args: Query{{ name }}ConnectionArgs = data.args || {};
	let directives: Directive[] | undefined = data.directives;
	let pageNumber: number = 1;
	let pageSize: number = 10;
	let errors: Record<number, Errors> = {};

	const query = (to?: number | undefined) => {
		errors = {};
		args.first = pageSize;
		args.offset = ((to || pageNumber) - 1) * pageSize;
		query_{{ name | camelCase }}Connection_Store
			.fetch({
				fields: [
					createConnectionField({
						name: '{{ name | camelCase }}Connection',
						args: buildArguments(args),
						fields:
							data.type === 'mutation'
								? queryFields
								: [...(args?.groupBy?.map((name) => new Field({ name })) || []), ...fields],
						directives
					})
				]
			})
			.then((result) => {
				if (result.errors) {
					console.error(result.errors);
					toast.error($LL.{{ appName }}.message.requestFailed());
				}
			});
	};

	const fetch = (params: {
		fields: Field[];
		args: Query{{ name }}ConnectionArgs;
		directives?: Directive[];
	}) => {
		return query_{{ name | camelCase }}Connection_Store.fetch({
			fields: [
				createConnectionField({
					name: '{{ name | camelCase }}Connection',
					args: buildArguments(params.args),
					fields: params.fields,
					directives: params.directives
				})
			]
		});
	};
</script>

<Card>
	<CardBody>
		{#if data.type === 'mutation'}
			<{{ name }}Query
				bind:fields
				bind:queryFields
				bind:args
				{showHeader}
				{showOptionButton}
				{showFilterButton}
				isFetching={$query_{{ name | camelCase }}Connection_Store.isFetching}
				class="md:h-screen"
				on:query={(e) => query()}
				let:fields
				let:queryFields
				let:args
				let:getFieldName
				let:query
				let:buildArguments
			>
				<{{ name }}Grid
					value={nodes}
					{fields}
					{errors}
					{queryFields}
					{args}
					{getFieldName}
					{query}
					{buildArguments}
					on:mutation={(e) => {
						validate('Mutation_{{ name | camelCase }}List_Arguments', e.detail.args, $locale)
							.then((data) => {
								errors = {};
								mutation_{{ name | camelCase }}List_Store
									.fetch({
										fields: [
											new Field({
												name: '{{ name | camelCase }}List',
												fields: e.detail.fields,
												args: e.detail.args,
												directives: e.detail.directives
											})
										]
									})
									.then((result) => {
										if (result.errors) {
											console.error(result.errors);
											errors = buildGraphQLErrors(result.errors);
											const globalError = buildGlobalGraphQLErrorMessage(result.errors);
											if (globalError) {
												modal.open({
													title: $LL.{{ appName }}.message.requestFailed(),
													description: globalError,
													confirm: () => {
														query();
														return true;
													}
												});
											}
										} else {
											toast.success($LL.{{ appName }}.message.requestSuccess());
											query();
										}
									});
							})
							.catch((validErrors) => {
								errors = validErrors.list?.iterms;
							});
					{% raw %}}}{% endraw %}
					on:exportQuery={(e) => {
						fetch({
							fields: e.detail.fields,
							args: e.detail.args,
							directives: e.detail.directives
						}).then((result) => {
								if (result.errors) {
									console.error(result.errors);
									toast.error($LL.{{ appName }}.message.requestFailed());
								} else if (e.detail.then) {
									e.detail.then(result?.data?.{{ name | camelCase }}Connection?.edges?.map((edge) => edge?.node));
								}
							});
					{% raw %}}}{% endraw %}
				/>
			</{{ name }}Query>
		{:else}
			<{{ name }}Agg
				bind:fields
				bind:args
				{showHeader}
				{showOptionButton}
				{showFilterButton}
				isFetching={$query_{{ name | camelCase }}Connection_Store.isFetching}
				class="md:h-screen"
				on:query={(e) => query()}
				let:fields
				let:args
				let:getFieldName
				let:getGrouByName
			>
				<{{ name }}AggGrid value={nodes} {fields} {args} {getFieldName} {getGrouByName} />
			</{{ name }}Agg>
		{/if}
		{#if showFooter}
			<div class="divider" />
			<Pagination
				bind:pageSize
				bind:pageNumber
				{totalCount}
				on:pageChange={(e) => query()}
				on:sizeChange={(e) => query(1)}
			/>
		{/if}
	</CardBody>
</Card>