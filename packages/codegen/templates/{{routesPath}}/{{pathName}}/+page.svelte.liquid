<script lang="ts">
	import { ot, to, urlName, canBack } from '~/lib/stores/useNavigate';
	import { page } from '$app/stores';
	import type { Errors, GraphQLError } from '@graphace/commons/types';
	import { Card } from '@graphace/ui/components/card';
	{%- if connectionField %}
	import {{ name }}ConnectionTable from '~/{{ tablePath }}/{{ name | paramCase }}/{{ name }}ConnectionTable.svelte';
	{%- else %}
	import {{ name }}Table from '~/{{ tablePath }}/{{ name | paramCase }}/{{ name }}Table.svelte';
	{%- endif %}
	import type { {{ name }}, {% if connectionField %}{{ queryTypeName }}{{ name }}ConnectionArgs{% else %}{{ queryTypeName }}{{ name }}ListArgs{% endif %}, {{ mutationTypeName }}{{ name }}Args } from '~/{{ schemaTypesPath }}';
	import { {% if connectionField %}Query_{{ name | camelCase }}ConnectionStore{% else %}Query_{{ name | camelCase }}ListStore{% endif %}, Mutation_{{ name | camelCase }}Store } from '$houdini';
	import type { PageData } from './$houdini';
	import { validateMutation } from '~/lib/utils';
	import LL from '$i18n/i18n-svelte';
	import { locale } from '$i18n/i18n-svelte';

	export let data: PageData;
	$: urlName($page.url, $LL.graphql.objects.{{ name }}.name());
	{%- if connectionField %}
	$: Query_{{ name | camelCase }}Connection = data.Query_{{ name | camelCase }}Connection as Query_{{ name | camelCase }}ConnectionStore;
	$: nodes = $Query_{{ name | camelCase }}Connection.data?.{{ name | camelCase }}Connection?.edges?.map((edge) => edge?.node);
	$: totalCount = $Query_{{ name | camelCase }}Connection.data?.{{ name | camelCase }}Connection?.totalCount || 0;
	{%- else %}
	$: Query_{{ name | camelCase }}List = data.Query_{{ name | camelCase }}List as Query_{{ name | camelCase }}ListStore;
	$: nodes = $Query_{{ name | camelCase }}List.data?.{{ name | camelCase }}List;
	{%- endif %}
	const Mutation_{{ name | camelCase }} = new Mutation_{{ name | camelCase }}Store();
	let errors: Record<number, Errors> = {};

	const fetch = (
		event: CustomEvent<{
			{%- if connectionField %}
			args: {{ queryTypeName }}{{ name }}ConnectionArgs;
			{%- else %}
			args: {{ queryTypeName }}{{ name }}ListArgs;
			{%- endif %}
			then: (data: ({{ name }} | null | undefined)[] | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		}>
	) => {
		{%- if connectionField %}
		Query_{{ name | camelCase }}Connection.fetch({ variables: event.detail.args })
		{%- else %}
		Query_{{ name | camelCase }}List.fetch({ variables: event.detail.args })
		{%- endif %}
			.then((result) => {
			{%- if connectionField %}
				event.detail.then(result.data?.{{ name | camelCase }}Connection?.edges?.map((edge) => edge?.node));
			{%- else %}
				event.detail.then(result.data?.{{ name | camelCase }}List);
			{%- endif %}
				if (result.errors) {
					event.detail.catch(result.errors);
				}
			});
	};

	const mutation = (
		event: CustomEvent<{
			args: {{ mutationTypeName }}{{ name }}Args;
			then: (data: {{ name }} | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		}>
	) => {
		const row = nodes?.map((node) => node?.{{ idName }})?.indexOf(event.detail.args.{{ idName }} || event.detail.args.where?.{{ idName }}?.val || undefined);
		validateMutation('{{ name }}', event.detail.args, $locale)
			.then((data) => {
				if (row !== -1 && row !== undefined && errors[row]) {
					errors[row].iterms = {};
				}
				Mutation_{{ name | camelCase }}.mutate(event.detail.args)
					.then((result) => {
						event.detail.then(result?.data?.{{ name | camelCase }});
						if (result.errors) {
							event.detail.catch(result.errors);
						}
					});
			})
			.catch((validErrors) => {
				if (row !== -1 && row !== undefined) {
					errors[row] = { errors: errors[row]?.errors, iterms: validErrors };
				}
			});
	};

	const edit = (
		event: CustomEvent<{
			id: string;
		}>
	) => {
		to(`./{{ name | paramCase }}/${event.detail.id}`);
	};

	const create = (event: CustomEvent<{}>) => {
		to(`./{{ name | paramCase }}/_`);
	};

	const gotoField = (event: CustomEvent<{ path: string; name: string; }>) => {
		to(`./{{ name | paramCase }}/${event.detail.path}`);
	};
</script>

<Card>
	{%- if connectionField %}
	<{{ name }}ConnectionTable
		showSaveButton={false}
		showBackButton={$canBack}
		{nodes}
		{totalCount}
		{errors}
		isFetching={$Query_{{ name | camelCase }}Connection.fetching}
		on:fetch={fetch}
		on:mutation={mutation}
		on:edit={edit}
		on:create={create}
		on:gotoField={gotoField}
	/>
	{%- else %}
	<{{ name }}Table
		showSaveButton={false}
		showBackButton={$canBack}
		{nodes}
		{errors}
		isFetching={$Query_{{ name | camelCase }}List.fetching}
		on:fetch={fetch}
		on:mutation={mutation}
		on:edit={edit}
		on:create={create}
		on:gotoField={gotoField}
	/>
	{%- endif %}
</Card>
