<script lang="ts">
	import { page } from '$app/stores';
	import type { Errors } from '@graphace/commons';
	import type { GraphQLError } from '@graphace/graphql';
	import { Card, ot, to, urlName, canBack } from '@graphace/ui';
	{%- if connectionField %}
	import {{ name }}ConnectionTable from '~/{{ tablePath }}/{{ name | paramCase }}/{{ name }}ConnectionTable.svelte';
	import type { Query_{{ name | paramCase }}Connection_Store } from '~/{{ storesPath }}/query/query_{{ name | paramCase }}Connection_store';
	{%- else %}
	import {{ name }}Table from '~/{{ tablePath }}/{{ name | paramCase }}/{{ name }}Table.svelte';
	import type { Query_{{ name | paramCase }}List_Store } from '~/{{ storesPath }}/query/query_{{ name | paramCase }}List_store';
	{%- endif %}
	import type { Mutation_{{ name | paramCase }}_Store } from '~/{{ storesPath }}/mutation/mutation_{{ name | paramCase }}_store';
	{%- if hasFileField %}
	import type { Mutation_singleUpload_Store } from '~/{{ storesPath }}/mutation/mutation_singleUpload_store';
	{%- endif %}
	import type { {{ name }}Input, {% if connectionField %}{{ queryTypeName }}{{ name }}ConnectionArgs{% else %}{{ queryTypeName }}{{ name }}ListArgs{% endif %}, {{ mutationTypeName }}{{ name }}Args } from '~/{{ schemaTypesPath }}';
	import type { PageData } from './$types';
	import { validate } from '~/utils';
	import LL from '$i18n/i18n-svelte';
	import { locale } from '$i18n/i18n-svelte';

	export let data: PageData;
	$: urlName($page.url, $LL.graphql.objects.{{ name }}.name());
	{%- if connectionField %}
	$: query_{{ name | camelCase }}Connection_Store = data.query_{{ name | camelCase }}Connection_Store as Query_{{ name | camelCase }}Connection_Store;
	$: nodes = $query_{{ name | camelCase }}Connection_Store.response.data?.{{ name | camelCase }}Connection?.edges?.map((edge) => edge?.node);
	$: totalCount = $query_{{ name | camelCase }}Connection_Store.response.data?.{{ name | camelCase }}Connection?.totalCount || 0;
	{%- else %}
	$: query_{{ name | camelCase }}List_Store = data.query_{{ name | camelCase }}List_Store as Query_{{ name | camelCase }}List_Store;
	$: nodes = $query_{{ name | camelCase }}List_Store.response.data?.{{ name | camelCase }}List;
	{%- endif %}
	$: mutation_{{ name | camelCase }}_Store = data.mutation_{{ name | camelCase }}_Store as Mutation_{{ name | camelCase }}_Store;
	{%- if hasFileField %}
	$: mutation_singleUpload_Store = data.mutation_singleUpload_Store as Mutation_singleUpload_Store;
	{%- endif %}
	let errors: Record<number, Errors> = {};

	const fetch = (
		event: CustomEvent<{
			{%- if connectionField %}
			args: {{ queryTypeName }}{{ name }}ConnectionArgs;
			{%- else %}
			args: {{ queryTypeName }}{{ name }}ListArgs;
			{%- endif %}
			then: (data: ({{ name }}Input | null | undefined)[] | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		}>
	) => {
		{%- if connectionField %}
		query_{{ name | camelCase }}Connection_Store.fetch(event.detail.args)
		{%- else %}
		query_{{ name | camelCase }}List_Store.fetch(event.detail.args)
		{%- endif %}
			.then((result) => {
				if (result.errors) {
					event.detail.catch(result.errors);
				} else {
				{%- if connectionField %}
					event.detail.then(result.data?.{{ name | camelCase }}Connection?.edges?.map((edge) => edge?.node));
				{%- else %}
					event.detail.then(result.data?.{{ name | camelCase }}List);
				{%- endif %}
				}
			});
	};

	const mutation = (
		event: CustomEvent<{
			args: {{ mutationTypeName }}{{ name }}Args;
			then: (data: {{ name }}Input | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		}>
	) => {
		const row = nodes?.map((node) => node?.{{ idName }})?.indexOf(event.detail.args.{{ idName }} || event.detail.args.where?.{{ idName }}?.val || undefined);
		validate('{{ mutationTypeName }}_{{ name | camelCase }}_Arguments', event.detail.args, $locale)
			.then((data) => {
				if (row !== -1 && row !== undefined && errors[row]) {
					errors[row].iterms = {};
				}
				mutation_{{ name | camelCase }}_Store.fetch(event.detail.args)
					.then((result) => {
						if (result.errors) {
							event.detail.catch(result.errors);
						} else {
							event.detail.then(result?.data?.{{ name | camelCase }});
						}
					});
			})
			.catch((validErrors) => {
				if (row !== -1 && row !== undefined) {
					errors[row] = { errors: errors[row]?.errors, iterms: validErrors };
				}
			});
	};

	const edit = (
		event: CustomEvent<{
			id: string;
		}>
	) => {
		to(`./{{ name | paramCase }}/${event.detail.id}`);
	};

	const create = (event: CustomEvent<{}>) => {
		to(`./{{ name | paramCase }}/_`);
	};

	const gotoField = (event: CustomEvent<{ path: string; name: string; }>) => {
		to(`./{{ name | paramCase }}/${event.detail.path}`);
	};
</script>

<Card>
	{%- if connectionField %}
	<{{ name }}ConnectionTable
		showSaveButton={false}
		showBackButton={$canBack}
		{nodes}
		{totalCount}
		{errors}
		isFetching={$query_{{ name | camelCase }}Connection_Store.isFetching}
		on:fetch={fetch}
		on:mutation={mutation}
		on:edit={edit}
		on:create={create}
		on:gotoField={gotoField}
		{%- if hasFileField %}
		on:upload={(e) => {
			mutation_singleUpload_Store.mutate({ file: e.detail.file }).then((result) =>
				e.detail.then(result.data?.singleUpload)
			);
		}}
		{%- endif %}
	/>
	{%- else %}
	<{{ name }}Table
		showSaveButton={false}
		showBackButton={$canBack}
		{nodes}
		{errors}
		isFetching={$query_{{ name | camelCase }}List_Store.isFetching}
		on:fetch={fetch}
		on:mutation={mutation}
		on:edit={edit}
		on:create={create}
		on:gotoField={gotoField}
		{%- if hasFileField %}
		on:upload={(e) => {
			mutation_singleUpload_Store.fetch({ file: e.detail.file }).then((result) =>
				e.detail.then(result.data?.singleUpload)
			);
		}}
		{%- endif %}
	/>
	{%- endif %}
</Card>
