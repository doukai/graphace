<script lang="ts">
	import { getContext } from 'svelte';
	import type { Errors, JsonSchema{%- if useAuth -%}, PermissionsStore{%- endif -%} } from '@graphace/commons';
	import { buildArguments } from '@graphace/graphql';
	import { to, add, canBack, Card, CardBody, Pagination, toast, modal } from '@graphace/ui';
	import {{ name }}Table from '~/{{ componentsPath }}/objects/{{ name | paramCase }}/{{ name }}Table.svelte';
	import type { Query_{{ name | camelCase }}Connection_Store } from '~/{{ storesPath }}/query/query_{{ name | camelCase }}Connection_store';
	import type { Mutation_{{ name | camelCase }}_Store } from '~/{{ storesPath }}/mutation/mutation_{{ name | camelCase }}_store';
	{%- if hasFileField %}
	import type { Mutation_singleUpload_Store } from '~/{{ storesPath }}/mutation/mutation_singleUpload_store';
	{%- endif %}
	import { buildGlobalGraphQLErrorMessage, buildGraphQLErrors } from '~/utils';
	import type { {{ queryTypeName }}{{ name }}ConnectionArgs, {{ mutationTypeName }}{{ name }}Args } from '~/{{ schemaTypesPath }}';
	import LL from '$i18n/i18n-svelte';
	import { locale } from '$i18n/i18n-svelte';
	import type { PageData } from './$types';

	export let data: PageData;

	const { validate } = getContext<JsonSchema>('jsonSchema');
	{%- if useAuth %}
	const permissions = getContext<PermissionsStore>('permissions');
	{%- endif %}

	$: query_{{ name | camelCase }}Connection_Store = data.query_{{ name | camelCase }}Connection_Store as Query_{{ name | camelCase }}Connection_Store;
	$: nodes = $query_{{ name | camelCase }}Connection_Store.response.data?.{{ name | camelCase }}Connection?.edges?.map((edge) => edge?.node);
	$: totalCount = $query_{{ name | camelCase }}Connection_Store.response.data?.{{ name | camelCase }}Connection?.totalCount || 0;
	$: mutation_{{ name | camelCase }}_Store = data.mutation_{{ name | camelCase }}_Store as Mutation_{{ name | camelCase }}_Store;
	{%- if hasFileField %}
	$: mutation_singleUpload_Store = data.mutation_singleUpload_Store as Mutation_singleUpload_Store;
	{%- endif %}
	let pageNumber: number = 1;
	let pageSize: number = 10;
	let errors: Record<number, Errors> = {};

	const query = (args: {{ queryTypeName }}{{ name }}ConnectionArgs) => {
		query_{{ name | camelCase }}Connection_Store.fetch(args).then((result) => {
			if (result.errors) {
				console.error(errors);
				toast.error($LL.graphence.message.requestFailed());
			} else {
				errors = {};
			}
		});
	};

	const mutation = (args: {{ mutationTypeName }}{{ name }}Args) => {
		const row = nodes
			?.map((node) => node?.{{ idName }})
			?.indexOf(args.{{ idName }} || args.where?.{{ idName }}?.val || undefined);
		validate('{{ mutationTypeName }}_{{ name | camelCase }}_Arguments', args, $locale)
			.then((data) => {
				if (row !== -1 && row !== undefined && errors[row]) {
					errors[row].iterms = {};
				}
				mutation_{{ name | camelCase }}_Store.fetch(args).then((result) => {
					if (result.errors) {
						console.error(result.errors);
						errors = buildGraphQLErrors(result.errors);
						const globalError = buildGlobalGraphQLErrorMessage(result.errors);
						if (globalError) {
							modal.open({
								title: $LL.graphence.message.requestFailed(),
								description: globalError,
								confirm: () => {
									query({ first: pageSize, offset: 0 });
									return true;
								}
							});
						}
					} else {
						toast.success($LL.graphence.message.requestSuccess());
						query({ first: pageSize, offset: (pageNumber - 1) * pageSize });
					}
				});
			})
			.catch((validErrors) => {
				if (row !== -1 && row !== undefined) {
					errors[row] = { errors: errors[row]?.errors, iterms: validErrors };
				}
			});
	};
</script>

<Card>
	<CardBody>
		<{{ name }}Table
			showRemoveButton={true}
			showEditButton={true}
			showCreateButton={true}
			showBackButton={$canBack}
			value={nodes}
			{errors}
			isFetching={$query_{{ name | camelCase }}Connection_Store.isFetching}
			fields={% raw %}{{{% endraw %}
				{%- for field in fields %}
				{{ field.fieldName }}: {
					readonly: !permissions.auth('{{ name }}::{{ field.fieldName }}::WRITE'),
					disabled: !permissions.auth('{{ name }}::{{ field.fieldName }}::WRITE'),
					hidden: !permissions.auth('{{ name }}::{{ field.fieldName }}::READ')
				}{% if forloop.last == false %},{% endif %}
				{%- endfor %}
			{% raw %}}}{% endraw %}
			on:search={(e) => {
				if (e.detail.value) {
					query({
						cond: 'OR',
						{%- for field in fields %}
						{%- if field.isScalarType and field.inQueryArgs and field.fieldTypeName == 'String' %}
						{{ field.fieldName }}: { opr: 'LK', val: e.detail.value },
						{%- endif %}
						{%- endfor %}
						first: pageSize,
						offset: 0
					});
				} else {
					query({ first: pageSize, offset: 0 });
				}
			{% raw %}}}{% endraw %}
			on:query={(e) => {
				e.detail.args = buildArguments(e.detail.args);
				if (Object.keys(e.detail.orderBy).length > 0) {
					e.detail.args.orderBy = e.detail.orderBy;
				}
				query(e.detail.args);
			{% raw %}}}{% endraw %}
			on:save={(e) => {
				if (e.detail.value && !Array.isArray(e.detail.value)) {
					mutation(e.detail.value);
				}
			{% raw %}}}{% endraw %}
			on:edit={(e) => {
				if (e.detail.value && !Array.isArray(e.detail.value)) {
					to(`{{ name | paramCase }}/${e.detail.value.id}`, e.detail.value.{% if isNamed %}name{% else %}{{ idName }}{% endif %});
				}
			{% raw %}}}{% endraw %}
			on:remove={(e) => {
				if (e.detail.value) {
					modal.open({
						title: $LL.graphence.components.modal.removeModalTitle(),
						confirm: () => {
							if (Array.isArray(e.detail.value)) {
								mutation({
									where: { id: { opr: 'IN', arr: e.detail.value.map((node) => node?.id) } },
									isDeprecated: true
								});
							} else {
								mutation({
									where: { id: { val: e.detail.value?.id } },
									isDeprecated: true
								});
							}
							return true;
						}
					});
				}
			{% raw %}}}{% endraw %}
			on:create={(e) => to('{{ name | paramCase }}/_', '_')}
			on:goto={(e) => to(`{{ name | paramCase }}/${e.detail.path}`, e.detail.name)}
			{%- if hasFileField %}
			on:upload={(e) => {
				mutation_singleUpload_Store.fetch({ file: e.detail.file }).then((result) =>
					e.detail.then(result.data?.singleUpload)
				);
			{% raw %}}}{% endraw %}
			{%- endif %}
		/>
		<div class="divider" />
		<Pagination
			bind:pageSize
			bind:pageNumber
			{totalCount}
			on:pageChange={(e) => query({ first: pageSize, offset: (pageNumber - 1) * pageSize })}
			on:sizeChange={(e) => query({ first: pageSize, offset: 0 })}
		/>
	</CardBody>
</Card>
