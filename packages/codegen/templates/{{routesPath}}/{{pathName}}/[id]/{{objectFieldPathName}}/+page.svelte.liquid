<script lang="ts">
	import { getContext } from 'svelte';
	import type { Errors, JsonSchema{%- if useAuth -%}, PermissionsStore{%- endif -%} } from '@graphace/commons';
	import { ot, to, canBack, Card, CardBody, toast, modal } from '@graphace/ui';
	import {{ objectFieldInfo.fieldTypeName }}Form from '~/{{ formPath }}/{{ objectFieldInfo.fieldTypeName | paramCase }}/{{ objectFieldInfo.fieldTypeName }}Form.svelte';
	import type { Query_{{ fieldTypeName | camelCase }}_{{ objectFieldName }}_Store } from '~/{{ storesPath }}/query/query_{{ fieldTypeName | camelCase }}_{{ objectFieldName }}_store';
	import type { Mutation_{{ fieldTypeName | camelCase }}_{{ objectFieldName }}_Store } from '~/{{ storesPath }}/mutation/mutation_{{ fieldTypeName | camelCase }}_{{ objectFieldName }}_store';
	import type { Mutation_{{ objectFieldInfo.fieldTypeName | camelCase }}_Store } from '~/{{ storesPath }}/mutation/mutation_{{ objectFieldInfo.fieldTypeName | camelCase }}_store';
	{%- if hasFileField %}
	import type { Mutation_singleUpload_Store } from '~/{{ storesPath }}/mutation/mutation_singleUpload_store';
	{%- endif %}
	import { buildGlobalGraphQLErrorMessage, buildGraphQLErrors } from '~/utils';
	import type { {{ objectFieldInfo.fieldTypeName }}Input, {{ mutationTypeName }}{{ objectFieldInfo.fieldTypeName }}Args } from '~/{{ schemaTypesPath }}';
	import LL from '$i18n/i18n-svelte';
	import { locale } from '$i18n/i18n-svelte';
	import type { PageData } from './$types';

	export let data: PageData;

	const { validate } = getContext<JsonSchema>('jsonSchema');
	{%- if useAuth %}
	const permissions = getContext<PermissionsStore>('permissions');
	{%- endif %}

	$: query_{{ fieldTypeName | camelCase }}_{{ objectFieldName }}_Store = data.query_{{ fieldTypeName | camelCase }}_{{ objectFieldName }}_Store as Query_{{ fieldTypeName | camelCase }}_{{ objectFieldName }}_Store;
	$: {{ fieldTypeName | camelCase }} = $query_{{ fieldTypeName | camelCase }}_{{ objectFieldName }}_Store.response.data?.{{ fieldTypeName | camelCase }};
	$: node = {{ fieldTypeName | camelCase }}?.{{ objectFieldName }};
	$: mutation_{{ fieldTypeName | camelCase }}_{{ objectFieldName }}_Store = data.mutation_{{ fieldTypeName | camelCase }}_{{ objectFieldName }}_Store as Mutation_{{ fieldTypeName | camelCase }}_{{ objectFieldName }}_Store;
	$: mutation_{{ objectFieldInfo.fieldTypeName | camelCase }}_Store = data.mutation_{{ objectFieldInfo.fieldTypeName | camelCase }}_Store as Mutation_{{ objectFieldInfo.fieldTypeName | camelCase }}_Store;
	{%- if hasFileField %}
	$: mutation_singleUpload_Store = data.mutation_singleUpload_Store as Mutation_singleUpload_Store;
	{%- endif %}
	$: errors = data.errors as Record<string, Errors>;

	const mutation = (args: {{ mutationTypeName }}{{ objectFieldInfo.fieldTypeName }}Args) => {
		validate('{{ mutationTypeName }}_{{ objectFieldInfo.fieldTypeName | camelCase }}_Arguments', args, $locale)
			.then((data) => {
				errors = {};
				mutation_{{ objectFieldInfo.fieldTypeName | camelCase }}_Store.fetch(args).then((result) => {
					if (result.errors) {
						console.error(result.errors);
						errors = buildGraphQLErrors(result.errors);
						const globalError = buildGlobalGraphQLErrorMessage(result.errors);
						if (globalError) {
							modal.open({
								title: $LL.graphence.message.requestFailed(),
								description: globalError
							});
						}
					} else {
						toast.success($LL.graphence.message.requestSuccess());
						ot();
					}
				});
			})
			.catch((validErrors) => {
				errors = validErrors;
			});
	};

	const parentMutation = (args: {{ mutationTypeName }}{{ objectFieldInfo.fieldTypeName }}Args | null) => {
		validate('{{ mutationTypeName }}_{{ fieldTypeName | camelCase }}_Arguments', { where: { {{ fieldTypeIdName }}: { val: {{ fieldTypeName | camelCase }}?.{{ fieldTypeIdName }} } }, {{ objectFieldName }}: event.detail.args }, $locale)
			.then((data) => {
				errors = {};
				mutation_{{ fieldTypeName | camelCase }}_{{ objectFieldName }}_Store.fetch({
					{{ fieldTypeName | camelCase }}_{{ fieldTypeIdName }}: {{ fieldTypeName | camelCase }}?.{{ fieldTypeIdName }},
					{{ fieldTypeName | camelCase }}_{{ objectFieldName }}: args
				}).then((result) => {
					if (result.errors) {
						console.error(result.errors);
						errors = buildGraphQLErrors(result.errors);
						const globalError = buildGlobalGraphQLErrorMessage(result.errors);
						if (globalError) {
							modal.open({
								title: $LL.graphence.message.requestFailed(),
								description: globalError
							});
						}
					} else {
						toast.success($LL.graphence.message.requestSuccess());
						ot();
					}
				});
			})
			.catch((validErrors) => {
				errors = validErrors.{{ objectFieldName }}.iterms;
			});
	};
</script>

<Card>
	<CardBody>
		<{{ objectFieldInfo.fieldTypeName }}Form
			showGotoSelectButton={true}
			{node}
			{errors}
			showRemoveButton={false}
			{%- if isNonNullType == false %}
			showUnbindButton={true}
			{%- endif %}
			showBackButton={$canBack}
			isFetching={$query_{{ fieldTypeName | camelCase }}_{{ objectFieldName }}_Store.isFetching}
			on:mutation={mutation}
			on:parentMutation={parentMutation}
			on:gotoField={gotoField}
			on:gotoSelect={gotoSelect}
			on:back={back}
			{%- if hasFileField %}
			on:upload={(e) => {
				mutation_singleUpload_Store.fetch({ file: e.detail.file }).then((result) =>
					e.detail.then(result.data?.singleUpload)
				);
			{% raw %}}}{% endraw %}
			{%- endif %}
		/>
	</CardBody>
</Card>