<script lang="ts">
	import { page } from '$app/stores';
	import { type Errors, updateNodeParam, updateErrorsParam, getChildPathParam } from '@graphace/commons';
	import type { GraphQLError } from '@graphace/graphql';
	import { Card, ot, to, urlName, canBack } from '@graphace/ui';
	import {{ objectFieldTypeName }}Form from '~/{{ formPath }}/{{ objectFieldTypeName | paramCase }}/{{ objectFieldTypeName }}Form.svelte';
	import {{ objectFieldTypeName }}CreateForm from '~/{{ formPath }}/{{ objectFieldTypeName | paramCase }}/{{ objectFieldTypeName }}CreateForm.svelte';
	import type { Query_{{ name | camelCase }}_{{ objectFieldName }}_Store } from '~/{{ storesPath }}/query/query_{{ name | camelCase }}_{{ objectFieldName }}_store';
	import type { Mutation_{{ name | camelCase }}_{{ objectFieldName }}_Store } from '~/{{ storesPath }}/mutation/mutation_{{ name | camelCase }}_{{ objectFieldName }}_store';
	import type { Mutation_{{ objectFieldTypeName | camelCase }}_Store } from '~/{{ storesPath }}/mutation/mutation_{{ objectFieldTypeName | camelCase }}_store';
	{%- if hasFileField %}
	import type { Mutation_singleUpload_Store } from '~/{{ storesPath }}/mutation/mutation_singleUpload_store';
	{%- endif %}
	import type { {{ objectFieldTypeName }}Input, {{ mutationTypeName }}{{ objectFieldTypeName }}Args } from '~/{{ schemaTypesPath }}';
	import type { PageData } from './$types';
	import { validate } from '~/utils';
	import LL from '$i18n/i18n-svelte';
	import { locale } from '$i18n/i18n-svelte';

	export let data: PageData;
	$: urlName($page.url, $LL.graphql.objects.{{ name }}.fields.{{ objectFieldName }}.name());
	$: query_{{ name | camelCase }}_{{ objectFieldName }}_Store = data.query_{{ name | camelCase }}_{{ objectFieldName }}_Store as Query_{{ name | camelCase }}_{{ objectFieldName }}_Store;
	$: {{ name | camelCase }} = $query_{{ name | camelCase }}_{{ objectFieldName }}_Store.response.data?.{{ name | camelCase }};
	$: node = {{ name | camelCase }}?.{{ objectFieldName }};
	$: createNode = data.node;
	$: errors = data.errors as Record<string, Errors>;
	$: mutation_{{ name | camelCase }}_{{ objectFieldName }}_Store = data.mutation_{{ name | camelCase }}_{{ objectFieldName }}_Store as Mutation_{{ name | camelCase }}_{{ objectFieldName }}_Store;
	$: mutation_{{ objectFieldTypeName | camelCase }}_Store = data.mutation_{{ objectFieldTypeName | camelCase }}_Store as Mutation_{{ objectFieldTypeName | camelCase }}_Store;
	{%- if hasFileField %}
	$: mutation_singleUpload_Store = data.mutation_singleUpload_Store as Mutation_singleUpload_Store;
	{%- endif %}

	const mutation = (
		event: CustomEvent<{
			args: {{ mutationTypeName }}{{ objectFieldTypeName }}Args;
			then: (data: {{ objectFieldTypeName }}Input | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		}>
	) => {
		validate('{{ mutationTypeName }}_{{ objectFieldTypeName | camelCase }}_Arguments', event.detail.args, $locale)
			.then((data) => {
				errors = {};
				mutation_{{ objectFieldTypeName | camelCase }}_Store.fetch(event.detail.args)
					.then((result) => {
						if (result.errors) {
							event.detail.catch(result.errors);
						} else {
							event.detail.then(result?.data?.{{ objectFieldTypeName | camelCase }});
						}
					});
			})
			.catch((validErrors) => {
				errors = validErrors;
			});
	};

	const parentMutation = (
		event: CustomEvent<{
			args: {{ mutationTypeName }}{{ objectFieldTypeName }}Args | null;
			then: (data: {{ objectFieldTypeName }}Input | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		}>
	) => {
		validate('{{ mutationTypeName }}_{{ name | camelCase }}_Arguments', { where: { {{ idName }}: { val: {{ name | camelCase }}?.{{ idName }} } }, {{ objectFieldName }}: event.detail.args }, $locale)
			.then((data) => {
				errors = {};
				mutation_{{ name | camelCase }}_{{ objectFieldName }}_Store.fetch({
					{{ name | camelCase }}_{{ idName }}: {{ name | camelCase }}?.{{ idName }},
					{{ name | camelCase }}_{{ objectFieldName }}: event.detail.args
				})
					.then((result) => {
						if (result.errors) {
							event.detail.catch(result.errors);
						} else {
							event.detail.then(result?.data?.{{ name | camelCase }}?.{{ objectFieldName }});
						}
					});
			})
			.catch((validErrors) => {
				errors = validErrors.{{ objectFieldName }}.iterms;
			});
	};

	const gotoField = (event: CustomEvent<{ path: string; name: string; }>) => {
		if (node) {
			to(`../../{{ objectFieldTypeName | paramCase }}/${event.detail.path}`);
		} else {
			to(`../../{{ objectFieldTypeName | paramCase }}/${event.detail.path}`, {
				node: updateNodeParam($page.url, createNode),
				errors: updateErrorsParam($page.url, errors),
				path: getChildPathParam($page.url, event.detail.name)
			});
		}
	};

	const gotoSelect = (event: CustomEvent<{}>) => {
		to(`./{{ objectFieldName | paramCase }}/__`);
	};

	const back = (event: CustomEvent<{}>) => {
		ot();
	};
</script>

<Card>
	{#if node}
		<{{ objectFieldTypeName }}Form
			showGotoSelectButton={true}
			{node}
			{errors}
			showRemoveButton={false}
			{%- if isNonNullType == false %}
			showUnbindButton={true}
			{%- endif %}
			showBackButton={$canBack}
			isFetching={$query_{{ name | camelCase }}_{{ objectFieldName }}_Store.isFetching}
			on:mutation={mutation}
			on:parentMutation={parentMutation}
			on:gotoField={gotoField}
			on:gotoSelect={gotoSelect}
			on:back={back}
			{%- if hasFileField %}
			on:upload={(e) => {
				mutation_singleUpload_Store.fetch({ file: e.detail.file }).then((result) =>
					e.detail.then(result.data?.singleUpload)
				);
			}}
			{%- endif %}
		/>
	{:else}
		<{{ objectFieldTypeName }}CreateForm
			showGotoSelectButton={true}
			showBackButton={$canBack}
			node={createNode}
			{errors}
			on:mutation={parentMutation}
			on:gotoField={gotoField}
			on:gotoSelect={gotoSelect}
			on:back={back}
			{%- if hasFileField %}
			on:upload={(e) => {
				mutation_singleUpload_Store.fetch({ file: e.detail.file }).then((result) =>
					e.detail.then(result.data?.singleUpload)
				);
			}}
			{%- endif %}
		/>
	{/if}
</Card>