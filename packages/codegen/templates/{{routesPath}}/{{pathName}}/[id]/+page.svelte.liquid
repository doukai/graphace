<script lang="ts">
	import { ot, to, urlName, canBack } from '~/lib/stores/useNavigate';
	import { page } from '$app/stores';
	import {{ name }}Form from '~/{{ formPath }}/{{ name | paramCase }}/{{ name }}Form.svelte';
	import type { __Schema, __Type, __TypeKind } from '@graphace/graphql/types';
	import type { Errors, GraphQLError } from '@graphace/commons/types';
	import { Query_{{ name | camelCase }}Store, Mutation_{{ name | camelCase }}Store } from '$houdini';
	import type { PageData } from './$houdini';
	import type { MutationType{{ name }}Args, {{ name }} } from '~/{{ schemaTypesPath }}';
	import { validateMutation } from '~/lib/utils';
	import { locale } from '$i18n/i18n-svelte';

	export let data: PageData;
	$: Query_{{ name | camelCase }} = data.Query_{{ name | camelCase }} as Query_{{ name | camelCase }}Store;
	$: node = $Query_{{ name | camelCase }}.data?.{{ name | camelCase }};
	$: urlName($page.url, node?.name || '');
	const Mutation_{{ name | camelCase }} = new Mutation_{{ name | camelCase }}Store();
	let errors: Record<string, Errors> = {};

	const mutation = (
		event: CustomEvent<{
			args: MutationType{{ name }}Args;
			update?: boolean;
			then: (data: {{ name }} | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		}>
	) => {
		validateMutation('{{ name }}', event.detail.args, event.detail.update, $locale)
			.then((data) => {
				errors = {};
				Mutation_{{ name | camelCase }}.mutate({ ...event.detail.args, update: event.detail.update })
					.then((result) => {
						event.detail.then(result?.data?.{{ name | camelCase }});
						if (result.errors) {
							event.detail.catch(result.errors);
						}
					});
			})
			.catch((validErrors) => {
				errors = validErrors;
			});
	};

	const back = (event: CustomEvent<{}>) => {
		ot();
	};

	const gotoField = (event: CustomEvent<{ path: string; name: string; }>) => {
		to(`./${event.detail.path}`);
	};
</script>

<{{ name }}Form
	showBackButton={$canBack}
	{node}
	{errors}
	isFetching={$Query_{{ name| camelCase }}.fetching}
	on:mutation={mutation}
	on:back={back}
	on:gotoField={gotoField}
/>
