<script lang="ts">
	import { getContext } from 'svelte';
	import type { Errors, JsonSchema{% if useAuth %}, PermissionsStore{% endif %} } from '@graphace/commons';
	import { buildArguments } from '@graphace/graphql';
	import { ot, to, canBack, Card, CardBody, Pagination, toast, modal } from '@graphace/ui';
	import {{ fieldObjectInfo.name }}Table from '~/{{ componentsPath }}/objects/{{ fieldObjectInfo.name | paramCase }}/{{ fieldObjectInfo.name }}Table.svelte';
	import type { Query_{{ name | camelCase }}_{{ fieldInfo.fieldName }}Connection_Store } from '~/{{ storesPath }}/query/query_{{ name | camelCase }}_{{ fieldInfo.fieldName }}Connection_store';
	import type { Mutation_{{ name | camelCase }}_{{ fieldInfo.fieldName }}_Store } from '~/{{ storesPath }}/mutation/mutation_{{ name | camelCase }}_{{ fieldInfo.fieldName }}_store';
	import type { Mutation_{{ fieldObjectInfo.name | camelCase }}_Store } from '~/{{ storesPath }}/mutation/mutation_{{ fieldObjectInfo.name | camelCase }}_store';
	{%- if hasFileField %}
	import type { Mutation_singleUpload_Store } from '~/{{ storesPath }}/mutation/mutation_singleUpload_store';
	{%- endif %}
	import { buildGlobalGraphQLErrorMessage, buildGraphQLErrors } from '~/utils';
	import type { {{ fieldObjectInfo.name }}Input, {{ mutationTypeName }}{{ fieldObjectInfo.name }}Args, {{ queryTypeName }}{{ fieldObjectInfo.name }}ConnectionArgs, {{ fieldObjectInfo.name }}OrderBy } from '~/{{ schemaTypesPath }}';
	import { LL, locale } from '$i18n/i18n-svelte';
	import type { PageData } from './$types';

	export let data: PageData;

	const { validate } = getContext<JsonSchema>('jsonSchema');
	{%- if useAuth %}
	const permissions = getContext<PermissionsStore>('permissions');
	{%- endif %}

	$: query_{{ name | camelCase }}_{{ fieldInfo.fieldName }}Connection_Store = data.query_{{ name | camelCase }}_{{ fieldInfo.fieldName }}Connection_Store as Query_{{ name | camelCase }}_{{ fieldInfo.fieldName }}Connection_Store;
	$: {{ name | camelCase }} = $query_{{ name | camelCase }}_{{ fieldInfo.fieldName }}Connection_Store.response.data?.{{ name | camelCase }};
	$: nodes = $query_{{ name | camelCase }}_{{ fieldInfo.fieldName }}Connection_Store.response.data?.{{ name | camelCase }}?.{{ fieldInfo.fieldName }}Connection?.edges?.map((edge) => edge?.node);
	$: totalCount = $query_{{ name | camelCase }}_{{ fieldInfo.fieldName }}Connection_Store.response.data?.{{ name | camelCase }}?.{{ fieldInfo.fieldName }}Connection?.totalCount || 0;
	$: mutation_{{ name | camelCase }}_{{ fieldInfo.fieldName }}_Store = data.mutation_{{ name | camelCase }}_{{ fieldInfo.fieldName }}_Store as Mutation_{{ name | camelCase }}_{{ fieldInfo.fieldName }}_Store;
	$: mutation_{{ fieldObjectInfo.name | camelCase }}_Store = data.mutation_{{ fieldObjectInfo.name | camelCase }}_Store as Mutation_{{ fieldObjectInfo.name | camelCase }}_Store;
	{%- if hasFileField %}
	$: mutation_singleUpload_Store = data.mutation_singleUpload_Store as Mutation_singleUpload_Store;
	{%- endif %}
	let args: Query{{ fieldObjectInfo.name }}ConnectionArgs = {};
	let orderBy: {{ fieldObjectInfo.name }}OrderBy = {};
	let pageNumber: number = 1;
	let pageSize: number = 10;
	let errors: Record<number, Errors> = {};

	const query = (to?: number | undefined) => {
		args.orderBy = orderBy;
		args.first = pageSize;
		args.offset = ((to || pageNumber) - 1) * pageSize;
		query_{{ name | camelCase }}_{{ fieldInfo.fieldName }}Connection_Store.fetch({ {{ name | camelCase }}_{{ idName }}: {{ name | camelCase }}?.{{ idName }}, ...buildArguments(args) }).then((result) => {
			if (result.errors) {
				console.error(errors);
				toast.error($LL.{{ appName }}.message.requestFailed());
			} else {
				errors = {};
			}
		});
	};

	const mutation = (args: {{ mutationTypeName }}{{ fieldObjectInfo.name }}Args) => {
		validate('{{ mutationTypeName }}_{{ fieldObjectInfo.name | camelCase }}_Arguments', args, $locale)
			.then((data) => {
				errors = {};
				mutation_{{ fieldObjectInfo.name | camelCase }}_Store.fetch(args).then((result) => {
					if (result.errors) {
						console.error(result.errors);
						errors = buildGraphQLErrors(result.errors);
						const globalError = buildGlobalGraphQLErrorMessage(result.errors);
						if (globalError) {
							modal.open({
								title: $LL.{{ appName }}.message.requestFailed(),
								description: globalError
							});
						}
					} else {
						toast.success($LL.{{ appName }}.message.requestSuccess());
						ot();
					}
				});
			})
			.catch((validErrors) => {
				errors = validErrors;
			});
	};

	const merge = (args: {{ fieldObjectInfo.name }}Input[]) => {
		validate('{{ mutationTypeName }}_{{ name | camelCase }}_Arguments', { where: { {{ idName }}: { val: {{ name | camelCase }}?.{{ idName }} } }, {{ fieldInfo.fieldName }}: args }, $locale)
			.then((data) => {
				errors = {};
				mutation_{{ name | camelCase }}_{{ fieldInfo.fieldName }}_Store.fetch({
					{{ name | camelCase }}_{{ idName }}: {{ name | camelCase }}?.{{ idName }},
					{{ name | camelCase }}_{{ fieldInfo.fieldName }}: args
				}).then((result) => {
					if (result.errors) {
						console.error(result.errors);
						errors = buildGraphQLErrors(result.errors);
						const globalError = buildGlobalGraphQLErrorMessage(result.errors);
						if (globalError) {
							modal.open({
								title: $LL.{{ appName }}.message.requestFailed(),
								description: globalError
							});
						}
					} else {
						toast.success($LL.{{ appName }}.message.requestSuccess());
						ot();
					}
				});
			})
			.catch((validErrors) => {
				errors = validErrors.{{ fieldInfo.fieldName }}.iterms;
			});
	};
</script>

<Card>
	<CardBody>
		<{{ fieldObjectInfo.name }}Table
			showUnbindButton={true}
			showEditButton={true}
			showCreateButton={true}
			showBackButton={$canBack}
			showSearchInput={true}
			value={nodes}
			bind:args
			bind:orderBy
			{errors}
			isFetching={$query_{{ name | camelCase }}_{{ fieldInfo.fieldName }}Connection_Store.isFetching}
			isMutating={$mutation_{{ name | camelCase }}_{{ fieldInfo.fieldName }}_Store.isFetching || $mutation_{{ fieldObjectInfo.name | camelCase }}_Store.isFetching}
			fields={% raw %}{{{% endraw %}
				{%- for field in fieldObjectInfo.fields %}
				{{ field.fieldName }}: {
					readonly: !permissions.auth('{{ fieldObjectInfo.name }}::{{ field.fieldName }}::WRITE'),
					disabled: !permissions.auth('{{ fieldObjectInfo.name }}::{{ field.fieldName }}::WRITE'),
					hidden: !permissions.auth('{{ fieldObjectInfo.name }}::{{ field.fieldName }}::READ')
				}{% if forloop.last == false %},{% endif %}
				{%- endfor %}
			{% raw %}}}{% endraw %}
			on:search={(e) => {
				if (e.detail.value) {
					args = {
						cond: 'OR',
						{%- for field in fieldObjectInfo.fields %}
						{%- if field.isScalarType and field.inQueryArgs and field.fieldTypeName == 'String' %}
						{{ field.fieldName }}: { opr: 'LK', val: e.detail.value },
						{%- endif %}
						{%- endfor %}
						first: pageSize,
						offset: 0
					};
				} else {
					args = { first: pageSize, offset: 0 };
				}
				query();
			{% raw %}}}{% endraw %}
			on:query={(e) => query()}
			on:save={(e) => {
				if (e.detail.value && !Array.isArray(e.detail.value)) {
					mutation(e.detail.value);
				}
			{% raw %}}}{% endraw %}
			on:edit={(e) => {
				if (e.detail.value && !Array.isArray(e.detail.value)) {
					to(`../../{{ fieldObjectInfo.name | paramCase }}/${e.detail.value.{{ fieldObjectInfo.idName }}}`, e.detail.value.{% if fieldObjectInfo.isNamed %}name{% else %}{{ fieldObjectInfo.idName }}{% endif %});
				}
			{% raw %}}}{% endraw %}
			on:select={(e) => {
				if (Array.isArray(e.detail.value)) {
					merge(e.detail.value);
				} else {
					merge([e.detail.value]);
				}
			}}
			on:remove={(e) => {
				if (e.detail.value) {
					modal.open({
						title: $LL.{{ appName }}.components.modal.removeModalTitle(),
						confirm: () => {
							if (Array.isArray(e.detail.value)) {
								mutation({
									where: { {{ fieldObjectInfo.idName }}: { opr: 'IN', arr: e.detail.value.map((node) => node?.{{ fieldObjectInfo.idName }}) } },
									isDeprecated: true
								});
							} else {
								mutation({
									where: { {{ fieldObjectInfo.idName }}: { val: e.detail.value?.{{ fieldObjectInfo.idName }} } },
									isDeprecated: true
								});
							}
							return true;
						}
					});
				}
			{% raw %}}}{% endraw %}
			on:unbind={(e) => {
				modal.open({
					title: $LL.{{ appName }}.components.modal.unbindModalTitle(),
					confirm: () => {
						if (Array.isArray(e.detail.value)) {
							merge(
								e.detail.value.map((node) => ({
									where: { {{ fieldObjectInfo.idName }}: { val: node?.{{ fieldObjectInfo.idName }} } },
									isDeprecated: true
								}))
							);
						} else {
							merge([
								{
									where: { {{ fieldObjectInfo.idName }}: { val: e.detail.value?.{{ fieldObjectInfo.idName }} } },
									isDeprecated: true
								}
							]);
						}
						return true;
					}
				});
			{% raw %}}}{% endraw %}
			on:create={(e) => to('../../{{ fieldObjectInfo.name | paramCase }}/_', '_')}
			on:goto={(e) => to(`../../{{ fieldObjectInfo.name | paramCase }}/${e.detail.path}`, e.detail.name)}
			on:back={(e) => ot()}
			{%- if hasFileField %}
			on:upload={(e) => {
				mutation_singleUpload_Store.fetch({ file: e.detail.file }).then((result) =>
					e.detail.then(result.data?.singleUpload)
				);
			{% raw %}}}{% endraw %}
			{%- endif %}
		/>
		<div class="divider" />
		<Pagination
			bind:pageSize
			bind:pageNumber
			{totalCount}
			on:pageChange={(e) => query()}
			on:sizeChange={(e) => query(1)}
		/>
	</CardBody>
</Card>
