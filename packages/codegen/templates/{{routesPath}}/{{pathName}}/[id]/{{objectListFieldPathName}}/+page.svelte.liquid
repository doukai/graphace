<script lang="ts">
	import { ot, to, urlName, canBack } from '~/lib/stores/useNavigate';
	import { page } from '$app/stores';
	{%- if connectionField %}
	import {{ objectFieldTypeName }}ConnectionTable from '~/{{ tablePath }}/{{ objectFieldTypeName | paramCase }}/{{ objectFieldTypeName }}ConnectionTable.svelte';
	{%- else %}
	import {{ objectFieldTypeName }}Table from '~/{{ tablePath }}/{{ objectFieldTypeName | paramCase }}/{{ objectFieldTypeName }}Table.svelte';
	{%- endif %}
	import type { __Schema, __Type, __TypeKind } from '@graphace/graphql/types';
	import type { Errors, GraphQLError } from '@graphace/commons/types';
	import type { {{ mutationTypeName }}{{ objectFieldTypeName }}Args, {% if connectionField %}{{ queryTypeName }}{{ objectFieldTypeName }}ConnectionArgs{% else %}{{ queryTypeName }}{{ objectFieldTypeName }}ListArgs{% endif %}, {{ objectFieldTypeName }} } from '~/{{ schemaTypesPath }}';
	import { Query_{{ name | camelCase }}_{{ objectFieldName }}Store, Mutation_{{ objectFieldTypeName | camelCase }}Store, Mutation_{{ name | camelCase }}_{{ objectFieldName }}Store } from '$houdini';
	import type { PageData } from './$houdini';
	import { validateMutation } from '~/lib/utils';
	import LL from '$i18n/i18n-svelte';
	import { locale } from '$i18n/i18n-svelte';

	export let data: PageData;
	$: urlName($page.url, $LL.graphql.objects.{{ name }}.fields.{{ objectFieldName }}.name());
	$: {{ idName }} = data.{{ idName }} as string;
	$: Query_{{ name | camelCase }}_{{ objectFieldName }} = data.Query_{{ name | camelCase }}_{{ objectFieldName }} as Query_{{ name | camelCase }}_{{ objectFieldName }}Store;
	$: {{ name | camelCase }} = $Query_{{ name | camelCase }}_{{ objectFieldName }}.data?.{{ name | camelCase }};
	{%- if connectionField %}
	$: nodes = $Query_{{ name | camelCase }}_{{ objectFieldName }}.data?.{{ name | camelCase }}?.{{ objectFieldName }}Connection?.edges?.map((edge) => edge?.node);
	$: totalCount = $Query_{{ name | camelCase }}_{{ objectFieldName }}.data?.{{ name | camelCase }}?.{{ objectFieldName }}Connection?.totalCount || 0;
	{%- else %}
	$: nodes = $Query_{{ name | camelCase }}_{{ objectFieldName }}.data?.{{ name | camelCase }}?.{{ objectFieldName }};
	{%- endif %}
	const Mutation_{{ objectFieldTypeName | camelCase }} = new Mutation_{{ objectFieldTypeName | camelCase }}Store();
	const Mutation_{{ name | camelCase }}_{{ objectFieldName }} = new Mutation_{{ name | camelCase }}_{{ objectFieldName }}Store();
	let errors: Record<number, Errors> = {};

	const fetch = (
		event: CustomEvent<{
			{%- if connectionField %}
			args: {{ queryTypeName }}{{ objectFieldTypeName }}ConnectionArgs;
			{%- else %}
			args: {{ queryTypeName }}{{ objectFieldTypeName }}ListArgs;
			{%- endif %}
			then: (data: ({{ objectFieldTypeName }} | null | undefined)[] | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		}>
	) => {
		Query_{{ name | camelCase }}_{{ objectFieldName }}.fetch({
			variables: { {{ name | camelCase }}_{{ idName }}: { val: {{ name | camelCase }}?.{{ idName }} }, ...event.detail.args }
		})
			.then((result) => {
				{%- if connectionField %}
				event.detail.then(result.data?.{{ name | camelCase }}?.{{ objectFieldName }}Connection?.edges?.map((edge) => edge?.node));
				{%- else %}
				event.detail.then(result.data?.{{ name | camelCase }}?.{{ objectFieldName }});
				{%- endif %}
				if (result.errors) {
					event.detail.catch(result.errors);
				}
			});
	};

	const mutation = (
		event: CustomEvent<{
			args: {{ mutationTypeName }}{{ objectFieldTypeName }}Args;
			then: (data: {{ objectFieldTypeName }} | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		}>
	) => {
		const row = nodes?.map((node) => node?.{{ idName }})?.indexOf(event.detail.args.{{ idName }} || event.detail.args.where?.{{ idName }}?.val || undefined);
		validateMutation('{{ objectFieldTypeName }}', event.detail.args, $locale)
			.then((data) => {
				if (row !== -1 && row !== undefined && errors[row]) {
					errors[row].iterms = {};
				}
				Mutation_{{ objectFieldTypeName | camelCase }}.mutate(event.detail.args)
					.then((result) => {
						event.detail.then(result?.data?.{{ objectFieldTypeName | camelCase }});
						if (result.errors) {
							event.detail.catch(result.errors);
						}
					});
			})
			.catch((validErrors) => {
				if (row !== -1 && row !== undefined) {
					errors[row] = { errors: errors[row]?.errors, iterms: validErrors };
				}
			});
	};

	const parentMutation = (
		event: CustomEvent<{
			args: {{ mutationTypeName }}{{ objectFieldTypeName }}Args[];
			then: (data: {{ objectFieldTypeName }}[] | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		}>
	) => {
		validateMutation('{{ name }}', { where: { {{ idName }}: { val: {{ idName }} }}, {{ objectFieldName }}: event.detail.args }, $locale)
			.then((data) => {
				errors = {};
				Mutation_{{ name | camelCase }}_{{ objectFieldName }}.mutate({
					{{ name | camelCase }}_{{ idName }}: {{ idName }},
					{{ name | camelCase }}_{{ objectFieldName }}: event.detail.args,
					mergeToList: ['{{ objectFieldName }}']
				})
					.then((result) => {
						event.detail.then(undefined);
						if (result.errors) {
							event.detail.catch(result.errors);
						}
					});
			})
			.catch((validErrors) => {
				errors = validErrors.{{ objectFieldName }}.iterms;
			});
	};

	const edit = (
		event: CustomEvent<{
			id: string;
		}>
	) => {
		to(`../../{{ objectFieldTypeName | paramCase }}/${event.detail.id}`);
	};

	const create = (event: CustomEvent<{}>) => {
		to(`./{{ objectFieldName | paramCase }}/_`);
	};
	
	const gotoField = (event: CustomEvent<{ path: string; name: string; }>) => {
		to(`../../{{ objectFieldTypeName | paramCase }}/${event.detail.path}`);
	};

	const gotoSelect = (event: CustomEvent<{}>) => {
		to(`./{{ objectFieldName | paramCase }}/__`);
	};

	const back = (event: CustomEvent<{}>) => {
		ot();
	};

</script>
{%- if connectionField %}
<{{ objectFieldTypeName }}ConnectionTable
	showSaveButton={false}
	showRemoveButton={false}
	showUnbindButton={true}
	showGotoSelectButton={true}
	showBackButton={$canBack}
	{nodes}
	{totalCount}
	{errors}
	isFetching={$Query_{{ name | camelCase }}_{{ objectFieldName }}.fetching}
	on:fetch={fetch}
	on:mutation={mutation}
	on:parentMutation={parentMutation}
	on:edit={edit}
	on:create={create}
	on:gotoField={gotoField}
	on:gotoSelect={gotoSelect}
	on:back={back}
/>
{%- else %}
<{{ objectFieldTypeName }}Table
	showSaveButton={false}
	showRemoveButton={false}
	showUnbindButton={true}
	showGotoSelectButton={true}
	showBackButton={$canBack}
	{nodes}
	{errors}
	isFetching={$Query_{{ name | camelCase }}_{{ objectFieldName }}.fetching}
	on:fetch={fetch}
	on:mutation={mutation}
	on:parentMutation={parentMutation}
	on:edit={edit}
	on:create={create}
	on:gotoField={gotoField}
	on:gotoSelect={gotoSelect}
	on:back={back}
/>
{%- endif %}
