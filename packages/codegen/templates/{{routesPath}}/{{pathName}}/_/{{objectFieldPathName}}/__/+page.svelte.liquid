<script lang="ts">
	import { ot, to, urlName, canBack, PageType } from '~/lib/stores/useNavigate';
	import { page } from '$app/stores';
	import { type Errors, updateNodeParam, updateErrorsParam, getNodeParam, getErrorsParam } from '@graphace/commons';
	import type { GraphQLError } from '@graphace/graphql';
	import { Card } from '@graphace/ui';
	{%- if connectionField %}
	import {{ objectFieldTypeName }}SelectConnectionTable from '~/{{ tablePath }}/{{ objectFieldTypeName | paramCase }}/{{ objectFieldTypeName }}SelectConnectionTable.svelte';
	{%- else %}
	import {{ objectFieldTypeName }}SelectTable from '~/{{ tablePath }}/{{ objectFieldTypeName | paramCase }}/{{ objectFieldTypeName }}SelectTable.svelte';
	{%- endif %}
	import type { {{ objectFieldTypeName }}, {% if connectionField %}{{ queryTypeName }}{{ objectFieldTypeName }}ConnectionArgs{% else %}{{ queryTypeName }}{{ objectFieldTypeName }}ListArgs{% endif %}, {{ mutationTypeName }}{{ objectFieldTypeName }}Args } from '~/{{ schemaTypesPath }}';
	import { {% if connectionField %}Query_{{ objectFieldTypeName | camelCase }}ConnectionStore{% else %}Query_{{ objectFieldTypeName | camelCase }}ListStore{% endif %}, Mutation_{{ objectFieldTypeName | camelCase }}Store } from '$houdini';
	import type { PageData } from './$houdini';
	import { validateMutation } from '~/lib/utils';
	import { locale } from '$i18n/i18n-svelte';
	import LL from '$i18n/i18n-svelte';

	export let data: PageData;
	$: urlName($page.url, $LL.graphql.objects.{{ name }}.fields.{{ objectFieldName }}.name(), PageType.SELECT);
	$: errors = data.errors as Record<number, Errors>;
	{%- if connectionField %}
	$: Query_{{ objectFieldTypeName | camelCase }}Connection = data.Query_{{ objectFieldTypeName | camelCase }}Connection as Query_{{ objectFieldTypeName | camelCase }}ConnectionStore;
	$: nodes = $Query_{{ objectFieldTypeName | camelCase }}Connection.data?.{{ objectFieldTypeName | camelCase }}Connection?.edges?.map((edge) => edge?.node);
	$: totalCount = $Query_{{ objectFieldTypeName | camelCase }}Connection.data?.{{ objectFieldTypeName | camelCase }}Connection?.totalCount || 0;
	{%- else %}
	$: Query_{{ objectFieldTypeName | camelCase }}List = data.Query_{{ objectFieldTypeName | camelCase }}List as Query_{{ objectFieldTypeName | camelCase }}ListStore;
	$: nodes = $Query_{{ objectFieldTypeName | camelCase }}List.data?.{{ objectFieldTypeName | camelCase }}List;
	{%- endif %}
	const Mutation_{{ objectFieldTypeName | camelCase }} = new Mutation_{{ objectFieldTypeName | camelCase }}Store();

	const fetch = (
		event: CustomEvent<{
			{%- if connectionField %}
			args: {{ queryTypeName }}{{ objectFieldTypeName }}ConnectionArgs;
			{%- else %}
			args: {{ queryTypeName }}{{ objectFieldTypeName }}ListArgs;
			{%- endif %}
			then: (data: ({{ objectFieldTypeName }} | null | undefined)[] | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		}>
	) => {
		{%- if connectionField %}
		Query_{{ objectFieldTypeName | camelCase }}Connection.fetch({ variables: event.detail.args })
		{%- else %}
		Query_{{ objectFieldTypeName | camelCase }}List.fetch({ variables: event.detail.args })
		{%- endif %}
			.then((result) => {
			{%- if connectionField %}
				event.detail.then(result.data?.{{ objectFieldTypeName | camelCase }}Connection?.edges?.map((edge) => edge?.node));
			{%- else %}
				event.detail.then(result.data?.{{ objectFieldTypeName | camelCase }}List);
			{%- endif %}
				if (result.errors) {
					event.detail.catch(result.errors);
				}
			});
	};

	const mutation = (
		event: CustomEvent<{
			args: {{ mutationTypeName }}{{ objectFieldTypeName }}Args;
			then: (data: {{ objectFieldTypeName }} | null | undefined) => void;
			catch: (errors: GraphQLError[]) => void;
		}>
	) => {
		const row = nodes?.map((node) => node?.{{ objectFieldTypeIdName }})?.indexOf(event.detail.args.{{ objectFieldTypeIdName }} || event.detail.args.where?.{{ objectFieldTypeIdName }}?.val || undefined);
		validateMutation('{{ objectFieldTypeName }}', event.detail.args, $locale)
			.then((data) => {
				if (row !== -1 && row !== undefined && errors[row]) {
					errors[row].iterms = {};
				}
				Mutation_{{ objectFieldTypeName | camelCase }}.mutate(event.detail.args)
					.then((result) => {
						event.detail.then(result?.data?.{{ objectFieldTypeName | camelCase }});
						if (result.errors) {
							event.detail.catch(result.errors);
						}
					});
			})
			.catch((validErrors) => {
				if (row !== -1 && row !== undefined) {
					errors[row] = { errors: errors[row]?.errors, iterms: validErrors };
				}
			});
	};

	const select = (
		event: CustomEvent<{
			selected: {{ mutationTypeName }}{{ objectFieldTypeName }}Args | null | undefined | ({{ mutationTypeName }}{{ objectFieldTypeName }}Args | null | undefined)[];
			then: () => void;
			catch: (errors: GraphQLError[]) => void;
		}>
	) => {
		if (!Array.isArray(event.detail.selected)) {
			ot({
				node: updateNodeParam($page.url, event.detail.selected),
				errors: updateErrorsParam($page.url, errors)
			});
		}
	};

	const back = (event: CustomEvent<{}>) => {
		ot({
			node: getNodeParam($page.url),
			errors: getErrorsParam($page.url)
		});
	};
</script>

<Card>
	{%- if connectionField %}
	<{{ objectFieldTypeName }}SelectConnectionTable
		multipleSelect={false}
		mutate={false}
		showBackButton={$canBack}
		{nodes}
		{totalCount}
		{errors}
		isFetching={$Query_{{ objectFieldTypeName | camelCase }}Connection.fetching}
		on:fetch={fetch}
		on:mutation={mutation}
		on:select={select}
		on:back={back}
	/>
	{%- else %}
	<{{ objectFieldTypeName }}SelectTable
		multipleSelect={false}
		mutate={false}
		showBackButton={$canBack}
		{nodes}
		{errors}
		isFetching={$Query_{{ objectFieldTypeName | camelCase }}List.fetching}
		on:fetch={fetch}
		on:mutation={mutation}
		on:select={select}
		on:back={back}
	/>
	{%- endif %}
</Card>
