<script lang="ts">
	import { page } from '$app/stores';
	import { Card, urlName } from '@graphace/ui';
	import {{ name }}Bar from '~/{{ aggPath }}/{{ name | paramCase }}/{{ name }}Bar.svelte';
	import {{ name }}Line from '~/{{ aggPath }}/{{ name | paramCase }}/{{ name }}Line.svelte';
	import {{ name }}Pie from '~/{{ aggPath }}/{{ name | paramCase }}/{{ name }}Pie.svelte';
	import {{ name }}AggTable from '~/{{ aggPath }}/{{ name | paramCase }}/{{ name }}AggTable.svelte';
	import type { {{ name }}ConnectionQueryStore } from '~/{{ storesPath }}/{{ name | paramCase }}/{{ name | camelCase }}QueryStore';
	import type { PageData } from './$houdini';
	import LL from '$i18n/i18n-svelte';

	export let data: PageData;
	$: urlName($page.url, $LL.graphql.objects.{{ name }}.name());

	$: fields = data.fields;
	$: queryArguments = data.queryArguments;
	$: showHeader = data.showHeader;
	$: showFooter = data.showFooter;
	$: showOptionButton = data.showOptionButton;
	$: showFilterButton = data.fields;
	$: showBookmarkButton = data.showBookmarkButton;

	const {{ name }}ConnectionQuery = data.{{ name }}ConnectionQuery as {{ name }}ConnectionQueryStore;

	const components: Record<string, any> = {
		bar: {{ name }}Bar,
		line: {{ name }}Line,
		pie: {{ name }}Pie,
		table: {{ name }}AggTable
	};

	$: component = components[data.type];
</script>

<Card>
	<svelte:component
		this={component}
		isFetching={${{ name }}ConnectionQuery.isFetching}
		connection={${{ name }}ConnectionQuery.response.data?.{{ name | camelCase }}Connection}
		{fields}
		{queryArguments}
		{showHeader}
		{showFooter}
		{showOptionButton}
		{showFilterButton}
		{showBookmarkButton}
		on:query={(e) => {{ name }}ConnectionQuery.fetch(e.detail.fields, e.detail.queryArguments)}
	/>
</Card>
