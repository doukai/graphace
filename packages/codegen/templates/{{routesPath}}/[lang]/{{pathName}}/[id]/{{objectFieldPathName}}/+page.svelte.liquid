<script lang="ts">
	import { ot, to } from '~/lib/stores/useNavigate';
	import { page } from '$app/stores';
	import {{ objectFieldTypeName }}Form from '~/{{ formPath }}/{{ objectFieldTypeName | paramCase }}/{{ objectFieldTypeName }}Form.svelte';
	import {{ objectFieldTypeName }}CreateForm from '~/{{ formPath }}/{{ objectFieldTypeName | paramCase }}/{{ objectFieldTypeName }}CreateForm.svelte';
	import type { __Schema, __Type, __TypeKind } from '@graphace/graphql/types';
	import type { Errors } from '@graphace/commons/types';
	import type { MutationType{{ objectFieldTypeName }}Args, {{ objectFieldTypeName }} } from '~/{{ schemaTypesPath }}';
	import { updateNodeParam, updateErrorsParam, getChildPathParam } from '@graphace/commons/utils/url-util';
	import { Query_{{ name | camelCase }}_{{ objectFieldName }}Store, Mutation_{{ name | camelCase }}_{{ objectFieldName }}Store } from '$houdini';
	import type { PageData } from './$houdini';
	import { validate } from '@graphace/graphql/schema/json-schema';
	import { locale } from '$i18n/i18n-svelte';

	export let data: PageData;
	$: createNode = data.node as MutationType{{ objectFieldTypeName }}Args;
	$: createErrors = data.errors as Record<string, Errors>;

	$: Query_{{ name | camelCase }}_{{ objectFieldName }} = data.Query_{{ name | camelCase }}_{{ objectFieldName }} as Query_{{ name | camelCase }}_{{ objectFieldName }}Store;
	$: {{ name | camelCase }} = $Query_{{ name | camelCase }}_{{ objectFieldName }}.data?.{{ name | camelCase }};
	$: node = {{ name | camelCase }}?.{{ objectFieldName }};
	const Mutation_{{ name | camelCase }}_{{ objectFieldName }} = new Mutation_{{ name | camelCase }}_{{ objectFieldName }}Store();
	let errors: Record<number, Errors> = {};

	const mutation = (
		event: CustomEvent<{
			args: MutationType{{ objectFieldTypeName }}Args;
			update?: boolean;
			skipNullArguments?: boolean;
			then: (data: {{ objectFieldTypeName }} | null | undefined) => void;
			catch: (errors: Errors) => void;
		}>
	) => {
		validate('{{ objectFieldTypeName }}', event.detail.args, event.detail.update, $locale)
			.then((data) => {
				errors = {};
				Mutation_{{ name | camelCase }}_{{ objectFieldName }}.mutate({
					{{ name | camelCase }}_{{ idName }}: {{ name | camelCase }}?.{{ idName }},
					{{ name | camelCase }}_{{ objectFieldName }}: event.detail.args,
					update: event.detail.update,
					skipNullArguments: event.detail.skipNullArguments
				})
					.then((result) => {
						event.detail.then(result?.data?.{{ name | camelCase }}?.{{ objectFieldName }});
					})
					.catch((errors) => {
						event.detail.catch(errors);
					});
			})
			.catch((validErrors) => {
				errors = validErrors;
			});
	};

	const back = (event: CustomEvent<{}>) => {
		ot();
	};

	const gotoField = (event: CustomEvent<{ path: string; name: string; }>) => {
		to(`../../{{ objectFieldTypeName | paramCase }}/${event.detail.path}`, {
			node: updateNodeParam($page.url, node),
			errors: updateErrorsParam($page.url, errors),
			path: getChildPathParam($page.url, event.detail.name)
		});
	};
</script>

{#if node}
	<{{ objectFieldTypeName }}Form
		{node}
		{errors}
		isFetching={$Query_{{ name | camelCase }}_{{ objectFieldName }}.fetching}
		on:mutation={mutation}
		on:back={back}
		on:gotoField={gotoField}
	/>
{:else}
	<{{ objectFieldTypeName }}CreateForm
		node={createNode}
		errors={createErrors}
		on:mutation={mutation}
		on:back={back}
		on:gotoField={gotoField}
	/>
{/if}