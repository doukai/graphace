<script lang="ts">
	import { ot, to } from '~/lib/stores/useNavigate';
	import { page } from '$app/stores';
	import {{ objectFieldTypeName }}CreateTable from '~/{{ tablePath }}/{{ objectFieldTypeName | paramCase }}/{{ objectFieldTypeName }}CreateTable.svelte';
	import type { __Schema, __Type, __TypeKind } from '@graphace/graphql/types';
	import type { MutationType{{ objectFieldTypeName }}Args } from '~/{{ schemaTypesPath }}';
	import {
		updateNodeParam,
		getChildPathParam
	} from '~/lib/utils';
	import type { PageData } from './$houdini';

	export let data: PageData;
	$: nodes = data.nodes as (MutationType{{ objectFieldTypeName }}Args | null | undefined)[] || [];

	const edit = (
		event: CustomEvent<{
			row: number;
		}>
	) => {
		to(`../../{{ objectFieldTypeName | camelCase }}/_`, {
			node: updateNodeParam($page.url, nodes),
			path: getChildPathParam($page.url, event.detail.row)
		});
	};

	const create = (event: CustomEvent<{}>) => {
		to(`../../{{ objectFieldTypeName | camelCase }}/_`, {
			node: updateNodeParam($page.url, {}),
			path: getChildPathParam($page.url, nodes.length)
		});
	};

	const gotoField = (event: CustomEvent<{ path: string; name: string }>) => {
		to(`../../{{ objectFieldTypeName | camelCase }}/${event.detail.path}`, {
			node: updateNodeParam($page.url, nodes),
			path: getChildPathParam($page.url, event.detail.name)
		});
	};
</script>
<{{ objectFieldTypeName }}CreateTable {nodes} on:edit={edit} on:create={create} on:gotoField={gotoField} />
