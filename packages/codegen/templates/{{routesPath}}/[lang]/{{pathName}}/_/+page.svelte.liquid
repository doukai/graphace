<script lang="ts">
	import { ot, to } from '~/lib/stores/useNavigate';
	import { page } from '$app/stores';
	import {{ name }}CreateForm from '~/{{ formPath }}/{{ name | paramCase }}/{{ name }}CreateForm.svelte';
	import type { __Schema, __Type, __TypeKind } from '@graphace/graphql/types';
	import type { Error } from '@graphace/commons/types';
	import { updateNodeParam, updateErrorsParam, getChildPathParam, getNodeParam, getErrorsParam } from '~/lib/utils';
	import { Mutation_{{ name | camelCase }}Store } from '$houdini';
	import type { MutationType{{ name }}Args, {{ name }} } from '~/{{ schemaTypesPath }}';
	import type { PageData } from './$houdini';
	import { validate } from '@graphace/graphql/schema/JsonSchema';
	import { locale } from '~/i18n/i18n-svelte';

	export let data: PageData;
	$: node = data.node as MutationType{{ name }}Args;
	$: errors = data.errors as Record<number, Error>;

	const Mutation_{{ name | camelCase }} = new Mutation_{{ name | camelCase }}Store();

	const mutation = (
		event: CustomEvent<{
			args: MutationType{{ name }}Args;
			update?: boolean;
			then: (data: {{ name }} | null | undefined) => void;
			catch: (error: Error) => void;
		}>
	) => {
		validate('{{ name }}', event.detail.args, event.detail.update, $locale)
			.then((data) => {
				Mutation_{{ name | camelCase }}.mutate({ ...event.detail.args, update: event.detail.update })
					.then((result) => {
						event.detail.then(result?.{{ name | camelCase }});
					})
					.catch((error) => {
						event.detail.catch(error);
					});
			})
			.catch((validErrors) => {
				errors = validErrors;
			});
	};

	const back = (event: CustomEvent<{}>) => {
		ot({
			node: getNodeParam($page.url),
			errors: getErrorsParam($page.url)
		});
	};

	const gotoField = (event: CustomEvent<{ path: string; name: string; }>) => {
		to(`./${event.detail.path}`, {
			node: updateNodeParam($page.url, node),
			errors: updateErrorsParam($page.url, errors),
			path: getChildPathParam($page.url, event.detail.name)
		});
	};
</script>

<{{ name }}CreateForm {node} {errors} on:mutation={mutation} on:back={back} on:gotoField={gotoField} />
