<script lang="ts">
	import {{ name }}Form from '~/{{ formPath }}/{{ name | paramCase }}/{{ name }}Form.svelte';
	import type { __Schema, __Type, __TypeKind } from '@graphace/graphql/types';
	import type { Error } from '@graphace/commons/types';
	import { Query_{{ name | camelCase }}Store, Mutation_{{ name | camelCase }}Store } from '$houdini';
	import type { PageData } from './$houdini';
	import type { MutationType{{ name }}Args, {{ name }} } from '~/{{ schemaTypesPath }}';

	export let data: PageData;
	$: Query_{{ name | camelCase }} = data.Query_{{ name | camelCase }} as Query_{{ name | camelCase }}Store;
	const Mutation_{{ name | camelCase }} = new Mutation_{{ name | camelCase }}Store();

	const mutation = (
		event: CustomEvent<{
			args: MutationType{{ name }}Args;
			then: (data: {{ name }} | null | undefined) => void;
			catch: (error: Error) => void;
		}>
	) => {
		Mutation_{{ name | camelCase }}.mutate(event.detail.args)
			.then((result) => {
				event.detail.then(result?.{{ name | camelCase }});
			})
			.catch((error) => {
				event.detail.catch(error);
			});
	};
</script>

<{{ name }}Form node={$Query_{{ name | camelCase }}.data?.{{ name | camelCase }}} isFetching={$Query_{{ name| camelCase }}.fetching} on:mutation={mutation} />
