<script lang="ts">
	import {{ name }}Form from '~/{{ formPath }}/{{ name | paramCase }}/{{ name }}Form.svelte';
	import type { __Schema, __Type, __TypeKind } from '@graphace/graphql/types';
	import type { Error } from '@graphace/commons/types';
	import type { Query{{ name }}Store } from '$houdini';
	import { GQL_Mutation{{ name }} } from '$houdini';
	import type { PageData } from './$houdini';
	import type { MutationType{{ name }}Args, {{ name }} } from '~/{{ schemaTypesPath }}';

	export let data: PageData;
	$: Query{{ name }} = data.Query{{ name }} as Query{{ name }}Store;

	const mutation = (
		event: CustomEvent<{
			args: MutationType{{ name }}Args;
			then: (data: {{ name }} | null | undefined) => void;
			catch: (error: Error) => void;
		}>
	) => {
		GQL_Mutation{{ name }}.mutate(event.detail.args)
			.then((result) => {
				event.detail.then(result?.{{ name | camelCase }});
			})
			.catch((error) => {
				event.detail.catch(error);
			});
	};
</script>

<{{ name }}Form node={$Query{{ name }}.data?.{{ name | camelCase }}} isFetching={$Query{{ name }}.isFetching} on:mutation={mutation} />
