import type { LoadEvent, RequestEvent } from '@sveltejs/kit';
import { type GraphQLStore } from "@graphace/ui-graphql";
import { createGraphQLQueryStore, fetchGraphQLQueryStore } from '~/utils';
import type { Query{{ objectFieldInfo.fieldTypeName | pascalCase }}{% if objectFieldInfo.isListType %}List{% endif %}Args, {{ fieldTypeName }} } from '~/{{ schemaTypesPath }}';

const query = /* GraphQL */ `query Query_{{ fieldName }}_{{ objectFieldInfo.fieldName }}(${{ fieldName }}_{{ fieldTypeIdName }}: String{% if objectFieldInfo.args and objectFieldInfo.args.length > 0 %}, {% for arg in objectFieldInfo.args %}${{ arg.inputName }}: {{ arg.inputType }}{% if forloop.last == false %}, {% endif %}{% endfor %}{% endif %}) {
  {{ fieldName }}({{ fieldTypeIdName }}: ${{ fieldName }}_{{ fieldTypeIdName }}) {
    {%- for field in fields %}
    {%- if field.isLeafType and field.isAggregate == false %}
    {{ field.fieldName }}
    {%- endif %}
    {%- endfor %}
    {{ objectFieldInfo.fieldName }}{% if objectFieldInfo.args and objectFieldInfo.args.length > 0 %}({% for arg in args %}{{ arg.inputName }}: ${{ arg.inputName }}{% if forloop.last == false %} {% endif %}{% endfor %}){% endif %} {
      {%- if objectFieldInfo.isConnection %}
      totalCount
      edges {
        node {
          {%- for field in objectFieldInfo.fields %}
          {%- if field.isLeafType and field.isAggregate == false %}
          {{ field.fieldName }}
          {%- elsif field.isFile %}
          {{ field.fieldName }} {
            id
            name
          }
          {%- elsif field.isNamed and field.isAggregate == false %}
          {{ field.fieldName }} {
            {{ field.fieldTypeIdName }}
            name
            description
          }
          {%- endif %}
          {%- endfor %}
        }
      }
      {%- else %}
      {%- for field in objectFieldInfo.fields %}
      {%- if field.isLeafType and field.isAggregate == false %}
      {{ field.fieldName }}
      {%- elsif field.isFile %}
      {{ field.fieldName }} {
        id
        name
      }
      {%- elsif field.isNamed and field.isAggregate == false %}
      {{ field.fieldName }} {
        {{ field.fieldTypeIdName }}
        name
        description
      }
      {%- endif %}
      {%- endfor %}
      {%- endif %}
    }
  }
}`;

export function createQuery_{{ fieldName }}_{{ objectFieldInfo.fieldName }}_Store(event: LoadEvent | RequestEvent): Query_{{ fieldName }}_{{ objectFieldInfo.fieldName }}_Store {
  return createGraphQLQueryStore<{{ fieldTypeName }}, { {{ fieldName }}_{{ fieldTypeIdName }}: string } & Query{{ objectFieldInfo.fieldTypeName | pascalCase }}{% if objectFieldInfo.isListType %}List{% endif %}Args>(query, event);
}

export async function fetchQuery_{{ fieldName }}_{{ objectFieldInfo.fieldName }}_Store(event: LoadEvent | RequestEvent, variables: { {{ fieldName }}_{{ fieldTypeIdName }}: string } & Query{{ objectFieldInfo.fieldTypeName | pascalCase }}{% if objectFieldInfo.isListType %}List{% endif %}Args): Promise<Query_{{ fieldName }}_{{ objectFieldInfo.fieldName }}_Store> {
  return fetchGraphQLQueryStore<{{ fieldTypeName }}, { {{ fieldName }}_{{ fieldTypeIdName }}: string } & Query{{ objectFieldInfo.fieldTypeName | pascalCase }}{% if objectFieldInfo.isListType %}List{% endif %}Args>(query, event, variables);
}

export type Query_{{ fieldName }}_{{ objectFieldInfo.fieldName }}_Store = GraphQLStore<{{ fieldTypeName }}, { {{ fieldName }}_{{ fieldTypeIdName }}: string } & Query{{ objectFieldInfo.fieldTypeName | pascalCase }}{% if objectFieldInfo.isListType %}List{% endif %}Args>;