import type { LoadEvent, RequestEvent } from '@sveltejs/kit';
import { type GraphQLStore } from "@graphace/ui-graphql";
import { createGraphQLQueryStore, fetchGraphQLQueryStore } from '~/utils';
{%- if args and args.length > 0 %}
import type { Query{{ fieldName | pascalCase }}Args } from '~/{{ schemaTypesPath }}';
{%- endif %}
{%- if isScalarType == false %}
import type { {{ fieldTypeName }} } from '~/{{ schemaTypesPath }}';
{%- endif %}

const query = /* GraphQL */ `query Query_{{ fieldName }}{% if args and args.length > 0 -%}({% for arg in args %}${{ arg.inputName }}: {{ arg.inputType }}{% if forloop.last == false %}, {% endif %}{% endfor %}){% endif %} {
  {{ fieldName }}{% if args and args.length > 0 %}({% for arg in args %}{{ arg.inputName }}: ${{ arg.inputName }}{% if forloop.last == false %} {% endif %}{% endfor %}){% endif %}
  {%- if fields and fields.length > 0 %} {
    {%- if isConnection %}
    totalCount
    edges {
      node { 
        {%- for field in fields %}
        {%- if field.isLeafType and field.isAggregate == false %}
        {{ field.fieldName }}
        {%- elsif field.isFile %}
        {{ field.fieldName }} {
          id
          name
        }
        {%- elsif field.isNamed and field.isAggregate == false %}
        {{ field.fieldName }}{% if field.isListType and field.isSelect == false %}(first: 3){% endif %} {
          {{ field.fieldTypeIdName }}
          name
          description
        }
        {%- endif %}
        {%- endfor %}
      }
    }
    {%- else %}
    {%- for field in fields %}
    {%- if field.isLeafType and field.isAggregate == false %}
    {{ field.fieldName }}
    {%- elsif field.isFile %}
    {{ field.fieldName }} {
      id
      name
    }
    {%- elsif isListType == false and field.isTable %}
    {{ field.fieldName }} {
      {%- for subField in field.fields %}
      {%- if subField.isLeafType and subField.isAggregate == false %}
      {{ subField.fieldName }}
      {%- elsif subField.isFile %}
      {{ subField.fieldName }} {
        id
        name
      }
      {%- elsif subField.isNamed and subField.isAggregate == false %}
      {{ subField.fieldName }}{% if subField.isListType and subField.isSelect == false %}(first: 3){% endif %} {
        {{ subField.fieldTypeIdName }}
        name
        description
      }
      {%- endif %}
      {%- endfor %}
    }
    {%- elsif field.isNamed and field.isAggregate == false %}
    {{ field.fieldName }}{% if field.isListType and field.isSelect == false %}(first: 3){% endif %} {
      {{ field.fieldTypeIdName }}
      name
      description
    }
    {%- endif %}
    {%- endfor %}
    {%- endif %}
  }
  {%- endif %}
}`;

export function createQuery_{{ fieldName }}_Store(event: LoadEvent | RequestEvent): Query_{{ fieldName }}_Store {
  return createGraphQLQueryStore<{{ tsTypeName }}{% if isListType %}[]{% endif %}, {% if args and args.length > 0 %}Query{{ fieldName | pascalCase }}Args{% else %}undefined{% endif %}>(query, event);
}

export async function fetchQuery_{{ fieldName }}_Store(event: LoadEvent | RequestEvent, variables{% if args == undefined or args.length == 0 %}?{% endif %}: {% if args and args.length > 0 %}Query{{ fieldName | pascalCase }}Args{% else %}undefined{% endif %}): Promise<Query_{{ fieldName }}_Store> {
  return fetchGraphQLQueryStore<{{ tsTypeName }}{% if isListType %}[]{% endif %}, {% if args and args.length > 0 %}Query{{ fieldName | pascalCase }}Args{% else %}undefined{% endif %}>(query, event, variables);
}

export type Query_{{ fieldName }}_Store = GraphQLStore<{{ tsTypeName }}{% if isListType %}[]{% endif %}, {% if args and args.length > 0 %}Query{{ fieldName | pascalCase }}Args{% else %}undefined{% endif %}>;