import type { LoadEvent } from '@sveltejs/kit';
import { type GraphQLStore } from "@graphace/ui-graphql";
import { createGraphQLQueryStore } from '~/utils';
{%- if args and args.length > 0 %}
import type { Query{{ name | pascalCase }}Args } from '~/{{ schemaTypesPath }}';
{%- endif %}
{%- if isScalar == false %}
import type { {{ fieldTypeName }} } from '~/{{ schemaTypesPath }}';
{%- endif %}

const query = /* GraphQL */ `query query_{{ name }}
  {%- if args and args.length > 0 -%}
  ({% for arg in args %}{% if arg.alias %}${{ arg.alias }}{% else %}${{ arg.name }}{% endif %}: {{ arg.type }}{% if forloop.last == false %}, {% endif %}{% endfor %})
  {%- endif %} {
  {{ name }}
    {%- if args and args.length > 0 %}({% for arg in args %}{{ arg.name }}: {% if arg.alias %}${{ arg.alias }}{% else %}${{ arg.name }}{% endif %}{% if forloop.last == false %} {% endif %}{% endfor %}){% endif %}
    {%- if isConnection %} {
    totalCount
    edges {
      node {
        {%- if fields %}
        {%- for field in fields %}
        {{ field.name }}
        {%- endfor %}
        {%- endif %}
        {%- if namedFields %}
        {%- for field in namedFields %}
        {%- if field.select %}
        {{ field.name }} {
          {{ field.fieldTypeIdName }}
          name
          description
        }
        {%- else %}
        {{ field.name }}{% if field.isListType %}(first: 3){% endif %} {
          name
          description
        }
        {%- endif %}
        {%- endfor %}
        {%- endif %}
        {%- if fileFields %}
        {%- for field in fileFields %}
        {{ field.name }} {
          id
          name
        }
        {%- endfor %}
        {%- endif %}
      }
    }
  }
    {%- else %}
    {%- if fields or namedFields or fileFields %} {
    {%- if fields %}
    {%- for field in fields %}
    {{ field.name }}
    {%- endfor %}
    {%- endif %}
    {%- if namedFields %}
    {%- for field in namedFields %}
    {%- if field.select %}
    {{ field.name }} {
      {{ field.fieldTypeIdName }}
      name
      description
    }
    {%- else %}
    {{ field.name }}{% if field.isListType %}(first: 3){% endif %} {
      name
      description
    }
    {%- endif %}
    {%- endfor %}
    {%- endif %}
    {%- if fileFields %}
    {%- for field in fileFields %}
    {{ field.name }} {
      id
      name
    }
    {%- endfor %}
    {%- endif %}
  }
    {%- endif %}
    {%- endif %}
}`;

export async function createQuery{{ name | pascalCase }}Store(event: LoadEvent, variables: {% if args and args.length > 0 %}Query{{ name | pascalCase }}Args{% else %}undefined{% endif %}): Promise<GraphQLStore<{{ tsTypeName }}{% if isList %}[]{% endif %}, {% if args and args.length > 0 %}Query{{ name | pascalCase }}Args{% else %}undefined{% endif %}>> {
  return createGraphQLQueryStore<{{ tsTypeName }}{% if isList %}[]{% endif %}, {% if args and args.length > 0 %}Query{{ name | pascalCase }}Args{% else %}undefined{% endif %}>(query, event, variables);
}