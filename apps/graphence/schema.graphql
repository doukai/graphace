directive @annotation(name: String!) on OBJECT

directive @class(exists: Boolean, name: String!) on OBJECT

directive @connection(agg: String, field: String) on FIELD_DEFINITION

directive @container on OBJECT

directive @cursor on FIELD_DEFINITION

directive @denyAll on FIELD | OBJECT

directive @fetch(anchor: Boolean, from: String!, protocol: Protocol, to: String, with: With) on FIELD_DEFINITION

directive @format(locale: String, value: String) on FIELD | FIELD_DEFINITION

directive @func(field: String, name: Func) on FIELD_DEFINITION

directive @grpc(name: String!) on OBJECT

directive @hide on FIELD | FIELD_DEFINITION

directive @implements(interfaces: [String]) on INPUT_OBJECT | OBJECT

directive @interface on INPUT_OBJECT | OBJECT

directive @invoke(async: Boolean = false, className: String, methodName: String, parameters: [InvokeParameter], returnClassName: String) on FIELD_DEFINITION | INPUT_OBJECT | MUTATION | QUERY | SUBSCRIPTION

directive @invokes(methods: [Invoke]) on FIELD_DEFINITION | INPUT_OBJECT | MUTATION | QUERY | SUBSCRIPTION

directive @jsonSchema(allOf: [JsonSchema], anyOf: [JsonSchema], const: String, contentEncoding: String, contentMediaType: String, dependentRequired: [Property], else: JsonSchema, enum: [String], exclusiveMaximum: Float, exclusiveMinimum: Float, format: String, if: JsonSchema, items: JsonSchema, maxItems: Int, maxLength: Int, maximum: Float, minItems: Int, minLength: Int, minimum: Float, multipleOf: Float, not: JsonSchema, oneOf: [JsonSchema], pattern: String, properties: [Property], then: JsonSchema, uniqueItems: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | OBJECT

directive @map(anchor: Boolean, from: String!, to: String, with: With) on FIELD_DEFINITION

directive @merge on FIELD

directive @options(autoIncrement: Boolean, decimals: Int, default: String, length: Int, protocol: Protocol = GRPC, type: String, unique: Boolean) on FIELD_DEFINITION

directive @package(name: String!) on FIELD_DEFINITION | MUTATION | OBJECT | QUERY | SUBSCRIPTION

directive @permitAll on FIELD | OBJECT

directive @rolesAllowed(roles: [String]) on FIELD | OBJECT

scalar BigDecimal

scalar BigInteger

input BooleanExpression {
  arr: [Boolean]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: Boolean
}

"""货物"""
type Cargo implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """货物ID"""
  id: ID!
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """货物名称"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """货物数量"""
  quantity: Int!
  quantityAvg: Int
  quantityCount: Int
  quantityMax: Int
  quantityMin: Int
  quantitySum: Int
  realmId: Int

  """货物种类"""
  type: String!
  typeCount: Int
  typeMax: String
  typeMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int

  """货物重量"""
  weight: Float!
  weightAvg: Float
  weightCount: Int
  weightMax: Float
  weightMin: Float
  weightSum: Float
}

type CargoConnection {
  edges: [CargoEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input CargoConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CargoExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: CargoOrderBy
  quantity: IntExpression
  realmId: IntExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  weight: FloatExpression
}

input CargoConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CargoExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: CargoOrderBy
  quantity: IntExpression
  realmId: IntExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  weight: FloatExpression
}

type CargoEdge {
  cursor: String
  node: Cargo
}

input CargoExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CargoExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  quantity: IntExpression
  realmId: IntExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  weight: FloatExpression
}

input CargoInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  name: String
  quantity: Int
  realmId: Int
  type: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  weight: Float
  where: CargoExpression
}

input CargoListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  list: [CargoInput]
  name: String
  quantity: Int
  realmId: Int
  type: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  weight: Float
  where: CargoExpression
}

input CargoListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CargoExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: CargoOrderBy
  quantity: IntExpression
  realmId: IntExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  weight: FloatExpression
}

input CargoListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CargoExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: CargoOrderBy
  quantity: IntExpression
  realmId: IntExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  weight: FloatExpression
}

input CargoMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: CargoInput
  isDeprecated: Boolean = false
  name: String
  quantity: Int
  realmId: Int
  type: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  weight: Float
  where: CargoExpression
}

input CargoOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  quantity: Sort
  realmId: Sort
  type: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
  weight: Sort
}

input CargoQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CargoExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  quantity: IntExpression
  realmId: IntExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  weight: FloatExpression
}

input CargoSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CargoExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  quantity: IntExpression
  realmId: IntExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  weight: FloatExpression
}

type CargoTransportRequestRelation implements Meta {
  cargo(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, quantity: IntExpression, realmId: IntExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, weight: FloatExpression): Cargo
  cargoRef: String
  cargoRefCount: Int
  cargoRefMax: String
  cargoRefMin: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  transportRequest(cargoTransportRequestRelation: CargoTransportRequestRelationExpression, cargoes: CargoExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: UserExpression, destination: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, origin: StringExpression, railwayTransport: RailwayTransportExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, transportRequestUserRelation: TransportRequestUserRelationExpression, truckTransports: TruckTransportExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportRequest
  transportRequestRef: String
  transportRequestRefCount: Int
  transportRequestRefMax: String
  transportRequestRefMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type CargoTransportRequestRelationConnection {
  edges: [CargoTransportRequestRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input CargoTransportRequestRelationConnectionQueryArguments {
  after: ID
  before: ID
  cargo: CargoExpression
  cargoRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CargoTransportRequestRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: CargoTransportRequestRelationOrderBy
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CargoTransportRequestRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  cargo: CargoExpression
  cargoRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CargoTransportRequestRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: CargoTransportRequestRelationOrderBy
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type CargoTransportRequestRelationEdge {
  cursor: String
  node: CargoTransportRequestRelation
}

input CargoTransportRequestRelationExpression {
  cargo: CargoExpression
  cargoRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CargoTransportRequestRelationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CargoTransportRequestRelationInput {
  cargo: CargoInput
  cargoRef: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  realmId: Int
  transportRequest: TransportRequestInput
  transportRequestRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: CargoTransportRequestRelationExpression
}

input CargoTransportRequestRelationListMutationArguments {
  cargo: CargoInput
  cargoRef: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  list: [CargoTransportRequestRelationInput]
  realmId: Int
  transportRequest: TransportRequestInput
  transportRequestRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: CargoTransportRequestRelationExpression
}

input CargoTransportRequestRelationListQueryArguments {
  after: ID
  before: ID
  cargo: CargoExpression
  cargoRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CargoTransportRequestRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: CargoTransportRequestRelationOrderBy
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CargoTransportRequestRelationListSubscriptionArguments {
  after: ID
  before: ID
  cargo: CargoExpression
  cargoRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CargoTransportRequestRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: CargoTransportRequestRelationOrderBy
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CargoTransportRequestRelationMutationArguments {
  cargo: CargoInput
  cargoRef: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: CargoTransportRequestRelationInput
  isDeprecated: Boolean = false
  realmId: Int
  transportRequest: TransportRequestInput
  transportRequestRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: CargoTransportRequestRelationExpression
}

input CargoTransportRequestRelationOrderBy {
  cargoRef: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  transportRequestRef: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input CargoTransportRequestRelationQueryArguments {
  cargo: CargoExpression
  cargoRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CargoTransportRequestRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CargoTransportRequestRelationSubscriptionArguments {
  cargo: CargoExpression
  cargoRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CargoTransportRequestRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

"""城市"""
type City implements Meta {
  """行政区划代码"""
  administrativeCode: String!
  administrativeCodeCount: Int
  administrativeCodeMax: String
  administrativeCodeMin: String

  """市"""
  city: String!

  """市简称"""
  cityAbbreviation: String!
  cityAbbreviationCount: Int
  cityAbbreviationMax: String
  cityAbbreviationMin: String

  """市代码"""
  cityCode: String!
  cityCodeCount: Int
  cityCodeMax: String
  cityCodeMin: String
  cityCount: Int
  cityMax: String
  cityMin: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """城市ID"""
  id: ID!
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """省"""
  province: String!

  """省简称"""
  provinceAbbreviation: String!
  provinceAbbreviationCount: Int
  provinceAbbreviationMax: String
  provinceAbbreviationMin: String

  """省代码"""
  provinceCode: String!
  provinceCodeCount: Int
  provinceCodeMax: String
  provinceCodeMin: String
  provinceCount: Int
  provinceMax: String
  provinceMin: String
  realmId: Int

  """单位名称"""
  unitName: String!
  unitNameCount: Int
  unitNameMax: String
  unitNameMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type CityConnection {
  edges: [CityEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input CityConnectionQueryArguments {
  administrativeCode: StringExpression
  after: ID
  before: ID
  city: StringExpression
  cityAbbreviation: StringExpression
  cityCode: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CityExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: CityOrderBy
  province: StringExpression
  provinceAbbreviation: StringExpression
  provinceCode: StringExpression
  realmId: IntExpression
  unitName: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CityConnectionSubscriptionArguments {
  administrativeCode: StringExpression
  after: ID
  before: ID
  city: StringExpression
  cityAbbreviation: StringExpression
  cityCode: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CityExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: CityOrderBy
  province: StringExpression
  provinceAbbreviation: StringExpression
  provinceCode: StringExpression
  realmId: IntExpression
  unitName: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type CityEdge {
  cursor: String
  node: City
}

input CityExpression {
  administrativeCode: StringExpression
  city: StringExpression
  cityAbbreviation: StringExpression
  cityCode: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CityExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  province: StringExpression
  provinceAbbreviation: StringExpression
  provinceCode: StringExpression
  realmId: IntExpression
  unitName: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CityInput {
  administrativeCode: String
  city: String
  cityAbbreviation: String
  cityCode: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  province: String
  provinceAbbreviation: String
  provinceCode: String
  realmId: Int
  unitName: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: CityExpression
}

input CityListMutationArguments {
  administrativeCode: String
  city: String
  cityAbbreviation: String
  cityCode: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  list: [CityInput]
  province: String
  provinceAbbreviation: String
  provinceCode: String
  realmId: Int
  unitName: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: CityExpression
}

input CityListQueryArguments {
  administrativeCode: StringExpression
  after: ID
  before: ID
  city: StringExpression
  cityAbbreviation: StringExpression
  cityCode: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CityExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: CityOrderBy
  province: StringExpression
  provinceAbbreviation: StringExpression
  provinceCode: StringExpression
  realmId: IntExpression
  unitName: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CityListSubscriptionArguments {
  administrativeCode: StringExpression
  after: ID
  before: ID
  city: StringExpression
  cityAbbreviation: StringExpression
  cityCode: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CityExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: CityOrderBy
  province: StringExpression
  provinceAbbreviation: StringExpression
  provinceCode: StringExpression
  realmId: IntExpression
  unitName: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CityMutationArguments {
  administrativeCode: String
  city: String
  cityAbbreviation: String
  cityCode: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: CityInput
  isDeprecated: Boolean = false
  province: String
  provinceAbbreviation: String
  provinceCode: String
  realmId: Int
  unitName: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: CityExpression
}

input CityOrderBy {
  administrativeCode: Sort
  city: Sort
  cityAbbreviation: Sort
  cityCode: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  province: Sort
  provinceAbbreviation: Sort
  provinceCode: Sort
  realmId: Sort
  unitName: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input CityQueryArguments {
  administrativeCode: StringExpression
  city: StringExpression
  cityAbbreviation: StringExpression
  cityCode: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CityExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  province: StringExpression
  provinceAbbreviation: StringExpression
  provinceCode: StringExpression
  realmId: IntExpression
  unitName: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type CityStationRelation implements Meta {
  city(administrativeCode: StringExpression, city: StringExpression, cityAbbreviation: StringExpression, cityCode: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, province: StringExpression, provinceAbbreviation: StringExpression, provinceCode: StringExpression, realmId: IntExpression, unitName: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): City
  cityRef: String
  cityRefCount: Int
  cityRefMax: String
  cityRefMin: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  station(city: CityExpression, cityStationRelation: CityStationRelationExpression, code: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, initials: StringExpression, name: StringExpression, pinyin: StringExpression, realmId: IntExpression, telegraphCode: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Station
  stationRef: String
  stationRefCount: Int
  stationRefMax: String
  stationRefMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type CityStationRelationConnection {
  edges: [CityStationRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input CityStationRelationConnectionQueryArguments {
  after: ID
  before: ID
  city: CityExpression
  cityRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CityStationRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: CityStationRelationOrderBy
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CityStationRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  city: CityExpression
  cityRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CityStationRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: CityStationRelationOrderBy
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type CityStationRelationEdge {
  cursor: String
  node: CityStationRelation
}

input CityStationRelationExpression {
  city: CityExpression
  cityRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CityStationRelationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CityStationRelationInput {
  city: CityInput
  cityRef: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  realmId: Int
  station: StationInput
  stationRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: CityStationRelationExpression
}

input CityStationRelationListMutationArguments {
  city: CityInput
  cityRef: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  list: [CityStationRelationInput]
  realmId: Int
  station: StationInput
  stationRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: CityStationRelationExpression
}

input CityStationRelationListQueryArguments {
  after: ID
  before: ID
  city: CityExpression
  cityRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CityStationRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: CityStationRelationOrderBy
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CityStationRelationListSubscriptionArguments {
  after: ID
  before: ID
  city: CityExpression
  cityRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CityStationRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: CityStationRelationOrderBy
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CityStationRelationMutationArguments {
  city: CityInput
  cityRef: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: CityStationRelationInput
  isDeprecated: Boolean = false
  realmId: Int
  station: StationInput
  stationRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: CityStationRelationExpression
}

input CityStationRelationOrderBy {
  cityRef: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  stationRef: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input CityStationRelationQueryArguments {
  city: CityExpression
  cityRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CityStationRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CityStationRelationSubscriptionArguments {
  city: CityExpression
  cityRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CityStationRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CitySubscriptionArguments {
  administrativeCode: StringExpression
  city: StringExpression
  cityAbbreviation: StringExpression
  cityCode: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [CityExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  province: StringExpression
  provinceAbbreviation: StringExpression
  provinceCode: StringExpression
  realmId: IntExpression
  unitName: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

enum Conditional {
  AND
  OR
}

input ConditionalExpression {
  arr: [Conditional]
  opr: Operator = EQ
  val: Conditional
}

type CurrentUser {
  groups: [String]
  id: String
  lastName: String
  login: String
  name: String
  realmId: Int
  roles: [String]
}

scalar Date

scalar DateTime

input FloatExpression {
  arr: [Float]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: Float
}

enum Func {
  AVG
  COUNT
  MAX
  MIN
  SUM
}

input FuncExpression {
  arr: [Func]
  opr: Operator = EQ
  val: Func
}

"""组"""
type Group implements Meta & NamedStruct & TreeStruct {
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """层级"""
  deep: Int
  deepAvg: Int
  deepCount: Int
  deepMax: Int
  deepMin: Int
  deepSum: Int

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String
  groupRoleRelation(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupRoleRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [GroupRoleRelation]
  groupRoleRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupRoleRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleRelation
  groupRoleRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupRoleRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleRelationConnection
  groupUserRelation(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupUserRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): [GroupUserRelation]
  groupUserRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupUserRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): GroupUserRelation
  groupUserRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupUserRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): GroupUserRelationConnection

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """名称"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """上级"""
  parent(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Group

  """上级ID"""
  parentId: String
  parentIdCount: Int
  parentIdMax: String
  parentIdMin: String

  """路径"""
  path: String
  pathCount: Int
  pathMax: String
  pathMin: String

  """租户"""
  realm(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmId: Int

  """角色"""
  roles(after: ID, before: ID, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Role]
  rolesAggregate(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  rolesConnection(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): RoleConnection

  """下级"""
  subGroups(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Group]
  subGroupsAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Group
  subGroupsConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): GroupConnection
  syncGroupPolicy: Boolean
  updateTime: Timestamp
  updateUserId: String

  """用户"""
  users(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): [User]
  usersAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): User
  usersConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): UserConnection
  version: Int
}

type GroupConnection {
  edges: [GroupEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input GroupConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  first: Int
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groupUserRelation: GroupUserRelationExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: GroupOrderBy
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input GroupConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  first: Int
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groupUserRelation: GroupUserRelationExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: GroupOrderBy
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

type GroupEdge {
  cursor: String
  node: Group
}

input GroupExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  groupRoleRelation: GroupRoleRelationExpression
  groupUserRelation: GroupUserRelationExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input GroupInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  deep: Int
  description: String
  groupRoleRelation: [GroupRoleRelationInput]
  groupUserRelation: [GroupUserRelationInput]
  id: ID
  isDeprecated: Boolean = false
  name: String
  parent: GroupInput
  parentId: String
  path: String
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  subGroups: [GroupInput]
  updateTime: Timestamp
  updateUserId: String
  users: [UserInput]
  version: Int
  where: GroupExpression
}

input GroupListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  deep: Int
  description: String
  groupRoleRelation: [GroupRoleRelationInput]
  groupUserRelation: [GroupUserRelationInput]
  id: ID
  isDeprecated: Boolean = false
  list: [GroupInput]
  name: String
  parent: GroupInput
  parentId: String
  path: String
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  subGroups: [GroupInput]
  updateTime: Timestamp
  updateUserId: String
  users: [UserInput]
  version: Int
  where: GroupExpression
}

input GroupListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  first: Int
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groupUserRelation: GroupUserRelationExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: GroupOrderBy
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input GroupListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  first: Int
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groupUserRelation: GroupUserRelationExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: GroupOrderBy
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input GroupMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  deep: Int
  description: String
  groupRoleRelation: [GroupRoleRelationInput]
  groupUserRelation: [GroupUserRelationInput]
  id: ID
  input: GroupInput
  isDeprecated: Boolean = false
  name: String
  parent: GroupInput
  parentId: String
  path: String
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  subGroups: [GroupInput]
  updateTime: Timestamp
  updateUserId: String
  users: [UserInput]
  version: Int
  where: GroupExpression
}

input GroupOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  deep: Sort
  description: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  parentId: Sort
  path: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input GroupQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groupUserRelation: GroupUserRelationExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

type GroupRoleRelation implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  group(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Group
  groupRef: String
  groupRefCount: Int
  groupRefMax: String
  groupRefMin: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  role(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  roleRef: String
  roleRefCount: Int
  roleRefMax: String
  roleRefMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type GroupRoleRelationConnection {
  edges: [GroupRoleRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input GroupRoleRelationConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleRelationExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupRoleRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupRoleRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleRelationExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupRoleRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type GroupRoleRelationEdge {
  cursor: String
  node: GroupRoleRelation
}

input GroupRoleRelationExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleRelationExpression]
  group: GroupExpression
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupRoleRelationInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  group: GroupInput
  groupRef: String
  id: ID
  isDeprecated: Boolean = false
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: GroupRoleRelationExpression
}

input GroupRoleRelationListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  group: GroupInput
  groupRef: String
  id: ID
  isDeprecated: Boolean = false
  list: [GroupRoleRelationInput]
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: GroupRoleRelationExpression
}

input GroupRoleRelationListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleRelationExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupRoleRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupRoleRelationListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleRelationExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupRoleRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupRoleRelationMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  group: GroupInput
  groupRef: String
  id: ID
  input: GroupRoleRelationInput
  isDeprecated: Boolean = false
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: GroupRoleRelationExpression
}

input GroupRoleRelationOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  groupRef: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  roleRef: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input GroupRoleRelationQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleRelationExpression]
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupRoleRelationSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleRelationExpression]
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groupUserRelation: GroupUserRelationExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

type GroupUserRelation implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  group(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Group
  groupRef: String
  groupRefCount: Int
  groupRefMax: String
  groupRefMin: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): User
  userRef: String
  userRefCount: Int
  userRefMax: String
  userRefMin: String
  version: Int
}

type GroupUserRelationConnection {
  edges: [GroupUserRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input GroupUserRelationConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupUserRelationExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupUserRelationOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input GroupUserRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupUserRelationExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupUserRelationOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

type GroupUserRelationEdge {
  cursor: String
  node: GroupUserRelation
}

input GroupUserRelationExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupUserRelationExpression]
  group: GroupExpression
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input GroupUserRelationInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  group: GroupInput
  groupRef: String
  id: ID
  isDeprecated: Boolean = false
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: String
  version: Int
  where: GroupUserRelationExpression
}

input GroupUserRelationListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  group: GroupInput
  groupRef: String
  id: ID
  isDeprecated: Boolean = false
  list: [GroupUserRelationInput]
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: String
  version: Int
  where: GroupUserRelationExpression
}

input GroupUserRelationListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupUserRelationExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupUserRelationOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input GroupUserRelationListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupUserRelationExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupUserRelationOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input GroupUserRelationMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  group: GroupInput
  groupRef: String
  id: ID
  input: GroupUserRelationInput
  isDeprecated: Boolean = false
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: String
  version: Int
  where: GroupUserRelationExpression
}

input GroupUserRelationOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  groupRef: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  userRef: Sort
  version: Sort
}

input GroupUserRelationQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupUserRelationExpression]
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input GroupUserRelationSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupUserRelationExpression]
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input IDExpression {
  arr: [ID]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: ID
}

input IntExpression {
  arr: [Int]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: Int
}

input Invoke {
  async: Boolean = false
  className: String
  methodName: String
  parameters: [InvokeParameter]
  returnClassName: String
  thrownTypes: [String]
}

input InvokeParameter {
  className: String
  name: String
}

input JsonSchema {
  allOf: [JsonSchema]
  anyOf: [JsonSchema]
  const: String
  contentEncoding: String
  contentMediaType: String
  dependentRequired: [Property]
  else: JsonSchema
  enum: [String]
  exclusiveMaximum: Float
  exclusiveMinimum: Float
  format: String
  if: JsonSchema
  items: JsonSchema
  maxItems: Int
  maxLength: Int
  maximum: Float
  minItems: Int
  minLength: Int
  minimum: Float
  multipleOf: Float
  not: JsonSchema
  oneOf: [JsonSchema]
  pattern: String
  properties: [Property]
  then: JsonSchema
  uniqueItems: Boolean
}

interface Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  isDeprecated: Boolean
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

input MetaExpression {
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
}

input MetaInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type Mutation {
  cargo(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: CargoInput, isDeprecated: Boolean = false, name: String, quantity: Int, realmId: Int, type: String, updateTime: Timestamp, updateUserId: String, version: Int, weight: Float, where: CargoExpression): Cargo
  cargoList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, list: [CargoInput], name: String, quantity: Int, realmId: Int, type: String, updateTime: Timestamp, updateUserId: String, version: Int, weight: Float, where: CargoExpression): [Cargo]
  cargoTransportRequestRelation(cargo: CargoInput, cargoRef: String, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: CargoTransportRequestRelationInput, isDeprecated: Boolean = false, realmId: Int, transportRequest: TransportRequestInput, transportRequestRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: CargoTransportRequestRelationExpression): CargoTransportRequestRelation
  cargoTransportRequestRelationList(cargo: CargoInput, cargoRef: String, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, list: [CargoTransportRequestRelationInput], realmId: Int, transportRequest: TransportRequestInput, transportRequestRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: CargoTransportRequestRelationExpression): [CargoTransportRequestRelation]
  city(administrativeCode: String, city: String, cityAbbreviation: String, cityCode: String, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: CityInput, isDeprecated: Boolean = false, province: String, provinceAbbreviation: String, provinceCode: String, realmId: Int, unitName: String, updateTime: Timestamp, updateUserId: String, version: Int, where: CityExpression): City
  cityList(administrativeCode: String, city: String, cityAbbreviation: String, cityCode: String, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, list: [CityInput], province: String, provinceAbbreviation: String, provinceCode: String, realmId: Int, unitName: String, updateTime: Timestamp, updateUserId: String, version: Int, where: CityExpression): [City]
  cityStationRelation(city: CityInput, cityRef: String, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: CityStationRelationInput, isDeprecated: Boolean = false, realmId: Int, station: StationInput, stationRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: CityStationRelationExpression): CityStationRelation
  cityStationRelationList(city: CityInput, cityRef: String, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, list: [CityStationRelationInput], realmId: Int, station: StationInput, stationRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: CityStationRelationExpression): [CityStationRelation]
  currentUserResetPassword(newPassword: String!, password: String!): User
  currentUserUpdate(userInput: UserInput!): User
  group(createGroupId: String, createTime: Timestamp, createUserId: String, deep: Int, description: String, groupRoleRelation: [GroupRoleRelationInput], groupUserRelation: [GroupUserRelationInput], id: ID, input: GroupInput, isDeprecated: Boolean = false, name: String, parent: GroupInput, parentId: String, path: String, realm: RealmInput, realmId: Int, roles: [RoleInput], subGroups: [GroupInput], updateTime: Timestamp, updateUserId: String, users: [UserInput], version: Int, where: GroupExpression): Group
  groupList(createGroupId: String, createTime: Timestamp, createUserId: String, deep: Int, description: String, groupRoleRelation: [GroupRoleRelationInput], groupUserRelation: [GroupUserRelationInput], id: ID, isDeprecated: Boolean = false, list: [GroupInput], name: String, parent: GroupInput, parentId: String, path: String, realm: RealmInput, realmId: Int, roles: [RoleInput], subGroups: [GroupInput], updateTime: Timestamp, updateUserId: String, users: [UserInput], version: Int, where: GroupExpression): [Group]
  groupRoleRelation(createGroupId: String, createTime: Timestamp, createUserId: String, group: GroupInput, groupRef: String, id: ID, input: GroupRoleRelationInput, isDeprecated: Boolean = false, realmId: Int, role: RoleInput, roleRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: GroupRoleRelationExpression): GroupRoleRelation
  groupRoleRelationList(createGroupId: String, createTime: Timestamp, createUserId: String, group: GroupInput, groupRef: String, id: ID, isDeprecated: Boolean = false, list: [GroupRoleRelationInput], realmId: Int, role: RoleInput, roleRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: GroupRoleRelationExpression): [GroupRoleRelation]
  groupUserRelation(createGroupId: String, createTime: Timestamp, createUserId: String, group: GroupInput, groupRef: String, id: ID, input: GroupUserRelationInput, isDeprecated: Boolean = false, realmId: Int, updateTime: Timestamp, updateUserId: String, user: UserInput, userRef: String, version: Int, where: GroupUserRelationExpression): GroupUserRelation
  groupUserRelationList(createGroupId: String, createTime: Timestamp, createUserId: String, group: GroupInput, groupRef: String, id: ID, isDeprecated: Boolean = false, list: [GroupUserRelationInput], realmId: Int, updateTime: Timestamp, updateUserId: String, user: UserInput, userRef: String, version: Int, where: GroupUserRelationExpression): [GroupUserRelation]
  login(login: String!, password: String!): String
  permission(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, field: String, input: PermissionInput, isDeprecated: Boolean = false, name: ID, permissionRoleRelation: [PermissionRoleRelationInput], permissionType: PermissionType, realm: RealmInput, realmId: Int, roles: [RoleInput], type: String, updateTime: Timestamp, updateUserId: String, version: Int, where: PermissionExpression): Permission
  permissionList(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, field: String, isDeprecated: Boolean = false, list: [PermissionInput], name: ID, permissionRoleRelation: [PermissionRoleRelationInput], permissionType: PermissionType, realm: RealmInput, realmId: Int, roles: [RoleInput], type: String, updateTime: Timestamp, updateUserId: String, version: Int, where: PermissionExpression): [Permission]
  permissionRoleRelation(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: PermissionRoleRelationInput, isDeprecated: Boolean = false, permission: PermissionInput, permissionRef: String, realmId: Int, role: RoleInput, roleRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: PermissionRoleRelationExpression): PermissionRoleRelation
  permissionRoleRelationList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, list: [PermissionRoleRelationInput], permission: PermissionInput, permissionRef: String, realmId: Int, role: RoleInput, roleRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: PermissionRoleRelationExpression): [PermissionRoleRelation]
  railwayTransport(arrivalTime: String, createGroupId: String, createTime: Timestamp, createUserId: String, departureTime: String, destination: StationInput, id: ID, input: RailwayTransportInput, isDeprecated: Boolean = false, origin: StationInput, railwayTransportStationRelation: [RailwayTransportStationRelationInput], railwayTransportTransportRequestRelation: [RailwayTransportTransportRequestRelationInput], realmId: Int, status: TransportStatus, transportRequest: TransportRequestInput, updateTime: Timestamp, updateUserId: String, version: Int, where: RailwayTransportExpression): RailwayTransport
  railwayTransportList(arrivalTime: String, createGroupId: String, createTime: Timestamp, createUserId: String, departureTime: String, destination: StationInput, id: ID, isDeprecated: Boolean = false, list: [RailwayTransportInput], origin: StationInput, railwayTransportStationRelation: [RailwayTransportStationRelationInput], railwayTransportTransportRequestRelation: [RailwayTransportTransportRequestRelationInput], realmId: Int, status: TransportStatus, transportRequest: TransportRequestInput, updateTime: Timestamp, updateUserId: String, version: Int, where: RailwayTransportExpression): [RailwayTransport]
  railwayTransportStationRelation(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: RailwayTransportStationRelationInput, isDeprecated: Boolean = false, railwayTransport: RailwayTransportInput, railwayTransportRef: String, realmId: Int, station: StationInput, stationRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: RailwayTransportStationRelationExpression): RailwayTransportStationRelation
  railwayTransportStationRelationList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, list: [RailwayTransportStationRelationInput], railwayTransport: RailwayTransportInput, railwayTransportRef: String, realmId: Int, station: StationInput, stationRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: RailwayTransportStationRelationExpression): [RailwayTransportStationRelation]
  railwayTransportTransportRequestRelation(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: RailwayTransportTransportRequestRelationInput, isDeprecated: Boolean = false, railwayTransport: RailwayTransportInput, railwayTransportRef: String, realmId: Int, transportRequest: TransportRequestInput, transportRequestRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: RailwayTransportTransportRequestRelationExpression): RailwayTransportTransportRequestRelation
  railwayTransportTransportRequestRelationList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, list: [RailwayTransportTransportRequestRelationInput], railwayTransport: RailwayTransportInput, railwayTransportRef: String, realmId: Int, transportRequest: TransportRequestInput, transportRequestRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: RailwayTransportTransportRequestRelationExpression): [RailwayTransportTransportRequestRelation]
  realm(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, input: RealmInput, isDeprecated: Boolean = false, name: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: RealmExpression): Realm
  realmList(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, isDeprecated: Boolean = false, list: [RealmInput], name: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: RealmExpression): [Realm]
  role(composites: [RoleInput], createGroupId: String, createTime: Timestamp, createUserId: String, description: String, groupRoleRelation: [GroupRoleRelationInput], groups: [GroupInput], id: ID, input: RoleInput, isDeprecated: Boolean = false, name: String, permissionRoleRelation: [PermissionRoleRelationInput], permissions: [PermissionInput], realm: RealmInput, realmId: Int, roleCompositeRelation: [RoleCompositeRelationInput], roleUserRelation: [RoleUserRelationInput], updateTime: Timestamp, updateUserId: String, users: [UserInput], version: Int, where: RoleExpression): Role
  roleCompositeRelation(composite: RoleInput, compositeRef: String, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: RoleCompositeRelationInput, isDeprecated: Boolean = false, realmId: Int, role: RoleInput, roleRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: RoleCompositeRelationExpression): RoleCompositeRelation
  roleCompositeRelationList(composite: RoleInput, compositeRef: String, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, list: [RoleCompositeRelationInput], realmId: Int, role: RoleInput, roleRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: RoleCompositeRelationExpression): [RoleCompositeRelation]
  roleList(composites: [RoleInput], createGroupId: String, createTime: Timestamp, createUserId: String, description: String, groupRoleRelation: [GroupRoleRelationInput], groups: [GroupInput], id: ID, isDeprecated: Boolean = false, list: [RoleInput], name: String, permissionRoleRelation: [PermissionRoleRelationInput], permissions: [PermissionInput], realm: RealmInput, realmId: Int, roleCompositeRelation: [RoleCompositeRelationInput], roleUserRelation: [RoleUserRelationInput], updateTime: Timestamp, updateUserId: String, users: [UserInput], version: Int, where: RoleExpression): [Role]
  roleUserRelation(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: RoleUserRelationInput, isDeprecated: Boolean = false, realmId: Int, role: RoleInput, roleRef: String, updateTime: Timestamp, updateUserId: String, user: UserInput, userRef: String, version: Int, where: RoleUserRelationExpression): RoleUserRelation
  roleUserRelationList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, list: [RoleUserRelationInput], realmId: Int, role: RoleInput, roleRef: String, updateTime: Timestamp, updateUserId: String, user: UserInput, userRef: String, version: Int, where: RoleUserRelationExpression): [RoleUserRelation]
  station(city: CityInput, cityStationRelation: [CityStationRelationInput], code: String, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, initials: String, input: StationInput, isDeprecated: Boolean = false, name: String, pinyin: String, realmId: Int, telegraphCode: String, updateTime: Timestamp, updateUserId: String, version: Int, where: StationExpression): Station
  stationList(city: CityInput, cityStationRelation: [CityStationRelationInput], code: String, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, initials: String, isDeprecated: Boolean = false, list: [StationInput], name: String, pinyin: String, realmId: Int, telegraphCode: String, updateTime: Timestamp, updateUserId: String, version: Int, where: StationExpression): [Station]
  stationTransportProductRelation(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: StationTransportProductRelationInput, isDeprecated: Boolean = false, realmId: Int, station: StationInput, stationRef: String, transportProduct: TransportProductInput, transportProductRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: StationTransportProductRelationExpression): StationTransportProductRelation
  stationTransportProductRelationList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, list: [StationTransportProductRelationInput], realmId: Int, station: StationInput, stationRef: String, transportProduct: TransportProductInput, transportProductRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: StationTransportProductRelationExpression): [StationTransportProductRelation]
  syncPermissionRoleRelationPolicy(permissionNameList: [String], removedPermissionNameList: [String], roleId: String): Boolean
  transportProduct(createGroupId: String, createTime: Timestamp, createUserId: String, destination: StationInput, id: ID, input: TransportProductInput, isDeprecated: Boolean = false, origin: StationInput, price: Float, realmId: Int, stationTransportProductRelation: [StationTransportProductRelationInput], unit: String, updateTime: Timestamp, updateUserId: String, version: Int, where: TransportProductExpression): TransportProduct
  transportProductList(createGroupId: String, createTime: Timestamp, createUserId: String, destination: StationInput, id: ID, isDeprecated: Boolean = false, list: [TransportProductInput], origin: StationInput, price: Float, realmId: Int, stationTransportProductRelation: [StationTransportProductRelationInput], unit: String, updateTime: Timestamp, updateUserId: String, version: Int, where: TransportProductExpression): [TransportProduct]
  transportRequest(cargoTransportRequestRelation: [CargoTransportRequestRelationInput], cargoes: [CargoInput], createGroupId: String, createTime: Timestamp, createUserId: String, customer: UserInput, destination: String, id: ID, input: TransportRequestInput, isDeprecated: Boolean = false, origin: String, railwayTransport: RailwayTransportInput, railwayTransportTransportRequestRelation: [RailwayTransportTransportRequestRelationInput], realmId: Int, status: TransportStatus, transportRequestTruckTransportRelation: [TransportRequestTruckTransportRelationInput], transportRequestUserRelation: [TransportRequestUserRelationInput], truckTransports: [TruckTransportInput], updateTime: Timestamp, updateUserId: String, version: Int, where: TransportRequestExpression): TransportRequest
  transportRequestList(cargoTransportRequestRelation: [CargoTransportRequestRelationInput], cargoes: [CargoInput], createGroupId: String, createTime: Timestamp, createUserId: String, customer: UserInput, destination: String, id: ID, isDeprecated: Boolean = false, list: [TransportRequestInput], origin: String, railwayTransport: RailwayTransportInput, railwayTransportTransportRequestRelation: [RailwayTransportTransportRequestRelationInput], realmId: Int, status: TransportStatus, transportRequestTruckTransportRelation: [TransportRequestTruckTransportRelationInput], transportRequestUserRelation: [TransportRequestUserRelationInput], truckTransports: [TruckTransportInput], updateTime: Timestamp, updateUserId: String, version: Int, where: TransportRequestExpression): [TransportRequest]
  transportRequestTruckTransportRelation(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: TransportRequestTruckTransportRelationInput, isDeprecated: Boolean = false, realmId: Int, transportRequest: TransportRequestInput, transportRequestRef: String, truckTransport: TruckTransportInput, truckTransportRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: TransportRequestTruckTransportRelationExpression): TransportRequestTruckTransportRelation
  transportRequestTruckTransportRelationList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, list: [TransportRequestTruckTransportRelationInput], realmId: Int, transportRequest: TransportRequestInput, transportRequestRef: String, truckTransport: TruckTransportInput, truckTransportRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: TransportRequestTruckTransportRelationExpression): [TransportRequestTruckTransportRelation]
  transportRequestUserRelation(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: TransportRequestUserRelationInput, isDeprecated: Boolean = false, realmId: Int, transportRequest: TransportRequestInput, transportRequestRef: String, updateTime: Timestamp, updateUserId: String, user: UserInput, userRef: Int, version: Int, where: TransportRequestUserRelationExpression): TransportRequestUserRelation
  transportRequestUserRelationList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, list: [TransportRequestUserRelationInput], realmId: Int, transportRequest: TransportRequestInput, transportRequestRef: String, updateTime: Timestamp, updateUserId: String, user: UserInput, userRef: Int, version: Int, where: TransportRequestUserRelationExpression): [TransportRequestUserRelation]
  truckTransport(createGroupId: String, createTime: Timestamp, createUserId: String, destination: String, id: ID, input: TruckTransportInput, isDeprecated: Boolean = false, origin: String, realmId: Int, status: TransportStatus, transportRequest: TransportRequestInput, transportRequestTruckTransportRelation: [TransportRequestTruckTransportRelationInput], truckTransportVehicleRelation: [TruckTransportVehicleRelationInput], updateTime: Timestamp, updateUserId: String, vehicle: VehicleInput, version: Int, where: TruckTransportExpression): TruckTransport
  truckTransportList(createGroupId: String, createTime: Timestamp, createUserId: String, destination: String, id: ID, isDeprecated: Boolean = false, list: [TruckTransportInput], origin: String, realmId: Int, status: TransportStatus, transportRequest: TransportRequestInput, transportRequestTruckTransportRelation: [TransportRequestTruckTransportRelationInput], truckTransportVehicleRelation: [TruckTransportVehicleRelationInput], updateTime: Timestamp, updateUserId: String, vehicle: VehicleInput, version: Int, where: TruckTransportExpression): [TruckTransport]
  truckTransportVehicleRelation(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: TruckTransportVehicleRelationInput, isDeprecated: Boolean = false, realmId: Int, truckTransport: TruckTransportInput, truckTransportRef: String, updateTime: Timestamp, updateUserId: String, vehicle: VehicleInput, vehicleRef: String, version: Int, where: TruckTransportVehicleRelationExpression): TruckTransportVehicleRelation
  truckTransportVehicleRelationList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, list: [TruckTransportVehicleRelationInput], realmId: Int, truckTransport: TruckTransportInput, truckTransportRef: String, updateTime: Timestamp, updateUserId: String, vehicle: VehicleInput, vehicleRef: String, version: Int, where: TruckTransportVehicleRelationExpression): [TruckTransportVehicleRelation]
  user(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, disable: Boolean, email: String, groupUserRelation: [GroupUserRelationInput], groups: [GroupInput], hash: String, id: ID, input: UserInput, isDeprecated: Boolean = false, lastName: String, login: String, name: String, phones: [String], realm: RealmInput, realmId: Int, roleUserRelation: [RoleUserRelationInput], roles: [RoleInput], salt: String, updateTime: Timestamp, updateUserId: String, userPhonesRelation: [UserPhonesRelationInput], version: Int, where: UserExpression): User
  userList(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, disable: Boolean, email: String, groupUserRelation: [GroupUserRelationInput], groups: [GroupInput], hash: String, id: ID, isDeprecated: Boolean = false, lastName: String, list: [UserInput], login: String, name: String, phones: [String], realm: RealmInput, realmId: Int, roleUserRelation: [RoleUserRelationInput], roles: [RoleInput], salt: String, updateTime: Timestamp, updateUserId: String, userPhonesRelation: [UserPhonesRelationInput], version: Int, where: UserExpression): [User]
  userPhonesRelation(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: UserPhonesRelationInput, isDeprecated: Boolean = false, phonesRef: String, realmId: Int, updateTime: Timestamp, updateUserId: String, user: UserInput, userRef: String, version: Int, where: UserPhonesRelationExpression): UserPhonesRelation
  userPhonesRelationList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, list: [UserPhonesRelationInput], phonesRef: String, realmId: Int, updateTime: Timestamp, updateUserId: String, user: UserInput, userRef: String, version: Int, where: UserPhonesRelationExpression): [UserPhonesRelation]
  userVehicleRelation(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: UserVehicleRelationInput, isDeprecated: Boolean = false, realmId: Int, updateTime: Timestamp, updateUserId: String, user: UserInput, userRef: Int, vehicle: VehicleInput, vehicleRef: String, version: Int, where: UserVehicleRelationExpression): UserVehicleRelation
  userVehicleRelationList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, list: [UserVehicleRelationInput], realmId: Int, updateTime: Timestamp, updateUserId: String, user: UserInput, userRef: Int, vehicle: VehicleInput, vehicleRef: String, version: Int, where: UserVehicleRelationExpression): [UserVehicleRelation]
  vehicle(capacity: Int, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: VehicleInput, isDeprecated: Boolean = false, licensePlate: String, owner: UserInput, realmId: Int, updateTime: Timestamp, updateUserId: String, userVehicleRelation: [UserVehicleRelationInput], version: Int, where: VehicleExpression): Vehicle
  vehicleList(capacity: Int, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, licensePlate: String, list: [VehicleInput], owner: UserInput, realmId: Int, updateTime: Timestamp, updateUserId: String, userVehicleRelation: [UserVehicleRelationInput], version: Int, where: VehicleExpression): [Vehicle]
}

input Mutation_currentUserResetPassword_Arguments {
  newPassword: String!
  password: String!
}

input Mutation_currentUserUpdate_Arguments {
  userInput: UserInput!
}

input Mutation_login_Arguments {
  login: String!
  password: String!
}

input Mutation_syncPermissionRoleRelationPolicy_Arguments {
  permissionNameList: [String]
  removedPermissionNameList: [String]
  roleId: String
}

interface NamedStruct {
  description: String
  name: String
}

input NamedStructExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input NamedStructInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  isDeprecated: Boolean = false
  name: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

enum Operator {
  BT
  EQ
  GT
  GTE
  IN
  LK
  LT
  LTE
  NBT
  NEQ
  NGT
  NGTE
  NIL
  NIN
  NLK
  NLT
  NLTE
  NNIL
}

input OperatorExpression {
  arr: [Operator]
  opr: Operator = EQ
  val: Operator
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

"""权限"""
type Permission implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """字段"""
  field: String!
  fieldCount: Int
  fieldMax: String
  fieldMin: String
  isDeprecated: Boolean

  """名称"""
  name: ID!
  nameCount: Int
  nameMax: String
  nameMin: String
  permissionRoleRelation(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: PermissionRoleRelationOrderBy, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [PermissionRoleRelation]
  permissionRoleRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: PermissionRoleRelationOrderBy, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionRoleRelation
  permissionRoleRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: PermissionRoleRelationOrderBy, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionRoleRelationConnection

  """权限类型"""
  permissionType: PermissionType!

  """租户"""
  realm(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmId: Int

  """角色"""
  roles(after: ID, before: ID, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Role]
  rolesAggregate(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  rolesConnection(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): RoleConnection
  syncPermissionPolicy: Boolean

  """实体"""
  type: String!
  typeCount: Int
  typeMax: String
  typeMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type PermissionConnection {
  edges: [PermissionEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input PermissionConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  first: Int
  groupBy: [String!]
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: PermissionOrderBy
  permissionRoleRelation: PermissionRoleRelationExpression
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  first: Int
  groupBy: [String!]
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: PermissionOrderBy
  permissionRoleRelation: PermissionRoleRelationExpression
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type PermissionEdge {
  cursor: String
  node: Permission
}

input PermissionExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  permissionRoleRelation: PermissionRoleRelationExpression
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  field: String
  isDeprecated: Boolean = false
  name: ID
  permissionRoleRelation: [PermissionRoleRelationInput]
  permissionType: PermissionType
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  type: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: PermissionExpression
}

input PermissionListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  field: String
  isDeprecated: Boolean = false
  list: [PermissionInput]
  name: ID
  permissionRoleRelation: [PermissionRoleRelationInput]
  permissionType: PermissionType
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  type: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: PermissionExpression
}

input PermissionListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  first: Int
  groupBy: [String!]
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: PermissionOrderBy
  permissionRoleRelation: PermissionRoleRelationExpression
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  first: Int
  groupBy: [String!]
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: PermissionOrderBy
  permissionRoleRelation: PermissionRoleRelationExpression
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  field: String
  input: PermissionInput
  isDeprecated: Boolean = false
  name: ID
  permissionRoleRelation: [PermissionRoleRelationInput]
  permissionType: PermissionType
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  type: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: PermissionExpression
}

input PermissionOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  field: Sort
  isDeprecated: Sort
  name: Sort
  permissionType: Sort
  realmId: Sort
  type: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input PermissionQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  groupBy: [String!]
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  permissionRoleRelation: PermissionRoleRelationExpression
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type PermissionRoleRelation implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  permission(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, field: StringExpression, groupBy: [String!], includeDeprecated: Boolean = false, name: StringExpression, permissionRoleRelation: PermissionRoleRelationExpression, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Permission
  permissionRef: String
  permissionRefCount: Int
  permissionRefMax: String
  permissionRefMin: String
  realmId: Int
  role(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  roleRef: String
  roleRefCount: Int
  roleRefMax: String
  roleRefMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type PermissionRoleRelationConnection {
  edges: [PermissionRoleRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input PermissionRoleRelationConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [PermissionRoleRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: PermissionRoleRelationOrderBy
  permission: PermissionExpression
  permissionRef: StringExpression
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionRoleRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [PermissionRoleRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: PermissionRoleRelationOrderBy
  permission: PermissionExpression
  permissionRef: StringExpression
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type PermissionRoleRelationEdge {
  cursor: String
  node: PermissionRoleRelation
}

input PermissionRoleRelationExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [PermissionRoleRelationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  permission: PermissionExpression
  permissionRef: StringExpression
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionRoleRelationInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  permission: PermissionInput
  permissionRef: String
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: PermissionRoleRelationExpression
}

input PermissionRoleRelationListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  list: [PermissionRoleRelationInput]
  permission: PermissionInput
  permissionRef: String
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: PermissionRoleRelationExpression
}

input PermissionRoleRelationListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [PermissionRoleRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: PermissionRoleRelationOrderBy
  permission: PermissionExpression
  permissionRef: StringExpression
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionRoleRelationListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [PermissionRoleRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: PermissionRoleRelationOrderBy
  permission: PermissionExpression
  permissionRef: StringExpression
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionRoleRelationMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: PermissionRoleRelationInput
  isDeprecated: Boolean = false
  permission: PermissionInput
  permissionRef: String
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: PermissionRoleRelationExpression
}

input PermissionRoleRelationOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  permissionRef: Sort
  realmId: Sort
  roleRef: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input PermissionRoleRelationQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [PermissionRoleRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  permission: PermissionExpression
  permissionRef: StringExpression
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionRoleRelationSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [PermissionRoleRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  permission: PermissionExpression
  permissionRef: StringExpression
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  groupBy: [String!]
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  permissionRoleRelation: PermissionRoleRelationExpression
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

"""权限类型"""
enum PermissionType {
  """读取"""
  READ

  """写入"""
  WRITE
}

input PermissionTypeExpression {
  arr: [PermissionType]
  opr: Operator = EQ
  val: PermissionType
}

type Policy {
  id: String
  ptype: String
  v0: String
  v1: String
  v2: String
  v3: String
  v4: String
  v5: String
}

input Property {
  name: String!
  required: [String]
  validation: JsonSchema
}

enum Protocol {
  GRPC
  HTTP
  LOCAL
  RSOCKET
}

input ProtocolExpression {
  arr: [Protocol]
  opr: Operator = EQ
  val: Protocol
}

type Query {
  cargo(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CargoExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, quantity: IntExpression, realmId: IntExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, weight: FloatExpression): Cargo
  cargoConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CargoExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: CargoOrderBy, quantity: IntExpression, realmId: IntExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, weight: FloatExpression): CargoConnection
  cargoList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CargoExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: CargoOrderBy, quantity: IntExpression, realmId: IntExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, weight: FloatExpression): [Cargo]
  cargoTransportRequestRelation(cargo: CargoExpression, cargoRef: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CargoTransportRequestRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): CargoTransportRequestRelation
  cargoTransportRequestRelationConnection(after: ID, before: ID, cargo: CargoExpression, cargoRef: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CargoTransportRequestRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: CargoTransportRequestRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): CargoTransportRequestRelationConnection
  cargoTransportRequestRelationList(after: ID, before: ID, cargo: CargoExpression, cargoRef: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CargoTransportRequestRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: CargoTransportRequestRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [CargoTransportRequestRelation]
  city(administrativeCode: StringExpression, city: StringExpression, cityAbbreviation: StringExpression, cityCode: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CityExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, province: StringExpression, provinceAbbreviation: StringExpression, provinceCode: StringExpression, realmId: IntExpression, unitName: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): City
  cityConnection(administrativeCode: StringExpression, after: ID, before: ID, city: StringExpression, cityAbbreviation: StringExpression, cityCode: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CityExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: CityOrderBy, province: StringExpression, provinceAbbreviation: StringExpression, provinceCode: StringExpression, realmId: IntExpression, unitName: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): CityConnection
  cityList(administrativeCode: StringExpression, after: ID, before: ID, city: StringExpression, cityAbbreviation: StringExpression, cityCode: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CityExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: CityOrderBy, province: StringExpression, provinceAbbreviation: StringExpression, provinceCode: StringExpression, realmId: IntExpression, unitName: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [City]
  cityStationRelation(city: CityExpression, cityRef: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CityStationRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): CityStationRelation
  cityStationRelationConnection(after: ID, before: ID, city: CityExpression, cityRef: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CityStationRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: CityStationRelationOrderBy, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): CityStationRelationConnection
  cityStationRelationList(after: ID, before: ID, city: CityExpression, cityRef: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CityStationRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: CityStationRelationOrderBy, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [CityStationRelation]
  current: CurrentUser
  currentPermissionNameListByTypes(types: [String]): [String]
  currentPermissionTypeList: [String]
  currentUser: User
  group(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, exs: [GroupExpression], groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Group
  groupConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, exs: [GroupExpression], first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): GroupConnection
  groupList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, exs: [GroupExpression], first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Group]
  groupRoleRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleRelationExpression], group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleRelation
  groupRoleRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleRelationExpression], first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupRoleRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleRelationConnection
  groupRoleRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleRelationExpression], first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupRoleRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [GroupRoleRelation]
  groupUserRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupUserRelationExpression], group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): GroupUserRelation
  groupUserRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupUserRelationExpression], first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupUserRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): GroupUserRelationConnection
  groupUserRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupUserRelationExpression], first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupUserRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): [GroupUserRelation]
  jsonSchema(name: String): String
  permission(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], field: StringExpression, groupBy: [String!], includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, permissionRoleRelation: PermissionRoleRelationExpression, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Permission
  permissionConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], field: StringExpression, first: Int, groupBy: [String!], includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: PermissionOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionConnection
  permissionList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], field: StringExpression, first: Int, groupBy: [String!], includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: PermissionOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Permission]
  permissionRoleRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [PermissionRoleRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionRoleRelation
  permissionRoleRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [PermissionRoleRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: PermissionRoleRelationOrderBy, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionRoleRelationConnection
  permissionRoleRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [PermissionRoleRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: PermissionRoleRelationOrderBy, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [PermissionRoleRelation]
  policyList: [Policy]
  railwayTransport(arrivalTime: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureTime: StringExpression, destination: StationExpression, exs: [RailwayTransportExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, origin: StationExpression, railwayTransportStationRelation: RailwayTransportStationRelationExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransport
  railwayTransportConnection(after: ID, arrivalTime: StringExpression, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureTime: StringExpression, destination: StationExpression, exs: [RailwayTransportExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayTransportOrderBy, origin: StationExpression, railwayTransportStationRelation: RailwayTransportStationRelationExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransportConnection
  railwayTransportList(after: ID, arrivalTime: StringExpression, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureTime: StringExpression, destination: StationExpression, exs: [RailwayTransportExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayTransportOrderBy, origin: StationExpression, railwayTransportStationRelation: RailwayTransportStationRelationExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RailwayTransport]
  railwayTransportStationRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayTransportStationRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransportStationRelation
  railwayTransportStationRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayTransportStationRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayTransportStationRelationOrderBy, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransportStationRelationConnection
  railwayTransportStationRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayTransportStationRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayTransportStationRelationOrderBy, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RailwayTransportStationRelation]
  railwayTransportTransportRequestRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayTransportTransportRequestRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransportTransportRequestRelation
  railwayTransportTransportRequestRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayTransportTransportRequestRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayTransportTransportRequestRelationOrderBy, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransportTransportRequestRelationConnection
  railwayTransportTransportRequestRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayTransportTransportRequestRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayTransportTransportRequestRelationOrderBy, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RailwayTransportTransportRequestRelation]
  realm(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RealmExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RealmExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RealmOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RealmConnection
  realmList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RealmExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RealmOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Realm]
  role(composites: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  roleCompositeRelation(composite: RoleExpression, compositeRef: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleCompositeRelation
  roleCompositeRelationConnection(after: ID, before: ID, composite: RoleExpression, compositeRef: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleCompositeRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleCompositeRelationConnection
  roleCompositeRelationList(after: ID, before: ID, composite: RoleExpression, compositeRef: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleCompositeRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RoleCompositeRelation]
  roleConnection(after: ID, before: ID, composites: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): RoleConnection
  roleList(after: ID, before: ID, composites: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Role]
  roleUserRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleUserRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): RoleUserRelation
  roleUserRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleUserRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleUserRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): RoleUserRelationConnection
  roleUserRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleUserRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleUserRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): [RoleUserRelation]
  station(city: CityExpression, cityStationRelation: CityStationRelationExpression, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [StationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, initials: StringExpression, name: StringExpression, not: Boolean = false, pinyin: StringExpression, realmId: IntExpression, telegraphCode: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Station
  stationConnection(after: ID, before: ID, city: CityExpression, cityStationRelation: CityStationRelationExpression, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [StationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, initials: StringExpression, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: StationOrderBy, pinyin: StringExpression, realmId: IntExpression, telegraphCode: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): StationConnection
  stationList(after: ID, before: ID, city: CityExpression, cityStationRelation: CityStationRelationExpression, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [StationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, initials: StringExpression, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: StationOrderBy, pinyin: StringExpression, realmId: IntExpression, telegraphCode: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Station]
  stationTransportProductRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [StationTransportProductRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, transportProduct: TransportProductExpression, transportProductRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): StationTransportProductRelation
  stationTransportProductRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [StationTransportProductRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: StationTransportProductRelationOrderBy, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, transportProduct: TransportProductExpression, transportProductRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): StationTransportProductRelationConnection
  stationTransportProductRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [StationTransportProductRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: StationTransportProductRelationOrderBy, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, transportProduct: TransportProductExpression, transportProductRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [StationTransportProductRelation]
  transportProduct(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, destination: StationExpression, exs: [TransportProductExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, origin: StationExpression, price: FloatExpression, realmId: IntExpression, stationTransportProductRelation: StationTransportProductRelationExpression, unit: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportProduct
  transportProductConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, destination: StationExpression, exs: [TransportProductExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TransportProductOrderBy, origin: StationExpression, price: FloatExpression, realmId: IntExpression, stationTransportProductRelation: StationTransportProductRelationExpression, unit: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportProductConnection
  transportProductList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, destination: StationExpression, exs: [TransportProductExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TransportProductOrderBy, origin: StationExpression, price: FloatExpression, realmId: IntExpression, stationTransportProductRelation: StationTransportProductRelationExpression, unit: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [TransportProduct]
  transportRequest(cargoTransportRequestRelation: CargoTransportRequestRelationExpression, cargoes: CargoExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: UserExpression, destination: StringExpression, exs: [TransportRequestExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, origin: StringExpression, railwayTransport: RailwayTransportExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, transportRequestUserRelation: TransportRequestUserRelationExpression, truckTransports: TruckTransportExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportRequest
  transportRequestConnection(after: ID, before: ID, cargoTransportRequestRelation: CargoTransportRequestRelationExpression, cargoes: CargoExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: UserExpression, destination: StringExpression, exs: [TransportRequestExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TransportRequestOrderBy, origin: StringExpression, railwayTransport: RailwayTransportExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, transportRequestUserRelation: TransportRequestUserRelationExpression, truckTransports: TruckTransportExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportRequestConnection
  transportRequestList(after: ID, before: ID, cargoTransportRequestRelation: CargoTransportRequestRelationExpression, cargoes: CargoExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: UserExpression, destination: StringExpression, exs: [TransportRequestExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TransportRequestOrderBy, origin: StringExpression, railwayTransport: RailwayTransportExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, transportRequestUserRelation: TransportRequestUserRelationExpression, truckTransports: TruckTransportExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [TransportRequest]
  transportRequestTruckTransportRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [TransportRequestTruckTransportRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportRequestTruckTransportRelation
  transportRequestTruckTransportRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [TransportRequestTruckTransportRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TransportRequestTruckTransportRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportRequestTruckTransportRelationConnection
  transportRequestTruckTransportRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [TransportRequestTruckTransportRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TransportRequestTruckTransportRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [TransportRequestTruckTransportRelation]
  transportRequestUserRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [TransportRequestUserRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: IntExpression, version: IntExpression): TransportRequestUserRelation
  transportRequestUserRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [TransportRequestUserRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TransportRequestUserRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: IntExpression, version: IntExpression): TransportRequestUserRelationConnection
  transportRequestUserRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [TransportRequestUserRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TransportRequestUserRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: IntExpression, version: IntExpression): [TransportRequestUserRelation]
  truckTransport(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, destination: StringExpression, exs: [TruckTransportExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, origin: StringExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, truckTransportVehicleRelation: TruckTransportVehicleRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, version: IntExpression): TruckTransport
  truckTransportConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, destination: StringExpression, exs: [TruckTransportExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TruckTransportOrderBy, origin: StringExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, truckTransportVehicleRelation: TruckTransportVehicleRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, version: IntExpression): TruckTransportConnection
  truckTransportList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, destination: StringExpression, exs: [TruckTransportExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TruckTransportOrderBy, origin: StringExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, truckTransportVehicleRelation: TruckTransportVehicleRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, version: IntExpression): [TruckTransport]
  truckTransportVehicleRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [TruckTransportVehicleRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, vehicleRef: StringExpression, version: IntExpression): TruckTransportVehicleRelation
  truckTransportVehicleRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [TruckTransportVehicleRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TruckTransportVehicleRelationOrderBy, realmId: IntExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, vehicleRef: StringExpression, version: IntExpression): TruckTransportVehicleRelationConnection
  truckTransportVehicleRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [TruckTransportVehicleRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TruckTransportVehicleRelationOrderBy, realmId: IntExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, vehicleRef: StringExpression, version: IntExpression): [TruckTransportVehicleRelation]
  user(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, not: Boolean = false, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): User
  userConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, not: Boolean = false, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): UserConnection
  userList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, not: Boolean = false, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): [User]
  userPhonesRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, phonesRef: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): UserPhonesRelation
  userPhonesRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserPhonesRelationOrderBy, phonesRef: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): UserPhonesRelationConnection
  userPhonesRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserPhonesRelationOrderBy, phonesRef: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): [UserPhonesRelation]
  userVehicleRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserVehicleRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: IntExpression, vehicle: VehicleExpression, vehicleRef: StringExpression, version: IntExpression): UserVehicleRelation
  userVehicleRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserVehicleRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserVehicleRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: IntExpression, vehicle: VehicleExpression, vehicleRef: StringExpression, version: IntExpression): UserVehicleRelationConnection
  userVehicleRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserVehicleRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserVehicleRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: IntExpression, vehicle: VehicleExpression, vehicleRef: StringExpression, version: IntExpression): [UserVehicleRelation]
  vehicle(capacity: IntExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [VehicleExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, licensePlate: StringExpression, not: Boolean = false, owner: UserExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userVehicleRelation: UserVehicleRelationExpression, version: IntExpression): Vehicle
  vehicleConnection(after: ID, before: ID, capacity: IntExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [VehicleExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, licensePlate: StringExpression, not: Boolean = false, offset: Int, orderBy: VehicleOrderBy, owner: UserExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userVehicleRelation: UserVehicleRelationExpression, version: IntExpression): VehicleConnection
  vehicleList(after: ID, before: ID, capacity: IntExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [VehicleExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, licensePlate: StringExpression, not: Boolean = false, offset: Int, orderBy: VehicleOrderBy, owner: UserExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userVehicleRelation: UserVehicleRelationExpression, version: IntExpression): [Vehicle]
}

input Query_currentPermissionNameListByTypes_Arguments {
  types: [String]
}

input Query_jsonSchema_Arguments {
  name: String
}

"""铁路运输"""
type RailwayTransport implements Meta {
  """到达时间"""
  arrivalTime: String!
  arrivalTimeCount: Int
  arrivalTimeMax: String
  arrivalTimeMin: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """出发时间"""
  departureTime: String!
  departureTimeCount: Int
  departureTimeMax: String
  departureTimeMin: String

  """铁路运输的目的地"""
  destination(city: CityExpression, cityStationRelation: CityStationRelationExpression, code: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, initials: StringExpression, name: StringExpression, pinyin: StringExpression, realmId: IntExpression, telegraphCode: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Station!

  """铁路运输ID"""
  id: ID!
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """铁路运输的出发地"""
  origin(city: CityExpression, cityStationRelation: CityStationRelationExpression, code: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, initials: StringExpression, name: StringExpression, pinyin: StringExpression, realmId: IntExpression, telegraphCode: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Station!
  railwayTransportStationRelation(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RailwayTransportStationRelationOrderBy, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RailwayTransportStationRelation]
  railwayTransportStationRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RailwayTransportStationRelationOrderBy, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransportStationRelation
  railwayTransportStationRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RailwayTransportStationRelationOrderBy, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransportStationRelationConnection
  railwayTransportTransportRequestRelation(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RailwayTransportTransportRequestRelationOrderBy, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RailwayTransportTransportRequestRelation]
  railwayTransportTransportRequestRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RailwayTransportTransportRequestRelationOrderBy, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransportTransportRequestRelation
  railwayTransportTransportRequestRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RailwayTransportTransportRequestRelationOrderBy, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransportTransportRequestRelationConnection
  realmId: Int

  """运输状态"""
  status: TransportStatus!

  """关联的运输需求"""
  transportRequest(cargoTransportRequestRelation: CargoTransportRequestRelationExpression, cargoes: CargoExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: UserExpression, destination: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, origin: StringExpression, railwayTransport: RailwayTransportExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, transportRequestUserRelation: TransportRequestUserRelationExpression, truckTransports: TruckTransportExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportRequest!
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type RailwayTransportConnection {
  edges: [RailwayTransportEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RailwayTransportConnectionQueryArguments {
  after: ID
  arrivalTime: StringExpression
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureTime: StringExpression
  destination: StationExpression
  exs: [RailwayTransportExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayTransportOrderBy
  origin: StationExpression
  railwayTransportStationRelation: RailwayTransportStationRelationExpression
  railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequest: TransportRequestExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayTransportConnectionSubscriptionArguments {
  after: ID
  arrivalTime: StringExpression
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureTime: StringExpression
  destination: StationExpression
  exs: [RailwayTransportExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayTransportOrderBy
  origin: StationExpression
  railwayTransportStationRelation: RailwayTransportStationRelationExpression
  railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequest: TransportRequestExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RailwayTransportEdge {
  cursor: String
  node: RailwayTransport
}

input RailwayTransportExpression {
  arrivalTime: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureTime: StringExpression
  destination: StationExpression
  exs: [RailwayTransportExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  origin: StationExpression
  railwayTransportStationRelation: RailwayTransportStationRelationExpression
  railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequest: TransportRequestExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayTransportInput {
  arrivalTime: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  departureTime: String
  destination: StationInput
  id: ID
  isDeprecated: Boolean = false
  origin: StationInput
  railwayTransportStationRelation: [RailwayTransportStationRelationInput]
  railwayTransportTransportRequestRelation: [RailwayTransportTransportRequestRelationInput]
  realmId: Int
  status: TransportStatus
  transportRequest: TransportRequestInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RailwayTransportExpression
}

input RailwayTransportListMutationArguments {
  arrivalTime: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  departureTime: String
  destination: StationInput
  id: ID
  isDeprecated: Boolean = false
  list: [RailwayTransportInput]
  origin: StationInput
  railwayTransportStationRelation: [RailwayTransportStationRelationInput]
  railwayTransportTransportRequestRelation: [RailwayTransportTransportRequestRelationInput]
  realmId: Int
  status: TransportStatus
  transportRequest: TransportRequestInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RailwayTransportExpression
}

input RailwayTransportListQueryArguments {
  after: ID
  arrivalTime: StringExpression
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureTime: StringExpression
  destination: StationExpression
  exs: [RailwayTransportExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayTransportOrderBy
  origin: StationExpression
  railwayTransportStationRelation: RailwayTransportStationRelationExpression
  railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequest: TransportRequestExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayTransportListSubscriptionArguments {
  after: ID
  arrivalTime: StringExpression
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureTime: StringExpression
  destination: StationExpression
  exs: [RailwayTransportExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayTransportOrderBy
  origin: StationExpression
  railwayTransportStationRelation: RailwayTransportStationRelationExpression
  railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequest: TransportRequestExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayTransportMutationArguments {
  arrivalTime: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  departureTime: String
  destination: StationInput
  id: ID
  input: RailwayTransportInput
  isDeprecated: Boolean = false
  origin: StationInput
  railwayTransportStationRelation: [RailwayTransportStationRelationInput]
  railwayTransportTransportRequestRelation: [RailwayTransportTransportRequestRelationInput]
  realmId: Int
  status: TransportStatus
  transportRequest: TransportRequestInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RailwayTransportExpression
}

input RailwayTransportOrderBy {
  arrivalTime: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  departureTime: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  status: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RailwayTransportQueryArguments {
  arrivalTime: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureTime: StringExpression
  destination: StationExpression
  exs: [RailwayTransportExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  origin: StationExpression
  railwayTransportStationRelation: RailwayTransportStationRelationExpression
  railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequest: TransportRequestExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RailwayTransportStationRelation implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  railwayTransport(arrivalTime: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureTime: StringExpression, destination: StationExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, origin: StationExpression, railwayTransportStationRelation: RailwayTransportStationRelationExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransport
  railwayTransportRef: String
  railwayTransportRefCount: Int
  railwayTransportRefMax: String
  railwayTransportRefMin: String
  realmId: Int
  station(city: CityExpression, cityStationRelation: CityStationRelationExpression, code: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, initials: StringExpression, name: StringExpression, pinyin: StringExpression, realmId: IntExpression, telegraphCode: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Station
  stationRef: String
  stationRefCount: Int
  stationRefMax: String
  stationRefMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type RailwayTransportStationRelationConnection {
  edges: [RailwayTransportStationRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RailwayTransportStationRelationConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayTransportStationRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayTransportStationRelationOrderBy
  railwayTransport: RailwayTransportExpression
  railwayTransportRef: StringExpression
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayTransportStationRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayTransportStationRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayTransportStationRelationOrderBy
  railwayTransport: RailwayTransportExpression
  railwayTransportRef: StringExpression
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RailwayTransportStationRelationEdge {
  cursor: String
  node: RailwayTransportStationRelation
}

input RailwayTransportStationRelationExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayTransportStationRelationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  railwayTransport: RailwayTransportExpression
  railwayTransportRef: StringExpression
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayTransportStationRelationInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  railwayTransport: RailwayTransportInput
  railwayTransportRef: String
  realmId: Int
  station: StationInput
  stationRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RailwayTransportStationRelationExpression
}

input RailwayTransportStationRelationListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  list: [RailwayTransportStationRelationInput]
  railwayTransport: RailwayTransportInput
  railwayTransportRef: String
  realmId: Int
  station: StationInput
  stationRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RailwayTransportStationRelationExpression
}

input RailwayTransportStationRelationListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayTransportStationRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayTransportStationRelationOrderBy
  railwayTransport: RailwayTransportExpression
  railwayTransportRef: StringExpression
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayTransportStationRelationListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayTransportStationRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayTransportStationRelationOrderBy
  railwayTransport: RailwayTransportExpression
  railwayTransportRef: StringExpression
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayTransportStationRelationMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: RailwayTransportStationRelationInput
  isDeprecated: Boolean = false
  railwayTransport: RailwayTransportInput
  railwayTransportRef: String
  realmId: Int
  station: StationInput
  stationRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RailwayTransportStationRelationExpression
}

input RailwayTransportStationRelationOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  railwayTransportRef: Sort
  realmId: Sort
  stationRef: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RailwayTransportStationRelationQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayTransportStationRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  railwayTransport: RailwayTransportExpression
  railwayTransportRef: StringExpression
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayTransportStationRelationSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayTransportStationRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  railwayTransport: RailwayTransportExpression
  railwayTransportRef: StringExpression
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayTransportSubscriptionArguments {
  arrivalTime: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureTime: StringExpression
  destination: StationExpression
  exs: [RailwayTransportExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  origin: StationExpression
  railwayTransportStationRelation: RailwayTransportStationRelationExpression
  railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequest: TransportRequestExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RailwayTransportTransportRequestRelation implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  railwayTransport(arrivalTime: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureTime: StringExpression, destination: StationExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, origin: StationExpression, railwayTransportStationRelation: RailwayTransportStationRelationExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransport
  railwayTransportRef: String
  railwayTransportRefCount: Int
  railwayTransportRefMax: String
  railwayTransportRefMin: String
  realmId: Int
  transportRequest(cargoTransportRequestRelation: CargoTransportRequestRelationExpression, cargoes: CargoExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: UserExpression, destination: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, origin: StringExpression, railwayTransport: RailwayTransportExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, transportRequestUserRelation: TransportRequestUserRelationExpression, truckTransports: TruckTransportExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportRequest
  transportRequestRef: String
  transportRequestRefCount: Int
  transportRequestRefMax: String
  transportRequestRefMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type RailwayTransportTransportRequestRelationConnection {
  edges: [RailwayTransportTransportRequestRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RailwayTransportTransportRequestRelationConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayTransportTransportRequestRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayTransportTransportRequestRelationOrderBy
  railwayTransport: RailwayTransportExpression
  railwayTransportRef: StringExpression
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayTransportTransportRequestRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayTransportTransportRequestRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayTransportTransportRequestRelationOrderBy
  railwayTransport: RailwayTransportExpression
  railwayTransportRef: StringExpression
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RailwayTransportTransportRequestRelationEdge {
  cursor: String
  node: RailwayTransportTransportRequestRelation
}

input RailwayTransportTransportRequestRelationExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayTransportTransportRequestRelationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  railwayTransport: RailwayTransportExpression
  railwayTransportRef: StringExpression
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayTransportTransportRequestRelationInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  railwayTransport: RailwayTransportInput
  railwayTransportRef: String
  realmId: Int
  transportRequest: TransportRequestInput
  transportRequestRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RailwayTransportTransportRequestRelationExpression
}

input RailwayTransportTransportRequestRelationListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  list: [RailwayTransportTransportRequestRelationInput]
  railwayTransport: RailwayTransportInput
  railwayTransportRef: String
  realmId: Int
  transportRequest: TransportRequestInput
  transportRequestRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RailwayTransportTransportRequestRelationExpression
}

input RailwayTransportTransportRequestRelationListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayTransportTransportRequestRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayTransportTransportRequestRelationOrderBy
  railwayTransport: RailwayTransportExpression
  railwayTransportRef: StringExpression
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayTransportTransportRequestRelationListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayTransportTransportRequestRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayTransportTransportRequestRelationOrderBy
  railwayTransport: RailwayTransportExpression
  railwayTransportRef: StringExpression
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayTransportTransportRequestRelationMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: RailwayTransportTransportRequestRelationInput
  isDeprecated: Boolean = false
  railwayTransport: RailwayTransportInput
  railwayTransportRef: String
  realmId: Int
  transportRequest: TransportRequestInput
  transportRequestRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RailwayTransportTransportRequestRelationExpression
}

input RailwayTransportTransportRequestRelationOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  railwayTransportRef: Sort
  realmId: Sort
  transportRequestRef: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RailwayTransportTransportRequestRelationQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayTransportTransportRequestRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  railwayTransport: RailwayTransportExpression
  railwayTransportRef: StringExpression
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayTransportTransportRequestRelationSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayTransportTransportRequestRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  railwayTransport: RailwayTransportExpression
  railwayTransportRef: StringExpression
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

"""租户"""
type Realm implements Meta & NamedStruct {
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """名称"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type RealmConnection {
  edges: [RealmEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RealmConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RealmOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RealmConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RealmOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RealmEdge {
  cursor: String
  node: Realm
}

input RealmExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RealmInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean = false
  name: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RealmExpression
}

input RealmListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean = false
  list: [RealmInput]
  name: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RealmExpression
}

input RealmListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RealmOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RealmListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RealmOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RealmMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  input: RealmInput
  isDeprecated: Boolean = false
  name: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RealmExpression
}

input RealmOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RealmQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RealmSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

"""角色"""
type Role implements Meta & NamedStruct {
  """组合"""
  composites(after: ID, before: ID, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Role]
  compositesAggregate(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  compositesConnection(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): RoleConnection
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String
  groupRoleRelation(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupRoleRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [GroupRoleRelation]
  groupRoleRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupRoleRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleRelation
  groupRoleRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupRoleRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleRelationConnection

  """组"""
  groups(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Group]
  groupsAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Group
  groupsConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): GroupConnection

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """名称"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String
  permissionRoleRelation(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: PermissionRoleRelationOrderBy, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [PermissionRoleRelation]
  permissionRoleRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: PermissionRoleRelationOrderBy, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionRoleRelation
  permissionRoleRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: PermissionRoleRelationOrderBy, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionRoleRelationConnection

  """权限"""
  permissions(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, field: StringExpression, first: Int, groupBy: [String!], includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: PermissionOrderBy, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Permission]
  permissionsAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, field: StringExpression, first: Int, groupBy: [String!], includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: PermissionOrderBy, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Permission
  permissionsConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, field: StringExpression, first: Int, groupBy: [String!], includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: PermissionOrderBy, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionConnection

  """租户"""
  realm(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmId: Int
  roleCompositeRelation(after: ID, before: ID, composite: RoleExpression, compositeRef: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleCompositeRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RoleCompositeRelation]
  roleCompositeRelationAggregate(composite: RoleExpression, compositeRef: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleCompositeRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleCompositeRelation
  roleCompositeRelationConnection(composite: RoleExpression, compositeRef: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleCompositeRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleCompositeRelationConnection
  roleUserRelation(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleUserRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): [RoleUserRelation]
  roleUserRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleUserRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): RoleUserRelation
  roleUserRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleUserRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): RoleUserRelationConnection
  syncRolePolicy: Boolean
  updateTime: Timestamp
  updateUserId: String

  """用户"""
  users(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): [User]
  usersAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): User
  usersConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): UserConnection
  version: Int
}

type RoleCompositeRelation implements Meta {
  composite(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  compositeRef: String
  compositeRefCount: Int
  compositeRefMax: String
  compositeRefMin: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  role(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  roleRef: String
  roleRefCount: Int
  roleRefMax: String
  roleRefMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type RoleCompositeRelationConnection {
  edges: [RoleCompositeRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RoleCompositeRelationConnectionQueryArguments {
  after: ID
  before: ID
  composite: RoleExpression
  compositeRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleCompositeRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleCompositeRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  composite: RoleExpression
  compositeRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleCompositeRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RoleCompositeRelationEdge {
  cursor: String
  node: RoleCompositeRelation
}

input RoleCompositeRelationExpression {
  composite: RoleExpression
  compositeRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeRelationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleCompositeRelationInput {
  composite: RoleInput
  compositeRef: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RoleCompositeRelationExpression
}

input RoleCompositeRelationListMutationArguments {
  composite: RoleInput
  compositeRef: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  list: [RoleCompositeRelationInput]
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RoleCompositeRelationExpression
}

input RoleCompositeRelationListQueryArguments {
  after: ID
  before: ID
  composite: RoleExpression
  compositeRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleCompositeRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleCompositeRelationListSubscriptionArguments {
  after: ID
  before: ID
  composite: RoleExpression
  compositeRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleCompositeRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleCompositeRelationMutationArguments {
  composite: RoleInput
  compositeRef: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: RoleCompositeRelationInput
  isDeprecated: Boolean = false
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RoleCompositeRelationExpression
}

input RoleCompositeRelationOrderBy {
  compositeRef: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  roleRef: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RoleCompositeRelationQueryArguments {
  composite: RoleExpression
  compositeRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleCompositeRelationSubscriptionArguments {
  composite: RoleExpression
  compositeRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RoleConnection {
  edges: [RoleEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RoleConnectionQueryArguments {
  after: ID
  before: ID
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  first: Int
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RoleOrderBy
  permissionRoleRelation: PermissionRoleRelationExpression
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleCompositeRelation: RoleCompositeRelationExpression
  roleUserRelation: RoleUserRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input RoleConnectionSubscriptionArguments {
  after: ID
  before: ID
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  first: Int
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RoleOrderBy
  permissionRoleRelation: PermissionRoleRelationExpression
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleCompositeRelation: RoleCompositeRelationExpression
  roleUserRelation: RoleUserRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

type RoleEdge {
  cursor: String
  node: Role
}

input RoleExpression {
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  groupRoleRelation: GroupRoleRelationExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  permissionRoleRelation: PermissionRoleRelationExpression
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleCompositeRelation: RoleCompositeRelationExpression
  roleUserRelation: RoleUserRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input RoleInput {
  composites: [RoleInput]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  groupRoleRelation: [GroupRoleRelationInput]
  groups: [GroupInput]
  id: ID
  isDeprecated: Boolean = false
  name: String
  permissionRoleRelation: [PermissionRoleRelationInput]
  permissions: [PermissionInput]
  realm: RealmInput
  realmId: Int
  roleCompositeRelation: [RoleCompositeRelationInput]
  roleUserRelation: [RoleUserRelationInput]
  updateTime: Timestamp
  updateUserId: String
  users: [UserInput]
  version: Int
  where: RoleExpression
}

input RoleListMutationArguments {
  composites: [RoleInput]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  groupRoleRelation: [GroupRoleRelationInput]
  groups: [GroupInput]
  id: ID
  isDeprecated: Boolean = false
  list: [RoleInput]
  name: String
  permissionRoleRelation: [PermissionRoleRelationInput]
  permissions: [PermissionInput]
  realm: RealmInput
  realmId: Int
  roleCompositeRelation: [RoleCompositeRelationInput]
  roleUserRelation: [RoleUserRelationInput]
  updateTime: Timestamp
  updateUserId: String
  users: [UserInput]
  version: Int
  where: RoleExpression
}

input RoleListQueryArguments {
  after: ID
  before: ID
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  first: Int
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RoleOrderBy
  permissionRoleRelation: PermissionRoleRelationExpression
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleCompositeRelation: RoleCompositeRelationExpression
  roleUserRelation: RoleUserRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input RoleListSubscriptionArguments {
  after: ID
  before: ID
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  first: Int
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RoleOrderBy
  permissionRoleRelation: PermissionRoleRelationExpression
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleCompositeRelation: RoleCompositeRelationExpression
  roleUserRelation: RoleUserRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input RoleMutationArguments {
  composites: [RoleInput]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  groupRoleRelation: [GroupRoleRelationInput]
  groups: [GroupInput]
  id: ID
  input: RoleInput
  isDeprecated: Boolean = false
  name: String
  permissionRoleRelation: [PermissionRoleRelationInput]
  permissions: [PermissionInput]
  realm: RealmInput
  realmId: Int
  roleCompositeRelation: [RoleCompositeRelationInput]
  roleUserRelation: [RoleUserRelationInput]
  updateTime: Timestamp
  updateUserId: String
  users: [UserInput]
  version: Int
  where: RoleExpression
}

input RoleOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RoleQueryArguments {
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  permissionRoleRelation: PermissionRoleRelationExpression
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleCompositeRelation: RoleCompositeRelationExpression
  roleUserRelation: RoleUserRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input RoleSubscriptionArguments {
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  permissionRoleRelation: PermissionRoleRelationExpression
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleCompositeRelation: RoleCompositeRelationExpression
  roleUserRelation: RoleUserRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

type RoleUserRelation implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  role(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  roleRef: String
  roleRefCount: Int
  roleRefMax: String
  roleRefMin: String
  updateTime: Timestamp
  updateUserId: String
  user(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): User
  userRef: String
  userRefCount: Int
  userRefMax: String
  userRefMin: String
  version: Int
}

type RoleUserRelationConnection {
  edges: [RoleUserRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RoleUserRelationConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleUserRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleUserRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input RoleUserRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleUserRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleUserRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

type RoleUserRelationEdge {
  cursor: String
  node: RoleUserRelation
}

input RoleUserRelationExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleUserRelationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input RoleUserRelationInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: String
  version: Int
  where: RoleUserRelationExpression
}

input RoleUserRelationListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  list: [RoleUserRelationInput]
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: String
  version: Int
  where: RoleUserRelationExpression
}

input RoleUserRelationListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleUserRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleUserRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input RoleUserRelationListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleUserRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleUserRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input RoleUserRelationMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: RoleUserRelationInput
  isDeprecated: Boolean = false
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: String
  version: Int
  where: RoleUserRelationExpression
}

input RoleUserRelationOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  roleRef: Sort
  updateTime: Sort
  updateUserId: Sort
  userRef: Sort
  version: Sort
}

input RoleUserRelationQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleUserRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input RoleUserRelationSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleUserRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

enum Sort {
  ASC
  DESC
}

input SortExpression {
  arr: [Sort]
  opr: Operator = EQ
  val: Sort
}

"""车站"""
type Station implements Meta {
  """城市信息"""
  city(administrativeCode: StringExpression, city: StringExpression, cityAbbreviation: StringExpression, cityCode: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, province: StringExpression, provinceAbbreviation: StringExpression, provinceCode: StringExpression, realmId: IntExpression, unitName: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): City!
  cityStationRelation(after: ID, before: ID, city: CityExpression, cityRef: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: CityStationRelationOrderBy, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [CityStationRelation]
  cityStationRelationAggregate(city: CityExpression, cityRef: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: CityStationRelationOrderBy, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): CityStationRelation
  cityStationRelationConnection(city: CityExpression, cityRef: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: CityStationRelationOrderBy, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): CityStationRelationConnection

  """编号"""
  code: String!
  codeCount: Int
  codeMax: String
  codeMin: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """车站ID"""
  id: ID!
  idCount: Int
  idMax: Int
  idMin: Int

  """首字母"""
  initials: String!
  initialsCount: Int
  initialsMax: String
  initialsMin: String
  isDeprecated: Boolean

  """车站名"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """拼音"""
  pinyin: String!
  pinyinCount: Int
  pinyinMax: String
  pinyinMin: String
  realmId: Int

  """电报码"""
  telegraphCode: String!
  telegraphCodeCount: Int
  telegraphCodeMax: String
  telegraphCodeMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type StationConnection {
  edges: [StationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input StationConnectionQueryArguments {
  after: ID
  before: ID
  city: CityExpression
  cityStationRelation: CityStationRelationExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [StationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  initials: StringExpression
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: StationOrderBy
  pinyin: StringExpression
  realmId: IntExpression
  telegraphCode: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input StationConnectionSubscriptionArguments {
  after: ID
  before: ID
  city: CityExpression
  cityStationRelation: CityStationRelationExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [StationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  initials: StringExpression
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: StationOrderBy
  pinyin: StringExpression
  realmId: IntExpression
  telegraphCode: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type StationEdge {
  cursor: String
  node: Station
}

input StationExpression {
  city: CityExpression
  cityStationRelation: CityStationRelationExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [StationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  initials: StringExpression
  name: StringExpression
  not: Boolean = false
  pinyin: StringExpression
  realmId: IntExpression
  telegraphCode: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input StationInput {
  city: CityInput
  cityStationRelation: [CityStationRelationInput]
  code: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  initials: String
  isDeprecated: Boolean = false
  name: String
  pinyin: String
  realmId: Int
  telegraphCode: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: StationExpression
}

input StationListMutationArguments {
  city: CityInput
  cityStationRelation: [CityStationRelationInput]
  code: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  initials: String
  isDeprecated: Boolean = false
  list: [StationInput]
  name: String
  pinyin: String
  realmId: Int
  telegraphCode: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: StationExpression
}

input StationListQueryArguments {
  after: ID
  before: ID
  city: CityExpression
  cityStationRelation: CityStationRelationExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [StationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  initials: StringExpression
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: StationOrderBy
  pinyin: StringExpression
  realmId: IntExpression
  telegraphCode: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input StationListSubscriptionArguments {
  after: ID
  before: ID
  city: CityExpression
  cityStationRelation: CityStationRelationExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [StationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  initials: StringExpression
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: StationOrderBy
  pinyin: StringExpression
  realmId: IntExpression
  telegraphCode: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input StationMutationArguments {
  city: CityInput
  cityStationRelation: [CityStationRelationInput]
  code: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  initials: String
  input: StationInput
  isDeprecated: Boolean = false
  name: String
  pinyin: String
  realmId: Int
  telegraphCode: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: StationExpression
}

input StationOrderBy {
  code: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  initials: Sort
  isDeprecated: Sort
  name: Sort
  pinyin: Sort
  realmId: Sort
  telegraphCode: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input StationQueryArguments {
  city: CityExpression
  cityStationRelation: CityStationRelationExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [StationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  initials: StringExpression
  name: StringExpression
  not: Boolean = false
  pinyin: StringExpression
  realmId: IntExpression
  telegraphCode: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input StationSubscriptionArguments {
  city: CityExpression
  cityStationRelation: CityStationRelationExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [StationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  initials: StringExpression
  name: StringExpression
  not: Boolean = false
  pinyin: StringExpression
  realmId: IntExpression
  telegraphCode: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type StationTransportProductRelation implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  station(city: CityExpression, cityStationRelation: CityStationRelationExpression, code: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, initials: StringExpression, name: StringExpression, pinyin: StringExpression, realmId: IntExpression, telegraphCode: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Station
  stationRef: String
  stationRefCount: Int
  stationRefMax: String
  stationRefMin: String
  transportProduct(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, destination: StationExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, origin: StationExpression, price: FloatExpression, realmId: IntExpression, stationTransportProductRelation: StationTransportProductRelationExpression, unit: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportProduct
  transportProductRef: String
  transportProductRefCount: Int
  transportProductRefMax: String
  transportProductRefMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type StationTransportProductRelationConnection {
  edges: [StationTransportProductRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input StationTransportProductRelationConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [StationTransportProductRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: StationTransportProductRelationOrderBy
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  transportProduct: TransportProductExpression
  transportProductRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input StationTransportProductRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [StationTransportProductRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: StationTransportProductRelationOrderBy
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  transportProduct: TransportProductExpression
  transportProductRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type StationTransportProductRelationEdge {
  cursor: String
  node: StationTransportProductRelation
}

input StationTransportProductRelationExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [StationTransportProductRelationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  transportProduct: TransportProductExpression
  transportProductRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input StationTransportProductRelationInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  realmId: Int
  station: StationInput
  stationRef: String
  transportProduct: TransportProductInput
  transportProductRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: StationTransportProductRelationExpression
}

input StationTransportProductRelationListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  list: [StationTransportProductRelationInput]
  realmId: Int
  station: StationInput
  stationRef: String
  transportProduct: TransportProductInput
  transportProductRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: StationTransportProductRelationExpression
}

input StationTransportProductRelationListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [StationTransportProductRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: StationTransportProductRelationOrderBy
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  transportProduct: TransportProductExpression
  transportProductRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input StationTransportProductRelationListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [StationTransportProductRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: StationTransportProductRelationOrderBy
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  transportProduct: TransportProductExpression
  transportProductRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input StationTransportProductRelationMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: StationTransportProductRelationInput
  isDeprecated: Boolean = false
  realmId: Int
  station: StationInput
  stationRef: String
  transportProduct: TransportProductInput
  transportProductRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: StationTransportProductRelationExpression
}

input StationTransportProductRelationOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  stationRef: Sort
  transportProductRef: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input StationTransportProductRelationQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [StationTransportProductRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  transportProduct: TransportProductExpression
  transportProductRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input StationTransportProductRelationSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [StationTransportProductRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  station: StationExpression
  stationRef: StringExpression
  transportProduct: TransportProductExpression
  transportProductRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input StringExpression {
  arr: [String]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: String
}

type Subscription {
  cargo(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CargoExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, quantity: IntExpression, realmId: IntExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, weight: FloatExpression): Cargo
  cargoConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CargoExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: CargoOrderBy, quantity: IntExpression, realmId: IntExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, weight: FloatExpression): CargoConnection
  cargoList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CargoExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: CargoOrderBy, quantity: IntExpression, realmId: IntExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, weight: FloatExpression): [Cargo]
  cargoTransportRequestRelation(cargo: CargoExpression, cargoRef: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CargoTransportRequestRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): CargoTransportRequestRelation
  cargoTransportRequestRelationConnection(after: ID, before: ID, cargo: CargoExpression, cargoRef: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CargoTransportRequestRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: CargoTransportRequestRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): CargoTransportRequestRelationConnection
  cargoTransportRequestRelationList(after: ID, before: ID, cargo: CargoExpression, cargoRef: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CargoTransportRequestRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: CargoTransportRequestRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [CargoTransportRequestRelation]
  city(administrativeCode: StringExpression, city: StringExpression, cityAbbreviation: StringExpression, cityCode: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CityExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, province: StringExpression, provinceAbbreviation: StringExpression, provinceCode: StringExpression, realmId: IntExpression, unitName: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): City
  cityConnection(administrativeCode: StringExpression, after: ID, before: ID, city: StringExpression, cityAbbreviation: StringExpression, cityCode: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CityExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: CityOrderBy, province: StringExpression, provinceAbbreviation: StringExpression, provinceCode: StringExpression, realmId: IntExpression, unitName: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): CityConnection
  cityList(administrativeCode: StringExpression, after: ID, before: ID, city: StringExpression, cityAbbreviation: StringExpression, cityCode: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CityExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: CityOrderBy, province: StringExpression, provinceAbbreviation: StringExpression, provinceCode: StringExpression, realmId: IntExpression, unitName: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [City]
  cityStationRelation(city: CityExpression, cityRef: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CityStationRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): CityStationRelation
  cityStationRelationConnection(after: ID, before: ID, city: CityExpression, cityRef: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CityStationRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: CityStationRelationOrderBy, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): CityStationRelationConnection
  cityStationRelationList(after: ID, before: ID, city: CityExpression, cityRef: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [CityStationRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: CityStationRelationOrderBy, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [CityStationRelation]
  group(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, exs: [GroupExpression], groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Group
  groupConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, exs: [GroupExpression], first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): GroupConnection
  groupList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, exs: [GroupExpression], first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Group]
  groupRoleRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleRelationExpression], group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleRelation
  groupRoleRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleRelationExpression], first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupRoleRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleRelationConnection
  groupRoleRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleRelationExpression], first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupRoleRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [GroupRoleRelation]
  groupUserRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupUserRelationExpression], group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): GroupUserRelation
  groupUserRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupUserRelationExpression], first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupUserRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): GroupUserRelationConnection
  groupUserRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupUserRelationExpression], first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupUserRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): [GroupUserRelation]
  permission(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], field: StringExpression, groupBy: [String!], includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, permissionRoleRelation: PermissionRoleRelationExpression, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Permission
  permissionConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], field: StringExpression, first: Int, groupBy: [String!], includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: PermissionOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionConnection
  permissionList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], field: StringExpression, first: Int, groupBy: [String!], includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: PermissionOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Permission]
  permissionRoleRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [PermissionRoleRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionRoleRelation
  permissionRoleRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [PermissionRoleRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: PermissionRoleRelationOrderBy, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionRoleRelationConnection
  permissionRoleRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [PermissionRoleRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: PermissionRoleRelationOrderBy, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [PermissionRoleRelation]
  railwayTransport(arrivalTime: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureTime: StringExpression, destination: StationExpression, exs: [RailwayTransportExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, origin: StationExpression, railwayTransportStationRelation: RailwayTransportStationRelationExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransport
  railwayTransportConnection(after: ID, arrivalTime: StringExpression, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureTime: StringExpression, destination: StationExpression, exs: [RailwayTransportExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayTransportOrderBy, origin: StationExpression, railwayTransportStationRelation: RailwayTransportStationRelationExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransportConnection
  railwayTransportList(after: ID, arrivalTime: StringExpression, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureTime: StringExpression, destination: StationExpression, exs: [RailwayTransportExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayTransportOrderBy, origin: StationExpression, railwayTransportStationRelation: RailwayTransportStationRelationExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RailwayTransport]
  railwayTransportStationRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayTransportStationRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransportStationRelation
  railwayTransportStationRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayTransportStationRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayTransportStationRelationOrderBy, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransportStationRelationConnection
  railwayTransportStationRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayTransportStationRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayTransportStationRelationOrderBy, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RailwayTransportStationRelation]
  railwayTransportTransportRequestRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayTransportTransportRequestRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransportTransportRequestRelation
  railwayTransportTransportRequestRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayTransportTransportRequestRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayTransportTransportRequestRelationOrderBy, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransportTransportRequestRelationConnection
  railwayTransportTransportRequestRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayTransportTransportRequestRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayTransportTransportRequestRelationOrderBy, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RailwayTransportTransportRequestRelation]
  realm(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RealmExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RealmExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RealmOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RealmConnection
  realmList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RealmExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RealmOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Realm]
  role(composites: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  roleCompositeRelation(composite: RoleExpression, compositeRef: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleCompositeRelation
  roleCompositeRelationConnection(after: ID, before: ID, composite: RoleExpression, compositeRef: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleCompositeRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleCompositeRelationConnection
  roleCompositeRelationList(after: ID, before: ID, composite: RoleExpression, compositeRef: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleCompositeRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RoleCompositeRelation]
  roleConnection(after: ID, before: ID, composites: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): RoleConnection
  roleList(after: ID, before: ID, composites: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Role]
  roleUserRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleUserRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): RoleUserRelation
  roleUserRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleUserRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleUserRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): RoleUserRelationConnection
  roleUserRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleUserRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleUserRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): [RoleUserRelation]
  station(city: CityExpression, cityStationRelation: CityStationRelationExpression, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [StationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, initials: StringExpression, name: StringExpression, not: Boolean = false, pinyin: StringExpression, realmId: IntExpression, telegraphCode: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Station
  stationConnection(after: ID, before: ID, city: CityExpression, cityStationRelation: CityStationRelationExpression, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [StationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, initials: StringExpression, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: StationOrderBy, pinyin: StringExpression, realmId: IntExpression, telegraphCode: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): StationConnection
  stationList(after: ID, before: ID, city: CityExpression, cityStationRelation: CityStationRelationExpression, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [StationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, initials: StringExpression, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: StationOrderBy, pinyin: StringExpression, realmId: IntExpression, telegraphCode: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Station]
  stationTransportProductRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [StationTransportProductRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, transportProduct: TransportProductExpression, transportProductRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): StationTransportProductRelation
  stationTransportProductRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [StationTransportProductRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: StationTransportProductRelationOrderBy, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, transportProduct: TransportProductExpression, transportProductRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): StationTransportProductRelationConnection
  stationTransportProductRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [StationTransportProductRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: StationTransportProductRelationOrderBy, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, transportProduct: TransportProductExpression, transportProductRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [StationTransportProductRelation]
  transportProduct(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, destination: StationExpression, exs: [TransportProductExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, origin: StationExpression, price: FloatExpression, realmId: IntExpression, stationTransportProductRelation: StationTransportProductRelationExpression, unit: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportProduct
  transportProductConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, destination: StationExpression, exs: [TransportProductExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TransportProductOrderBy, origin: StationExpression, price: FloatExpression, realmId: IntExpression, stationTransportProductRelation: StationTransportProductRelationExpression, unit: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportProductConnection
  transportProductList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, destination: StationExpression, exs: [TransportProductExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TransportProductOrderBy, origin: StationExpression, price: FloatExpression, realmId: IntExpression, stationTransportProductRelation: StationTransportProductRelationExpression, unit: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [TransportProduct]
  transportRequest(cargoTransportRequestRelation: CargoTransportRequestRelationExpression, cargoes: CargoExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: UserExpression, destination: StringExpression, exs: [TransportRequestExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, origin: StringExpression, railwayTransport: RailwayTransportExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, transportRequestUserRelation: TransportRequestUserRelationExpression, truckTransports: TruckTransportExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportRequest
  transportRequestConnection(after: ID, before: ID, cargoTransportRequestRelation: CargoTransportRequestRelationExpression, cargoes: CargoExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: UserExpression, destination: StringExpression, exs: [TransportRequestExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TransportRequestOrderBy, origin: StringExpression, railwayTransport: RailwayTransportExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, transportRequestUserRelation: TransportRequestUserRelationExpression, truckTransports: TruckTransportExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportRequestConnection
  transportRequestList(after: ID, before: ID, cargoTransportRequestRelation: CargoTransportRequestRelationExpression, cargoes: CargoExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: UserExpression, destination: StringExpression, exs: [TransportRequestExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TransportRequestOrderBy, origin: StringExpression, railwayTransport: RailwayTransportExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, transportRequestUserRelation: TransportRequestUserRelationExpression, truckTransports: TruckTransportExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [TransportRequest]
  transportRequestTruckTransportRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [TransportRequestTruckTransportRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportRequestTruckTransportRelation
  transportRequestTruckTransportRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [TransportRequestTruckTransportRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TransportRequestTruckTransportRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportRequestTruckTransportRelationConnection
  transportRequestTruckTransportRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [TransportRequestTruckTransportRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TransportRequestTruckTransportRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [TransportRequestTruckTransportRelation]
  transportRequestUserRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [TransportRequestUserRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: IntExpression, version: IntExpression): TransportRequestUserRelation
  transportRequestUserRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [TransportRequestUserRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TransportRequestUserRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: IntExpression, version: IntExpression): TransportRequestUserRelationConnection
  transportRequestUserRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [TransportRequestUserRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TransportRequestUserRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: IntExpression, version: IntExpression): [TransportRequestUserRelation]
  truckTransport(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, destination: StringExpression, exs: [TruckTransportExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, origin: StringExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, truckTransportVehicleRelation: TruckTransportVehicleRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, version: IntExpression): TruckTransport
  truckTransportConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, destination: StringExpression, exs: [TruckTransportExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TruckTransportOrderBy, origin: StringExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, truckTransportVehicleRelation: TruckTransportVehicleRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, version: IntExpression): TruckTransportConnection
  truckTransportList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, destination: StringExpression, exs: [TruckTransportExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TruckTransportOrderBy, origin: StringExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, truckTransportVehicleRelation: TruckTransportVehicleRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, version: IntExpression): [TruckTransport]
  truckTransportVehicleRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [TruckTransportVehicleRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, vehicleRef: StringExpression, version: IntExpression): TruckTransportVehicleRelation
  truckTransportVehicleRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [TruckTransportVehicleRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TruckTransportVehicleRelationOrderBy, realmId: IntExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, vehicleRef: StringExpression, version: IntExpression): TruckTransportVehicleRelationConnection
  truckTransportVehicleRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [TruckTransportVehicleRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: TruckTransportVehicleRelationOrderBy, realmId: IntExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, vehicleRef: StringExpression, version: IntExpression): [TruckTransportVehicleRelation]
  user(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, not: Boolean = false, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): User
  userConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, not: Boolean = false, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): UserConnection
  userList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, not: Boolean = false, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): [User]
  userPhonesRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, phonesRef: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): UserPhonesRelation
  userPhonesRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserPhonesRelationOrderBy, phonesRef: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): UserPhonesRelationConnection
  userPhonesRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserPhonesRelationOrderBy, phonesRef: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): [UserPhonesRelation]
  userVehicleRelation(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserVehicleRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: IntExpression, vehicle: VehicleExpression, vehicleRef: StringExpression, version: IntExpression): UserVehicleRelation
  userVehicleRelationConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserVehicleRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserVehicleRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: IntExpression, vehicle: VehicleExpression, vehicleRef: StringExpression, version: IntExpression): UserVehicleRelationConnection
  userVehicleRelationList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserVehicleRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserVehicleRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: IntExpression, vehicle: VehicleExpression, vehicleRef: StringExpression, version: IntExpression): [UserVehicleRelation]
  vehicle(capacity: IntExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [VehicleExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, licensePlate: StringExpression, not: Boolean = false, owner: UserExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userVehicleRelation: UserVehicleRelationExpression, version: IntExpression): Vehicle
  vehicleConnection(after: ID, before: ID, capacity: IntExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [VehicleExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, licensePlate: StringExpression, not: Boolean = false, offset: Int, orderBy: VehicleOrderBy, owner: UserExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userVehicleRelation: UserVehicleRelationExpression, version: IntExpression): VehicleConnection
  vehicleList(after: ID, before: ID, capacity: IntExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [VehicleExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, licensePlate: StringExpression, not: Boolean = false, offset: Int, orderBy: VehicleOrderBy, owner: UserExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userVehicleRelation: UserVehicleRelationExpression, version: IntExpression): [Vehicle]
}

scalar Time

scalar Timestamp

"""运输产品"""
type TransportProduct implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """到站"""
  destination(city: CityExpression, cityStationRelation: CityStationRelationExpression, code: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, initials: StringExpression, name: StringExpression, pinyin: StringExpression, realmId: IntExpression, telegraphCode: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Station!

  """运输产品ID"""
  id: ID!
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """发站"""
  origin(city: CityExpression, cityStationRelation: CityStationRelationExpression, code: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, initials: StringExpression, name: StringExpression, pinyin: StringExpression, realmId: IntExpression, telegraphCode: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Station!

  """单价"""
  price: Float!
  priceAvg: Float
  priceCount: Int
  priceMax: Float
  priceMin: Float
  priceSum: Float
  realmId: Int
  stationTransportProductRelation(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: StationTransportProductRelationOrderBy, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, transportProduct: TransportProductExpression, transportProductRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [StationTransportProductRelation]
  stationTransportProductRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: StationTransportProductRelationOrderBy, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, transportProduct: TransportProductExpression, transportProductRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): StationTransportProductRelation
  stationTransportProductRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: StationTransportProductRelationOrderBy, realmId: IntExpression, station: StationExpression, stationRef: StringExpression, transportProduct: TransportProductExpression, transportProductRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): StationTransportProductRelationConnection

  """计费单位"""
  unit: String!
  unitCount: Int
  unitMax: String
  unitMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type TransportProductConnection {
  edges: [TransportProductEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input TransportProductConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  destination: StationExpression
  exs: [TransportProductExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TransportProductOrderBy
  origin: StationExpression
  price: FloatExpression
  realmId: IntExpression
  stationTransportProductRelation: StationTransportProductRelationExpression
  unit: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TransportProductConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  destination: StationExpression
  exs: [TransportProductExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TransportProductOrderBy
  origin: StationExpression
  price: FloatExpression
  realmId: IntExpression
  stationTransportProductRelation: StationTransportProductRelationExpression
  unit: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type TransportProductEdge {
  cursor: String
  node: TransportProduct
}

input TransportProductExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  destination: StationExpression
  exs: [TransportProductExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  origin: StationExpression
  price: FloatExpression
  realmId: IntExpression
  stationTransportProductRelation: StationTransportProductRelationExpression
  unit: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TransportProductInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  destination: StationInput
  id: ID
  isDeprecated: Boolean = false
  origin: StationInput
  price: Float
  realmId: Int
  stationTransportProductRelation: [StationTransportProductRelationInput]
  unit: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: TransportProductExpression
}

input TransportProductListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  destination: StationInput
  id: ID
  isDeprecated: Boolean = false
  list: [TransportProductInput]
  origin: StationInput
  price: Float
  realmId: Int
  stationTransportProductRelation: [StationTransportProductRelationInput]
  unit: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: TransportProductExpression
}

input TransportProductListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  destination: StationExpression
  exs: [TransportProductExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TransportProductOrderBy
  origin: StationExpression
  price: FloatExpression
  realmId: IntExpression
  stationTransportProductRelation: StationTransportProductRelationExpression
  unit: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TransportProductListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  destination: StationExpression
  exs: [TransportProductExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TransportProductOrderBy
  origin: StationExpression
  price: FloatExpression
  realmId: IntExpression
  stationTransportProductRelation: StationTransportProductRelationExpression
  unit: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TransportProductMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  destination: StationInput
  id: ID
  input: TransportProductInput
  isDeprecated: Boolean = false
  origin: StationInput
  price: Float
  realmId: Int
  stationTransportProductRelation: [StationTransportProductRelationInput]
  unit: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: TransportProductExpression
}

input TransportProductOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  price: Sort
  realmId: Sort
  unit: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input TransportProductQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  destination: StationExpression
  exs: [TransportProductExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  origin: StationExpression
  price: FloatExpression
  realmId: IntExpression
  stationTransportProductRelation: StationTransportProductRelationExpression
  unit: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TransportProductSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  destination: StationExpression
  exs: [TransportProductExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  origin: StationExpression
  price: FloatExpression
  realmId: IntExpression
  stationTransportProductRelation: StationTransportProductRelationExpression
  unit: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

"""运输需求"""
type TransportRequest implements Meta {
  cargoTransportRequestRelation(after: ID, before: ID, cargo: CargoExpression, cargoRef: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: CargoTransportRequestRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [CargoTransportRequestRelation]
  cargoTransportRequestRelationAggregate(cargo: CargoExpression, cargoRef: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: CargoTransportRequestRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): CargoTransportRequestRelation
  cargoTransportRequestRelationConnection(cargo: CargoExpression, cargoRef: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: CargoTransportRequestRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): CargoTransportRequestRelationConnection

  """关联的货物信息"""
  cargoes(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: CargoOrderBy, quantity: IntExpression, realmId: IntExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, weight: FloatExpression): [Cargo]
  cargoesAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: CargoOrderBy, quantity: IntExpression, realmId: IntExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, weight: FloatExpression): Cargo
  cargoesConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: CargoOrderBy, quantity: IntExpression, realmId: IntExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, weight: FloatExpression): CargoConnection
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """提交运输需求的客户"""
  customer(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): User!

  """目的地"""
  destination: String!
  destinationCount: Int
  destinationMax: String
  destinationMin: String

  """运输需求ID"""
  id: ID!
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """出发地"""
  origin: String!
  originCount: Int
  originMax: String
  originMin: String

  """关联的铁路运输信息"""
  railwayTransport(arrivalTime: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureTime: StringExpression, destination: StationExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, origin: StationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransport
  railwayTransportTransportRequestRelation(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RailwayTransportTransportRequestRelationOrderBy, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RailwayTransportTransportRequestRelation]
  railwayTransportTransportRequestRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RailwayTransportTransportRequestRelationOrderBy, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransportTransportRequestRelation
  railwayTransportTransportRequestRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RailwayTransportTransportRequestRelationOrderBy, railwayTransport: RailwayTransportExpression, railwayTransportRef: StringExpression, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayTransportTransportRequestRelationConnection
  realmId: Int

  """运输状态"""
  status: TransportStatus!
  transportRequestTruckTransportRelation(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: TransportRequestTruckTransportRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [TransportRequestTruckTransportRelation]
  transportRequestTruckTransportRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: TransportRequestTruckTransportRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportRequestTruckTransportRelation
  transportRequestTruckTransportRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: TransportRequestTruckTransportRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportRequestTruckTransportRelationConnection
  transportRequestUserRelation(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: TransportRequestUserRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: IntExpression, version: IntExpression): [TransportRequestUserRelation]

  """关联的汽车运输信息列表"""
  truckTransports(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, destination: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: TruckTransportOrderBy, origin: StringExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, version: IntExpression): [TruckTransport]
  truckTransportsAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, destination: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: TruckTransportOrderBy, origin: StringExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, version: IntExpression): TruckTransport
  truckTransportsConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, destination: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: TruckTransportOrderBy, origin: StringExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, version: IntExpression): TruckTransportConnection
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type TransportRequestConnection {
  edges: [TransportRequestEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input TransportRequestConnectionQueryArguments {
  after: ID
  before: ID
  cargoTransportRequestRelation: CargoTransportRequestRelationExpression
  cargoes: CargoExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: UserExpression
  destination: StringExpression
  exs: [TransportRequestExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TransportRequestOrderBy
  origin: StringExpression
  railwayTransport: RailwayTransportExpression
  railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression
  transportRequestUserRelation: TransportRequestUserRelationExpression
  truckTransports: TruckTransportExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TransportRequestConnectionSubscriptionArguments {
  after: ID
  before: ID
  cargoTransportRequestRelation: CargoTransportRequestRelationExpression
  cargoes: CargoExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: UserExpression
  destination: StringExpression
  exs: [TransportRequestExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TransportRequestOrderBy
  origin: StringExpression
  railwayTransport: RailwayTransportExpression
  railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression
  transportRequestUserRelation: TransportRequestUserRelationExpression
  truckTransports: TruckTransportExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type TransportRequestEdge {
  cursor: String
  node: TransportRequest
}

input TransportRequestExpression {
  cargoTransportRequestRelation: CargoTransportRequestRelationExpression
  cargoes: CargoExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: UserExpression
  destination: StringExpression
  exs: [TransportRequestExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  origin: StringExpression
  railwayTransport: RailwayTransportExpression
  railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression
  transportRequestUserRelation: TransportRequestUserRelationExpression
  truckTransports: TruckTransportExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TransportRequestInput {
  cargoTransportRequestRelation: [CargoTransportRequestRelationInput]
  cargoes: [CargoInput]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  customer: UserInput
  destination: String
  id: ID
  isDeprecated: Boolean = false
  origin: String
  railwayTransport: RailwayTransportInput
  railwayTransportTransportRequestRelation: [RailwayTransportTransportRequestRelationInput]
  realmId: Int
  status: TransportStatus
  transportRequestTruckTransportRelation: [TransportRequestTruckTransportRelationInput]
  transportRequestUserRelation: [TransportRequestUserRelationInput]
  truckTransports: [TruckTransportInput]
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: TransportRequestExpression
}

input TransportRequestListMutationArguments {
  cargoTransportRequestRelation: [CargoTransportRequestRelationInput]
  cargoes: [CargoInput]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  customer: UserInput
  destination: String
  id: ID
  isDeprecated: Boolean = false
  list: [TransportRequestInput]
  origin: String
  railwayTransport: RailwayTransportInput
  railwayTransportTransportRequestRelation: [RailwayTransportTransportRequestRelationInput]
  realmId: Int
  status: TransportStatus
  transportRequestTruckTransportRelation: [TransportRequestTruckTransportRelationInput]
  transportRequestUserRelation: [TransportRequestUserRelationInput]
  truckTransports: [TruckTransportInput]
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: TransportRequestExpression
}

input TransportRequestListQueryArguments {
  after: ID
  before: ID
  cargoTransportRequestRelation: CargoTransportRequestRelationExpression
  cargoes: CargoExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: UserExpression
  destination: StringExpression
  exs: [TransportRequestExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TransportRequestOrderBy
  origin: StringExpression
  railwayTransport: RailwayTransportExpression
  railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression
  transportRequestUserRelation: TransportRequestUserRelationExpression
  truckTransports: TruckTransportExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TransportRequestListSubscriptionArguments {
  after: ID
  before: ID
  cargoTransportRequestRelation: CargoTransportRequestRelationExpression
  cargoes: CargoExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: UserExpression
  destination: StringExpression
  exs: [TransportRequestExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TransportRequestOrderBy
  origin: StringExpression
  railwayTransport: RailwayTransportExpression
  railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression
  transportRequestUserRelation: TransportRequestUserRelationExpression
  truckTransports: TruckTransportExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TransportRequestMutationArguments {
  cargoTransportRequestRelation: [CargoTransportRequestRelationInput]
  cargoes: [CargoInput]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  customer: UserInput
  destination: String
  id: ID
  input: TransportRequestInput
  isDeprecated: Boolean = false
  origin: String
  railwayTransport: RailwayTransportInput
  railwayTransportTransportRequestRelation: [RailwayTransportTransportRequestRelationInput]
  realmId: Int
  status: TransportStatus
  transportRequestTruckTransportRelation: [TransportRequestTruckTransportRelationInput]
  transportRequestUserRelation: [TransportRequestUserRelationInput]
  truckTransports: [TruckTransportInput]
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: TransportRequestExpression
}

input TransportRequestOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  destination: Sort
  id: Sort
  isDeprecated: Sort
  origin: Sort
  realmId: Sort
  status: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input TransportRequestQueryArguments {
  cargoTransportRequestRelation: CargoTransportRequestRelationExpression
  cargoes: CargoExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: UserExpression
  destination: StringExpression
  exs: [TransportRequestExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  origin: StringExpression
  railwayTransport: RailwayTransportExpression
  railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression
  transportRequestUserRelation: TransportRequestUserRelationExpression
  truckTransports: TruckTransportExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TransportRequestSubscriptionArguments {
  cargoTransportRequestRelation: CargoTransportRequestRelationExpression
  cargoes: CargoExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: UserExpression
  destination: StringExpression
  exs: [TransportRequestExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  origin: StringExpression
  railwayTransport: RailwayTransportExpression
  railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression
  transportRequestUserRelation: TransportRequestUserRelationExpression
  truckTransports: TruckTransportExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type TransportRequestTruckTransportRelation implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  transportRequest(cargoTransportRequestRelation: CargoTransportRequestRelationExpression, cargoes: CargoExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: UserExpression, destination: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, origin: StringExpression, railwayTransport: RailwayTransportExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, transportRequestUserRelation: TransportRequestUserRelationExpression, truckTransports: TruckTransportExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportRequest
  transportRequestRef: String
  transportRequestRefCount: Int
  transportRequestRefMax: String
  transportRequestRefMin: String
  truckTransport(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, destination: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, origin: StringExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, truckTransportVehicleRelation: TruckTransportVehicleRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, version: IntExpression): TruckTransport
  truckTransportRef: String
  truckTransportRefCount: Int
  truckTransportRefMax: String
  truckTransportRefMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type TransportRequestTruckTransportRelationConnection {
  edges: [TransportRequestTruckTransportRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input TransportRequestTruckTransportRelationConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TransportRequestTruckTransportRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TransportRequestTruckTransportRelationOrderBy
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  truckTransport: TruckTransportExpression
  truckTransportRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TransportRequestTruckTransportRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TransportRequestTruckTransportRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TransportRequestTruckTransportRelationOrderBy
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  truckTransport: TruckTransportExpression
  truckTransportRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type TransportRequestTruckTransportRelationEdge {
  cursor: String
  node: TransportRequestTruckTransportRelation
}

input TransportRequestTruckTransportRelationExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TransportRequestTruckTransportRelationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  truckTransport: TruckTransportExpression
  truckTransportRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TransportRequestTruckTransportRelationInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  realmId: Int
  transportRequest: TransportRequestInput
  transportRequestRef: String
  truckTransport: TruckTransportInput
  truckTransportRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: TransportRequestTruckTransportRelationExpression
}

input TransportRequestTruckTransportRelationListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  list: [TransportRequestTruckTransportRelationInput]
  realmId: Int
  transportRequest: TransportRequestInput
  transportRequestRef: String
  truckTransport: TruckTransportInput
  truckTransportRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: TransportRequestTruckTransportRelationExpression
}

input TransportRequestTruckTransportRelationListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TransportRequestTruckTransportRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TransportRequestTruckTransportRelationOrderBy
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  truckTransport: TruckTransportExpression
  truckTransportRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TransportRequestTruckTransportRelationListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TransportRequestTruckTransportRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TransportRequestTruckTransportRelationOrderBy
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  truckTransport: TruckTransportExpression
  truckTransportRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TransportRequestTruckTransportRelationMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: TransportRequestTruckTransportRelationInput
  isDeprecated: Boolean = false
  realmId: Int
  transportRequest: TransportRequestInput
  transportRequestRef: String
  truckTransport: TruckTransportInput
  truckTransportRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: TransportRequestTruckTransportRelationExpression
}

input TransportRequestTruckTransportRelationOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  transportRequestRef: Sort
  truckTransportRef: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input TransportRequestTruckTransportRelationQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TransportRequestTruckTransportRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  truckTransport: TruckTransportExpression
  truckTransportRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TransportRequestTruckTransportRelationSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TransportRequestTruckTransportRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  truckTransport: TruckTransportExpression
  truckTransportRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type TransportRequestUserRelation implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  transportRequest(cargoTransportRequestRelation: CargoTransportRequestRelationExpression, cargoes: CargoExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: UserExpression, destination: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, origin: StringExpression, railwayTransport: RailwayTransportExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, transportRequestUserRelation: TransportRequestUserRelationExpression, truckTransports: TruckTransportExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportRequest
  transportRequestRef: String
  transportRequestRefCount: Int
  transportRequestRefMax: String
  transportRequestRefMin: String
  updateTime: Timestamp
  updateUserId: String
  user(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): User
  userRef: Int
  userRefAvg: Int
  userRefCount: Int
  userRefMax: Int
  userRefMin: Int
  userRefSum: Int
  version: Int
}

type TransportRequestUserRelationConnection {
  edges: [TransportRequestUserRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input TransportRequestUserRelationConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TransportRequestUserRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TransportRequestUserRelationOrderBy
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: IntExpression
  version: IntExpression
}

input TransportRequestUserRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TransportRequestUserRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TransportRequestUserRelationOrderBy
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: IntExpression
  version: IntExpression
}

type TransportRequestUserRelationEdge {
  cursor: String
  node: TransportRequestUserRelation
}

input TransportRequestUserRelationExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TransportRequestUserRelationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: IntExpression
  version: IntExpression
}

input TransportRequestUserRelationInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  realmId: Int
  transportRequest: TransportRequestInput
  transportRequestRef: String
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: Int
  version: Int
  where: TransportRequestUserRelationExpression
}

input TransportRequestUserRelationListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  list: [TransportRequestUserRelationInput]
  realmId: Int
  transportRequest: TransportRequestInput
  transportRequestRef: String
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: Int
  version: Int
  where: TransportRequestUserRelationExpression
}

input TransportRequestUserRelationListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TransportRequestUserRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TransportRequestUserRelationOrderBy
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: IntExpression
  version: IntExpression
}

input TransportRequestUserRelationListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TransportRequestUserRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TransportRequestUserRelationOrderBy
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: IntExpression
  version: IntExpression
}

input TransportRequestUserRelationMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: TransportRequestUserRelationInput
  isDeprecated: Boolean = false
  realmId: Int
  transportRequest: TransportRequestInput
  transportRequestRef: String
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: Int
  version: Int
  where: TransportRequestUserRelationExpression
}

input TransportRequestUserRelationOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  transportRequestRef: Sort
  updateTime: Sort
  updateUserId: Sort
  userRef: Sort
  version: Sort
}

input TransportRequestUserRelationQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TransportRequestUserRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: IntExpression
  version: IntExpression
}

input TransportRequestUserRelationSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TransportRequestUserRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  transportRequest: TransportRequestExpression
  transportRequestRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: IntExpression
  version: IntExpression
}

"""运输状态"""
enum TransportStatus {
  """已完成"""
  COMPLETED

  """进行中"""
  IN_PROGRESS

  """待处理"""
  PENDING
}

input TransportStatusExpression {
  arr: [TransportStatus]
  opr: Operator = EQ
  val: TransportStatus
}

interface TreeStruct {
  deep: Int
  name: String
  parentId: String
  path: String
}

input TreeStructExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  parentId: StringExpression
  path: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TreeStructInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  deep: Int
  isDeprecated: Boolean = false
  name: String
  parentId: String
  path: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

"""汽车运输"""
type TruckTransport implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """汽车运输的目的地"""
  destination: String!
  destinationCount: Int
  destinationMax: String
  destinationMin: String

  """汽车运输ID"""
  id: ID!
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """汽车运输的出发地"""
  origin: String!
  originCount: Int
  originMax: String
  originMin: String
  realmId: Int

  """运输状态"""
  status: TransportStatus!

  """关联的运输需求"""
  transportRequest(cargoTransportRequestRelation: CargoTransportRequestRelationExpression, cargoes: CargoExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: UserExpression, destination: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, origin: StringExpression, railwayTransport: RailwayTransportExpression, railwayTransportTransportRequestRelation: RailwayTransportTransportRequestRelationExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, transportRequestUserRelation: TransportRequestUserRelationExpression, truckTransports: TruckTransportExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportRequest!
  transportRequestTruckTransportRelation(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: TransportRequestTruckTransportRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [TransportRequestTruckTransportRelation]
  transportRequestTruckTransportRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: TransportRequestTruckTransportRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportRequestTruckTransportRelation
  transportRequestTruckTransportRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: TransportRequestTruckTransportRelationOrderBy, realmId: IntExpression, transportRequest: TransportRequestExpression, transportRequestRef: StringExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TransportRequestTruckTransportRelationConnection
  truckTransportVehicleRelation(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: TruckTransportVehicleRelationOrderBy, realmId: IntExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, vehicleRef: StringExpression, version: IntExpression): [TruckTransportVehicleRelation]
  truckTransportVehicleRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: TruckTransportVehicleRelationOrderBy, realmId: IntExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, vehicleRef: StringExpression, version: IntExpression): TruckTransportVehicleRelation
  truckTransportVehicleRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: TruckTransportVehicleRelationOrderBy, realmId: IntExpression, truckTransport: TruckTransportExpression, truckTransportRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, vehicleRef: StringExpression, version: IntExpression): TruckTransportVehicleRelationConnection
  updateTime: Timestamp
  updateUserId: String

  """参与运输的车辆"""
  vehicle(capacity: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, licensePlate: StringExpression, owner: UserExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userVehicleRelation: UserVehicleRelationExpression, version: IntExpression): Vehicle!
  version: Int
}

type TruckTransportConnection {
  edges: [TruckTransportEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input TruckTransportConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  destination: StringExpression
  exs: [TruckTransportExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TruckTransportOrderBy
  origin: StringExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequest: TransportRequestExpression
  transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression
  truckTransportVehicleRelation: TruckTransportVehicleRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  vehicle: VehicleExpression
  version: IntExpression
}

input TruckTransportConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  destination: StringExpression
  exs: [TruckTransportExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TruckTransportOrderBy
  origin: StringExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequest: TransportRequestExpression
  transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression
  truckTransportVehicleRelation: TruckTransportVehicleRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  vehicle: VehicleExpression
  version: IntExpression
}

type TruckTransportEdge {
  cursor: String
  node: TruckTransport
}

input TruckTransportExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  destination: StringExpression
  exs: [TruckTransportExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  origin: StringExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequest: TransportRequestExpression
  transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression
  truckTransportVehicleRelation: TruckTransportVehicleRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  vehicle: VehicleExpression
  version: IntExpression
}

input TruckTransportInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  destination: String
  id: ID
  isDeprecated: Boolean = false
  origin: String
  realmId: Int
  status: TransportStatus
  transportRequest: TransportRequestInput
  transportRequestTruckTransportRelation: [TransportRequestTruckTransportRelationInput]
  truckTransportVehicleRelation: [TruckTransportVehicleRelationInput]
  updateTime: Timestamp
  updateUserId: String
  vehicle: VehicleInput
  version: Int
  where: TruckTransportExpression
}

input TruckTransportListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  destination: String
  id: ID
  isDeprecated: Boolean = false
  list: [TruckTransportInput]
  origin: String
  realmId: Int
  status: TransportStatus
  transportRequest: TransportRequestInput
  transportRequestTruckTransportRelation: [TransportRequestTruckTransportRelationInput]
  truckTransportVehicleRelation: [TruckTransportVehicleRelationInput]
  updateTime: Timestamp
  updateUserId: String
  vehicle: VehicleInput
  version: Int
  where: TruckTransportExpression
}

input TruckTransportListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  destination: StringExpression
  exs: [TruckTransportExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TruckTransportOrderBy
  origin: StringExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequest: TransportRequestExpression
  transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression
  truckTransportVehicleRelation: TruckTransportVehicleRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  vehicle: VehicleExpression
  version: IntExpression
}

input TruckTransportListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  destination: StringExpression
  exs: [TruckTransportExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TruckTransportOrderBy
  origin: StringExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequest: TransportRequestExpression
  transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression
  truckTransportVehicleRelation: TruckTransportVehicleRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  vehicle: VehicleExpression
  version: IntExpression
}

input TruckTransportMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  destination: String
  id: ID
  input: TruckTransportInput
  isDeprecated: Boolean = false
  origin: String
  realmId: Int
  status: TransportStatus
  transportRequest: TransportRequestInput
  transportRequestTruckTransportRelation: [TransportRequestTruckTransportRelationInput]
  truckTransportVehicleRelation: [TruckTransportVehicleRelationInput]
  updateTime: Timestamp
  updateUserId: String
  vehicle: VehicleInput
  version: Int
  where: TruckTransportExpression
}

input TruckTransportOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  destination: Sort
  id: Sort
  isDeprecated: Sort
  origin: Sort
  realmId: Sort
  status: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input TruckTransportQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  destination: StringExpression
  exs: [TruckTransportExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  origin: StringExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequest: TransportRequestExpression
  transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression
  truckTransportVehicleRelation: TruckTransportVehicleRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  vehicle: VehicleExpression
  version: IntExpression
}

input TruckTransportSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  destination: StringExpression
  exs: [TruckTransportExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  origin: StringExpression
  realmId: IntExpression
  status: TransportStatusExpression
  transportRequest: TransportRequestExpression
  transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression
  truckTransportVehicleRelation: TruckTransportVehicleRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  vehicle: VehicleExpression
  version: IntExpression
}

type TruckTransportVehicleRelation implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  truckTransport(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, destination: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, origin: StringExpression, realmId: IntExpression, status: TransportStatusExpression, transportRequest: TransportRequestExpression, transportRequestTruckTransportRelation: TransportRequestTruckTransportRelationExpression, truckTransportVehicleRelation: TruckTransportVehicleRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, vehicle: VehicleExpression, version: IntExpression): TruckTransport
  truckTransportRef: String
  truckTransportRefCount: Int
  truckTransportRefMax: String
  truckTransportRefMin: String
  updateTime: Timestamp
  updateUserId: String
  vehicle(capacity: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, licensePlate: StringExpression, owner: UserExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userVehicleRelation: UserVehicleRelationExpression, version: IntExpression): Vehicle
  vehicleRef: String
  vehicleRefCount: Int
  vehicleRefMax: String
  vehicleRefMin: String
  version: Int
}

type TruckTransportVehicleRelationConnection {
  edges: [TruckTransportVehicleRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input TruckTransportVehicleRelationConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TruckTransportVehicleRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TruckTransportVehicleRelationOrderBy
  realmId: IntExpression
  truckTransport: TruckTransportExpression
  truckTransportRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  vehicle: VehicleExpression
  vehicleRef: StringExpression
  version: IntExpression
}

input TruckTransportVehicleRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TruckTransportVehicleRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TruckTransportVehicleRelationOrderBy
  realmId: IntExpression
  truckTransport: TruckTransportExpression
  truckTransportRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  vehicle: VehicleExpression
  vehicleRef: StringExpression
  version: IntExpression
}

type TruckTransportVehicleRelationEdge {
  cursor: String
  node: TruckTransportVehicleRelation
}

input TruckTransportVehicleRelationExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TruckTransportVehicleRelationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  truckTransport: TruckTransportExpression
  truckTransportRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  vehicle: VehicleExpression
  vehicleRef: StringExpression
  version: IntExpression
}

input TruckTransportVehicleRelationInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  realmId: Int
  truckTransport: TruckTransportInput
  truckTransportRef: String
  updateTime: Timestamp
  updateUserId: String
  vehicle: VehicleInput
  vehicleRef: String
  version: Int
  where: TruckTransportVehicleRelationExpression
}

input TruckTransportVehicleRelationListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  list: [TruckTransportVehicleRelationInput]
  realmId: Int
  truckTransport: TruckTransportInput
  truckTransportRef: String
  updateTime: Timestamp
  updateUserId: String
  vehicle: VehicleInput
  vehicleRef: String
  version: Int
  where: TruckTransportVehicleRelationExpression
}

input TruckTransportVehicleRelationListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TruckTransportVehicleRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TruckTransportVehicleRelationOrderBy
  realmId: IntExpression
  truckTransport: TruckTransportExpression
  truckTransportRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  vehicle: VehicleExpression
  vehicleRef: StringExpression
  version: IntExpression
}

input TruckTransportVehicleRelationListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TruckTransportVehicleRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: TruckTransportVehicleRelationOrderBy
  realmId: IntExpression
  truckTransport: TruckTransportExpression
  truckTransportRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  vehicle: VehicleExpression
  vehicleRef: StringExpression
  version: IntExpression
}

input TruckTransportVehicleRelationMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: TruckTransportVehicleRelationInput
  isDeprecated: Boolean = false
  realmId: Int
  truckTransport: TruckTransportInput
  truckTransportRef: String
  updateTime: Timestamp
  updateUserId: String
  vehicle: VehicleInput
  vehicleRef: String
  version: Int
  where: TruckTransportVehicleRelationExpression
}

input TruckTransportVehicleRelationOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  truckTransportRef: Sort
  updateTime: Sort
  updateUserId: Sort
  vehicleRef: Sort
  version: Sort
}

input TruckTransportVehicleRelationQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TruckTransportVehicleRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  truckTransport: TruckTransportExpression
  truckTransportRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  vehicle: VehicleExpression
  vehicleRef: StringExpression
  version: IntExpression
}

input TruckTransportVehicleRelationSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [TruckTransportVehicleRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  truckTransport: TruckTransportExpression
  truckTransportRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  vehicle: VehicleExpression
  vehicleRef: StringExpression
  version: IntExpression
}

"""用户"""
type User implements Meta & NamedStruct {
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """禁用"""
  disable: Boolean

  """邮箱"""
  email: String
  emailCount: Int
  emailMax: String
  emailMin: String
  groupUserRelation(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupUserRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): [GroupUserRelation]
  groupUserRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupUserRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): GroupUserRelation
  groupUserRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupUserRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): GroupUserRelationConnection

  """组"""
  groups(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Group]
  groupsAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Group
  groupsConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): GroupConnection

  """哈希"""
  hash: String
  hashCount: Int
  hashMax: String
  hashMin: String

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """姓氏"""
  lastName: String
  lastNameCount: Int
  lastNameMax: String
  lastNameMin: String

  """账号"""
  login: String!
  loginCount: Int
  loginMax: String
  loginMin: String

  """姓名"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """手机号"""
  phones(after: String, arr: [String], before: String, first: Int, last: Int, offset: Int, opr: Operator = EQ, sort: Sort, val: String): [String]

  """租户"""
  realm(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmId: Int
  roleUserRelation(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleUserRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): [RoleUserRelation]
  roleUserRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleUserRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): RoleUserRelation
  roleUserRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleUserRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): RoleUserRelationConnection

  """角色"""
  roles(after: ID, before: ID, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Role]
  rolesAggregate(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  rolesConnection(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): RoleConnection

  """盐"""
  salt: String
  saltCount: Int
  saltMax: String
  saltMin: String
  syncUserPolicy: Boolean
  updateTime: Timestamp
  updateUserId: String
  userPhonesRelation(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserPhonesRelationOrderBy, phonesRef: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): [UserPhonesRelation]
  userPhonesRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserPhonesRelationOrderBy, phonesRef: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): UserPhonesRelation
  userPhonesRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserPhonesRelationOrderBy, phonesRef: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): UserPhonesRelationConnection
  version: Int
}

type UserConnection {
  edges: [UserEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input UserConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  first: Int
  groupBy: [String!]
  groupUserRelation: GroupUserRelationExpression
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: UserOrderBy
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roleUserRelation: RoleUserRelationExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userPhonesRelation: UserPhonesRelationExpression
  version: IntExpression
}

input UserConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  first: Int
  groupBy: [String!]
  groupUserRelation: GroupUserRelationExpression
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: UserOrderBy
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roleUserRelation: RoleUserRelationExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userPhonesRelation: UserPhonesRelationExpression
  version: IntExpression
}

type UserEdge {
  cursor: String
  node: User
}

input UserExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  groupUserRelation: GroupUserRelationExpression
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roleUserRelation: RoleUserRelationExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userPhonesRelation: UserPhonesRelationExpression
  version: IntExpression
}

input UserInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  disable: Boolean
  email: String
  groupUserRelation: [GroupUserRelationInput]
  groups: [GroupInput]
  hash: String
  id: ID
  isDeprecated: Boolean = false
  lastName: String
  login: String
  name: String
  phones: [String]
  realm: RealmInput
  realmId: Int
  roleUserRelation: [RoleUserRelationInput]
  roles: [RoleInput]
  salt: String
  updateTime: Timestamp
  updateUserId: String
  userPhonesRelation: [UserPhonesRelationInput]
  version: Int
  where: UserExpression
}

input UserListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  disable: Boolean
  email: String
  groupUserRelation: [GroupUserRelationInput]
  groups: [GroupInput]
  hash: String
  id: ID
  isDeprecated: Boolean = false
  lastName: String
  list: [UserInput]
  login: String
  name: String
  phones: [String]
  realm: RealmInput
  realmId: Int
  roleUserRelation: [RoleUserRelationInput]
  roles: [RoleInput]
  salt: String
  updateTime: Timestamp
  updateUserId: String
  userPhonesRelation: [UserPhonesRelationInput]
  version: Int
  where: UserExpression
}

input UserListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  first: Int
  groupBy: [String!]
  groupUserRelation: GroupUserRelationExpression
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: UserOrderBy
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roleUserRelation: RoleUserRelationExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userPhonesRelation: UserPhonesRelationExpression
  version: IntExpression
}

input UserListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  first: Int
  groupBy: [String!]
  groupUserRelation: GroupUserRelationExpression
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: UserOrderBy
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roleUserRelation: RoleUserRelationExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userPhonesRelation: UserPhonesRelationExpression
  version: IntExpression
}

input UserMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  disable: Boolean
  email: String
  groupUserRelation: [GroupUserRelationInput]
  groups: [GroupInput]
  hash: String
  id: ID
  input: UserInput
  isDeprecated: Boolean = false
  lastName: String
  login: String
  name: String
  phones: [String]
  realm: RealmInput
  realmId: Int
  roleUserRelation: [RoleUserRelationInput]
  roles: [RoleInput]
  salt: String
  updateTime: Timestamp
  updateUserId: String
  userPhonesRelation: [UserPhonesRelationInput]
  version: Int
  where: UserExpression
}

input UserOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  disable: Sort
  email: Sort
  hash: Sort
  id: Sort
  isDeprecated: Sort
  lastName: Sort
  login: Sort
  name: Sort
  realmId: Sort
  salt: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

type UserPhonesRelation implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  phonesRef: String
  phonesRefCount: Int
  phonesRefMax: String
  phonesRefMin: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): User
  userRef: String
  userRefCount: Int
  userRefMax: String
  userRefMin: String
  version: Int
}

type UserPhonesRelationConnection {
  edges: [UserPhonesRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input UserPhonesRelationConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserPhonesRelationOrderBy
  phonesRef: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input UserPhonesRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserPhonesRelationOrderBy
  phonesRef: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

type UserPhonesRelationEdge {
  cursor: String
  node: UserPhonesRelation
}

input UserPhonesRelationExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesRelationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  phonesRef: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input UserPhonesRelationInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  phonesRef: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: String
  version: Int
  where: UserPhonesRelationExpression
}

input UserPhonesRelationListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  list: [UserPhonesRelationInput]
  phonesRef: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: String
  version: Int
  where: UserPhonesRelationExpression
}

input UserPhonesRelationListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserPhonesRelationOrderBy
  phonesRef: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input UserPhonesRelationListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserPhonesRelationOrderBy
  phonesRef: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input UserPhonesRelationMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: UserPhonesRelationInput
  isDeprecated: Boolean = false
  phonesRef: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: String
  version: Int
  where: UserPhonesRelationExpression
}

input UserPhonesRelationOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  phonesRef: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  userRef: Sort
  version: Sort
}

input UserPhonesRelationQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  phonesRef: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input UserPhonesRelationSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  phonesRef: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input UserQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  groupBy: [String!]
  groupUserRelation: GroupUserRelationExpression
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roleUserRelation: RoleUserRelationExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userPhonesRelation: UserPhonesRelationExpression
  version: IntExpression
}

input UserSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  groupBy: [String!]
  groupUserRelation: GroupUserRelationExpression
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roleUserRelation: RoleUserRelationExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userPhonesRelation: UserPhonesRelationExpression
  version: IntExpression
}

type UserVehicleRelation implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): User
  userRef: Int
  userRefAvg: Int
  userRefCount: Int
  userRefMax: Int
  userRefMin: Int
  userRefSum: Int
  vehicle(capacity: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, licensePlate: StringExpression, owner: UserExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userVehicleRelation: UserVehicleRelationExpression, version: IntExpression): Vehicle
  vehicleRef: String
  vehicleRefCount: Int
  vehicleRefMax: String
  vehicleRefMin: String
  version: Int
}

type UserVehicleRelationConnection {
  edges: [UserVehicleRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input UserVehicleRelationConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserVehicleRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserVehicleRelationOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: IntExpression
  vehicle: VehicleExpression
  vehicleRef: StringExpression
  version: IntExpression
}

input UserVehicleRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserVehicleRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserVehicleRelationOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: IntExpression
  vehicle: VehicleExpression
  vehicleRef: StringExpression
  version: IntExpression
}

type UserVehicleRelationEdge {
  cursor: String
  node: UserVehicleRelation
}

input UserVehicleRelationExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserVehicleRelationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: IntExpression
  vehicle: VehicleExpression
  vehicleRef: StringExpression
  version: IntExpression
}

input UserVehicleRelationInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: Int
  vehicle: VehicleInput
  vehicleRef: String
  version: Int
  where: UserVehicleRelationExpression
}

input UserVehicleRelationListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  list: [UserVehicleRelationInput]
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: Int
  vehicle: VehicleInput
  vehicleRef: String
  version: Int
  where: UserVehicleRelationExpression
}

input UserVehicleRelationListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserVehicleRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserVehicleRelationOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: IntExpression
  vehicle: VehicleExpression
  vehicleRef: StringExpression
  version: IntExpression
}

input UserVehicleRelationListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserVehicleRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserVehicleRelationOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: IntExpression
  vehicle: VehicleExpression
  vehicleRef: StringExpression
  version: IntExpression
}

input UserVehicleRelationMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: UserVehicleRelationInput
  isDeprecated: Boolean = false
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: Int
  vehicle: VehicleInput
  vehicleRef: String
  version: Int
  where: UserVehicleRelationExpression
}

input UserVehicleRelationOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  userRef: Sort
  vehicleRef: Sort
  version: Sort
}

input UserVehicleRelationQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserVehicleRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: IntExpression
  vehicle: VehicleExpression
  vehicleRef: StringExpression
  version: IntExpression
}

input UserVehicleRelationSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserVehicleRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: IntExpression
  vehicle: VehicleExpression
  vehicleRef: StringExpression
  version: IntExpression
}

"""车辆"""
type Vehicle implements Meta {
  """载货容量"""
  capacity: Int!
  capacityAvg: Int
  capacityCount: Int
  capacityMax: Int
  capacityMin: Int
  capacitySum: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """车辆ID"""
  id: ID!
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """车牌号"""
  licensePlate: String!
  licensePlateCount: Int
  licensePlateMax: String
  licensePlateMin: String

  """车辆所有者"""
  owner(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): User!
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  userVehicleRelation(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserVehicleRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: IntExpression, vehicle: VehicleExpression, vehicleRef: StringExpression, version: IntExpression): [UserVehicleRelation]
  version: Int
}

type VehicleConnection {
  edges: [VehicleEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input VehicleConnectionQueryArguments {
  after: ID
  before: ID
  capacity: IntExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [VehicleExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  licensePlate: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: VehicleOrderBy
  owner: UserExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userVehicleRelation: UserVehicleRelationExpression
  version: IntExpression
}

input VehicleConnectionSubscriptionArguments {
  after: ID
  before: ID
  capacity: IntExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [VehicleExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  licensePlate: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: VehicleOrderBy
  owner: UserExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userVehicleRelation: UserVehicleRelationExpression
  version: IntExpression
}

type VehicleEdge {
  cursor: String
  node: Vehicle
}

input VehicleExpression {
  capacity: IntExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [VehicleExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  licensePlate: StringExpression
  not: Boolean = false
  owner: UserExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userVehicleRelation: UserVehicleRelationExpression
  version: IntExpression
}

input VehicleInput {
  capacity: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  licensePlate: String
  owner: UserInput
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  userVehicleRelation: [UserVehicleRelationInput]
  version: Int
  where: VehicleExpression
}

input VehicleListMutationArguments {
  capacity: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  licensePlate: String
  list: [VehicleInput]
  owner: UserInput
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  userVehicleRelation: [UserVehicleRelationInput]
  version: Int
  where: VehicleExpression
}

input VehicleListQueryArguments {
  after: ID
  before: ID
  capacity: IntExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [VehicleExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  licensePlate: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: VehicleOrderBy
  owner: UserExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userVehicleRelation: UserVehicleRelationExpression
  version: IntExpression
}

input VehicleListSubscriptionArguments {
  after: ID
  before: ID
  capacity: IntExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [VehicleExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  licensePlate: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: VehicleOrderBy
  owner: UserExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userVehicleRelation: UserVehicleRelationExpression
  version: IntExpression
}

input VehicleMutationArguments {
  capacity: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: VehicleInput
  isDeprecated: Boolean = false
  licensePlate: String
  owner: UserInput
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  userVehicleRelation: [UserVehicleRelationInput]
  version: Int
  where: VehicleExpression
}

input VehicleOrderBy {
  capacity: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  licensePlate: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input VehicleQueryArguments {
  capacity: IntExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [VehicleExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  licensePlate: StringExpression
  not: Boolean = false
  owner: UserExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userVehicleRelation: UserVehicleRelationExpression
  version: IntExpression
}

input VehicleSubscriptionArguments {
  capacity: IntExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [VehicleExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  licensePlate: StringExpression
  not: Boolean = false
  owner: UserExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userVehicleRelation: UserVehicleRelationExpression
  version: IntExpression
}

input With {
  from: String
  to: String
  type: String
}
