directive @annotation(name: String!) on OBJECT

directive @class(exists: Boolean, name: String!) on OBJECT

directive @connection(agg: String, field: String) on FIELD_DEFINITION

directive @container on OBJECT

directive @cursor on FIELD_DEFINITION

directive @denyAll on FIELD | OBJECT

directive @fetch(anchor: Boolean, from: String!, protocol: Protocol, to: String, with: With) on FIELD_DEFINITION

directive @format(locale: String, value: String) on FIELD | FIELD_DEFINITION

directive @func(field: String, name: Func) on FIELD_DEFINITION

directive @grpc(name: String!) on OBJECT

directive @hide on FIELD_DEFINITION

directive @implements(interfaces: [String]) on INPUT_OBJECT | OBJECT

directive @interface on INPUT_OBJECT | OBJECT

directive @invoke(async: Boolean = false, className: String, methodName: String, parameters: [InvokeParameter], returnClassName: String) on FIELD_DEFINITION | INPUT_OBJECT | MUTATION | QUERY | SUBSCRIPTION

directive @invokes(methods: [Invoke]) on FIELD_DEFINITION | INPUT_OBJECT | MUTATION | QUERY | SUBSCRIPTION

directive @jsonSchema(allOf: [JsonSchema], anyOf: [JsonSchema], const: String, contentEncoding: String, contentMediaType: String, dependentRequired: [Property], else: JsonSchema, enum: [String], exclusiveMaximum: Float, exclusiveMinimum: Float, format: String, if: JsonSchema, items: JsonSchema, maxItems: Int, maxLength: Int, maximum: Float, minItems: Int, minLength: Int, minimum: Float, multipleOf: Float, not: JsonSchema, oneOf: [JsonSchema], pattern: String, properties: [Property], then: JsonSchema, uniqueItems: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | OBJECT

directive @map(anchor: Boolean, from: String!, to: String, with: With) on FIELD_DEFINITION

directive @merge on FIELD_DEFINITION

directive @mutationBefore(field: String!, protocol: Protocol, target: String) on FIELD_DEFINITION

directive @options(autoIncrement: Boolean, decimals: Int, default: String, length: Int, protocol: Protocol = GRPC, type: String, unique: Boolean) on FIELD_DEFINITION

directive @package(name: String!) on FIELD_DEFINITION | MUTATION | OBJECT | QUERY | SUBSCRIPTION

directive @permitAll on FIELD | OBJECT

directive @rolesAllowed(roles: [String]) on FIELD | OBJECT

scalar BigDecimal

scalar BigInteger

input BooleanExpression {
  arr: [Boolean]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: Boolean
}

enum Conditional {
  AND
  OR
}

input ConditionalExpression {
  arr: [Conditional]
  opr: Operator = EQ
  val: Conditional
}

type CurrentUser {
  groups: [String]
  id: String
  lastName: String
  login: String
  name: String
  realmId: Int
  roles: [String]
}

scalar Date

scalar DateTime

input FloatExpression {
  arr: [Float]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: Float
}

enum Func {
  AVG
  COUNT
  MAX
  MIN
  SUM
}

input FuncExpression {
  arr: [Func]
  opr: Operator = EQ
  val: Func
}

"""组"""
type Group implements Meta & NamedStruct & TreeStruct {
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """层级"""
  deep: Int
  deepAvg: Int
  deepCount: Int
  deepMax: Int
  deepMin: Int
  deepSum: Int

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String
  groupRoleRelation: [GroupRoleRelation]
  groupRoleRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupRoleRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleRelation
  groupRoleRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupRoleRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleRelationConnection
  groupUserRelation: [GroupUserRelation]
  groupUserRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupUserRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): GroupUserRelation
  groupUserRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupUserRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): GroupUserRelationConnection

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """名称"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """上级"""
  parent(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Group

  """上级ID"""
  parentId: String
  parentIdCount: Int
  parentIdMax: String
  parentIdMin: String

  """路径"""
  path: String
  pathCount: Int
  pathMax: String
  pathMin: String

  """租户"""
  realm(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmId: Int

  """角色"""
  roles(after: ID, before: ID, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Role]
  rolesAggregate(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  rolesConnection(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): RoleConnection

  """下级"""
  subGroups(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Group]
  subGroupsAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Group
  subGroupsConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): GroupConnection
  syncGroupPolicy: Boolean
  updateTime: Timestamp
  updateUserId: String

  """用户"""
  users(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): [User]
  usersAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): User
  usersConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): UserConnection
  version: Int
}

type GroupConnection {
  edges: [GroupEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input GroupConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  first: Int
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groupUserRelation: GroupUserRelationExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: GroupOrderBy
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input GroupConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  first: Int
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groupUserRelation: GroupUserRelationExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: GroupOrderBy
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

type GroupEdge {
  cursor: ID
  node: Group
}

input GroupExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  groupRoleRelation: GroupRoleRelationExpression
  groupUserRelation: GroupUserRelationExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input GroupInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  deep: Int
  description: String
  groupRoleRelation: [GroupRoleRelationInput]
  groupUserRelation: [GroupUserRelationInput]
  id: ID
  isDeprecated: Boolean = false
  name: String
  parent: GroupInput
  parentId: String
  path: String
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  subGroups: [GroupInput]
  updateTime: Timestamp
  updateUserId: String
  users: [UserInput]
  version: Int
  where: GroupExpression
}

input GroupListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  deep: Int
  description: String
  groupRoleRelation: [GroupRoleRelationInput]
  groupUserRelation: [GroupUserRelationInput]
  id: ID
  isDeprecated: Boolean = false
  list: [GroupInput]
  name: String
  parent: GroupInput
  parentId: String
  path: String
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  subGroups: [GroupInput]
  updateTime: Timestamp
  updateUserId: String
  users: [UserInput]
  version: Int
  where: GroupExpression
}

input GroupListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  first: Int
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groupUserRelation: GroupUserRelationExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: GroupOrderBy
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input GroupListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  first: Int
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groupUserRelation: GroupUserRelationExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: GroupOrderBy
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input GroupMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  deep: Int
  description: String
  groupRoleRelation: [GroupRoleRelationInput]
  groupUserRelation: [GroupUserRelationInput]
  id: ID
  input: GroupInput
  isDeprecated: Boolean = false
  name: String
  parent: GroupInput
  parentId: String
  path: String
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  subGroups: [GroupInput]
  updateTime: Timestamp
  updateUserId: String
  users: [UserInput]
  version: Int
  where: GroupExpression
}

input GroupOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  deep: Sort
  description: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  parentId: Sort
  path: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input GroupQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groupUserRelation: GroupUserRelationExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

type GroupRoleRelation implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  group(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Group
  groupRef: String
  groupRefCount: Int
  groupRefMax: String
  groupRefMin: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  role(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  roleRef: String
  roleRefCount: Int
  roleRefMax: String
  roleRefMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type GroupRoleRelationConnection {
  edges: [GroupRoleRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input GroupRoleRelationConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleRelationExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupRoleRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupRoleRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleRelationExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupRoleRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type GroupRoleRelationEdge {
  cursor: ID
  node: GroupRoleRelation
}

input GroupRoleRelationExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleRelationExpression]
  group: GroupExpression
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupRoleRelationInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  group: GroupInput
  groupRef: String
  id: ID
  isDeprecated: Boolean = false
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: GroupRoleRelationExpression
}

input GroupRoleRelationListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  group: GroupInput
  groupRef: String
  id: ID
  isDeprecated: Boolean = false
  list: [GroupRoleRelationInput]
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: GroupRoleRelationExpression
}

input GroupRoleRelationListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleRelationExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupRoleRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupRoleRelationListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleRelationExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupRoleRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupRoleRelationMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  group: GroupInput
  groupRef: String
  id: ID
  input: GroupRoleRelationInput
  isDeprecated: Boolean = false
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: GroupRoleRelationExpression
}

input GroupRoleRelationOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  groupRef: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  roleRef: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input GroupRoleRelationQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleRelationExpression]
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupRoleRelationSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleRelationExpression]
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groupUserRelation: GroupUserRelationExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

type GroupUserRelation implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  group(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Group
  groupRef: String
  groupRefCount: Int
  groupRefMax: String
  groupRefMin: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): User
  userRef: String
  userRefCount: Int
  userRefMax: String
  userRefMin: String
  version: Int
}

type GroupUserRelationConnection {
  edges: [GroupUserRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input GroupUserRelationConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupUserRelationExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupUserRelationOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input GroupUserRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupUserRelationExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupUserRelationOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

type GroupUserRelationEdge {
  cursor: ID
  node: GroupUserRelation
}

input GroupUserRelationExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupUserRelationExpression]
  group: GroupExpression
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input GroupUserRelationInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  group: GroupInput
  groupRef: String
  id: ID
  isDeprecated: Boolean = false
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: String
  version: Int
  where: GroupUserRelationExpression
}

input GroupUserRelationListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  group: GroupInput
  groupRef: String
  id: ID
  isDeprecated: Boolean = false
  list: [GroupUserRelationInput]
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: String
  version: Int
  where: GroupUserRelationExpression
}

input GroupUserRelationListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupUserRelationExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupUserRelationOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input GroupUserRelationListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupUserRelationExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupUserRelationOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input GroupUserRelationMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  group: GroupInput
  groupRef: String
  id: ID
  input: GroupUserRelationInput
  isDeprecated: Boolean = false
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: String
  version: Int
  where: GroupUserRelationExpression
}

input GroupUserRelationOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  groupRef: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  userRef: Sort
  version: Sort
}

input GroupUserRelationQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupUserRelationExpression]
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input GroupUserRelationSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupUserRelationExpression]
  group: GroupExpression
  groupBy: [String!]
  groupRef: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input IDExpression {
  arr: [ID]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: ID
}

input IntExpression {
  arr: [Int]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: Int
}

input Invoke {
  async: Boolean = false
  className: String
  methodName: String
  parameters: [InvokeParameter]
  returnClassName: String
  thrownTypes: [String]
}

input InvokeParameter {
  className: String
  name: String
}

input JsonSchema {
  allOf: [JsonSchema]
  anyOf: [JsonSchema]
  const: String
  contentEncoding: String
  contentMediaType: String
  dependentRequired: [Property]
  else: JsonSchema
  enum: [String]
  exclusiveMaximum: Float
  exclusiveMinimum: Float
  format: String
  if: JsonSchema
  items: JsonSchema
  maxItems: Int
  maxLength: Int
  maximum: Float
  minItems: Int
  minLength: Int
  minimum: Float
  multipleOf: Float
  not: JsonSchema
  oneOf: [JsonSchema]
  pattern: String
  properties: [Property]
  then: JsonSchema
  uniqueItems: Boolean
}

interface Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  isDeprecated: Boolean
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

input MetaExpression {
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
}

input MetaInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type Mutation {
  currentUserResetPassword(newPassword: String!, password: String!): User
  currentUserUpdate(userInput: UserInput!): User
  group(createGroupId: String, createTime: Timestamp, createUserId: String, deep: Int, description: String, groupRoleRelation: [GroupRoleRelationInput], groupUserRelation: [GroupUserRelationInput], id: ID, input: GroupInput, isDeprecated: Boolean = false, name: String, parent: GroupInput, parentId: String, path: String, realm: RealmInput, realmId: Int, roles: [RoleInput], subGroups: [GroupInput], updateTime: Timestamp, updateUserId: String, users: [UserInput], version: Int, where: GroupExpression): Group
  groupList(createGroupId: String, createTime: Timestamp, createUserId: String, deep: Int, description: String, groupRoleRelation: [GroupRoleRelationInput], groupUserRelation: [GroupUserRelationInput], id: ID, isDeprecated: Boolean = false, list: [GroupInput], name: String, parent: GroupInput, parentId: String, path: String, realm: RealmInput, realmId: Int, roles: [RoleInput], subGroups: [GroupInput], updateTime: Timestamp, updateUserId: String, users: [UserInput], version: Int, where: GroupExpression): [Group]
  groupRoleRelation(createGroupId: String, createTime: Timestamp, createUserId: String, group: GroupInput, groupRef: String, id: ID, input: GroupRoleRelationInput, isDeprecated: Boolean = false, realmId: Int, role: RoleInput, roleRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: GroupRoleRelationExpression): GroupRoleRelation
  groupRoleRelationList(createGroupId: String, createTime: Timestamp, createUserId: String, group: GroupInput, groupRef: String, id: ID, isDeprecated: Boolean = false, list: [GroupRoleRelationInput], realmId: Int, role: RoleInput, roleRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: GroupRoleRelationExpression): [GroupRoleRelation]
  groupUserRelation(createGroupId: String, createTime: Timestamp, createUserId: String, group: GroupInput, groupRef: String, id: ID, input: GroupUserRelationInput, isDeprecated: Boolean = false, realmId: Int, updateTime: Timestamp, updateUserId: String, user: UserInput, userRef: String, version: Int, where: GroupUserRelationExpression): GroupUserRelation
  groupUserRelationList(createGroupId: String, createTime: Timestamp, createUserId: String, group: GroupInput, groupRef: String, id: ID, isDeprecated: Boolean = false, list: [GroupUserRelationInput], realmId: Int, updateTime: Timestamp, updateUserId: String, user: UserInput, userRef: String, version: Int, where: GroupUserRelationExpression): [GroupUserRelation]
  login(login: String!, password: String!): String
  permission(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, field: String, input: PermissionInput, isDeprecated: Boolean = false, name: ID, permissionRoleRelation: [PermissionRoleRelationInput], permissionType: PermissionType, realm: RealmInput, realmId: Int, roles: [RoleInput], type: String, updateTime: Timestamp, updateUserId: String, version: Int, where: PermissionExpression): Permission
  permissionList(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, field: String, isDeprecated: Boolean = false, list: [PermissionInput], name: ID, permissionRoleRelation: [PermissionRoleRelationInput], permissionType: PermissionType, realm: RealmInput, realmId: Int, roles: [RoleInput], type: String, updateTime: Timestamp, updateUserId: String, version: Int, where: PermissionExpression): [Permission]
  permissionRoleRelation(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: PermissionRoleRelationInput, isDeprecated: Boolean = false, permission: PermissionInput, permissionRef: String, realmId: Int, role: RoleInput, roleRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: PermissionRoleRelationExpression): PermissionRoleRelation
  permissionRoleRelationList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, list: [PermissionRoleRelationInput], permission: PermissionInput, permissionRef: String, realmId: Int, role: RoleInput, roleRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: PermissionRoleRelationExpression): [PermissionRoleRelation]
  realm(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, input: RealmInput, isDeprecated: Boolean = false, name: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: RealmExpression): Realm
  realmList(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, isDeprecated: Boolean = false, list: [RealmInput], name: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: RealmExpression): [Realm]
  role(composites: [RoleInput], createGroupId: String, createTime: Timestamp, createUserId: String, description: String, groupRoleRelation: [GroupRoleRelationInput], groups: [GroupInput], id: ID, input: RoleInput, isDeprecated: Boolean = false, name: String, permissionRoleRelation: [PermissionRoleRelationInput], permissions: [PermissionInput], realm: RealmInput, realmId: Int, roleCompositeRelation: [RoleCompositeRelationInput], roleUserRelation: [RoleUserRelationInput], updateTime: Timestamp, updateUserId: String, users: [UserInput], version: Int, where: RoleExpression): Role
  roleCompositeRelation(composite: RoleInput, compositeRef: String, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: RoleCompositeRelationInput, isDeprecated: Boolean = false, realmId: Int, role: RoleInput, roleRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: RoleCompositeRelationExpression): RoleCompositeRelation
  roleCompositeRelationList(composite: RoleInput, compositeRef: String, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, list: [RoleCompositeRelationInput], realmId: Int, role: RoleInput, roleRef: String, updateTime: Timestamp, updateUserId: String, version: Int, where: RoleCompositeRelationExpression): [RoleCompositeRelation]
  roleList(composites: [RoleInput], createGroupId: String, createTime: Timestamp, createUserId: String, description: String, groupRoleRelation: [GroupRoleRelationInput], groups: [GroupInput], id: ID, isDeprecated: Boolean = false, list: [RoleInput], name: String, permissionRoleRelation: [PermissionRoleRelationInput], permissions: [PermissionInput], realm: RealmInput, realmId: Int, roleCompositeRelation: [RoleCompositeRelationInput], roleUserRelation: [RoleUserRelationInput], updateTime: Timestamp, updateUserId: String, users: [UserInput], version: Int, where: RoleExpression): [Role]
  roleUserRelation(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: RoleUserRelationInput, isDeprecated: Boolean = false, realmId: Int, role: RoleInput, roleRef: String, updateTime: Timestamp, updateUserId: String, user: UserInput, userRef: String, version: Int, where: RoleUserRelationExpression): RoleUserRelation
  roleUserRelationList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, list: [RoleUserRelationInput], realmId: Int, role: RoleInput, roleRef: String, updateTime: Timestamp, updateUserId: String, user: UserInput, userRef: String, version: Int, where: RoleUserRelationExpression): [RoleUserRelation]
  syncPermissionRoleRelationPolicy(permissionNameList: [String], removedPermissionNameList: [String], roleId: String): Boolean
  user(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, disable: Boolean, email: String, groupUserRelation: [GroupUserRelationInput], groups: [GroupInput], hash: String, id: ID, input: UserInput, isDeprecated: Boolean = false, lastName: String, login: String, name: String, phones: [String], realm: RealmInput, realmId: Int, roleUserRelation: [RoleUserRelationInput], roles: [RoleInput], salt: String, updateTime: Timestamp, updateUserId: String, userPhonesRelation: [UserPhonesRelationInput], version: Int, where: UserExpression): User
  userList(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, disable: Boolean, email: String, groupUserRelation: [GroupUserRelationInput], groups: [GroupInput], hash: String, id: ID, isDeprecated: Boolean = false, lastName: String, list: [UserInput], login: String, name: String, phones: [String], realm: RealmInput, realmId: Int, roleUserRelation: [RoleUserRelationInput], roles: [RoleInput], salt: String, updateTime: Timestamp, updateUserId: String, userPhonesRelation: [UserPhonesRelationInput], version: Int, where: UserExpression): [User]
  userPhonesRelation(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, input: UserPhonesRelationInput, isDeprecated: Boolean = false, phonesRef: String, realmId: Int, updateTime: Timestamp, updateUserId: String, user: UserInput, userRef: String, version: Int, where: UserPhonesRelationExpression): UserPhonesRelation
  userPhonesRelationList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean = false, list: [UserPhonesRelationInput], phonesRef: String, realmId: Int, updateTime: Timestamp, updateUserId: String, user: UserInput, userRef: String, version: Int, where: UserPhonesRelationExpression): [UserPhonesRelation]
}

input Mutation_currentUserResetPassword_Arguments {
  newPassword: String!
  password: String!
}

input Mutation_currentUserUpdate_Arguments {
  userInput: UserInput!
}

input Mutation_login_Arguments {
  login: String!
  password: String!
}

input Mutation_syncPermissionRoleRelationPolicy_Arguments {
  permissionNameList: [String]
  removedPermissionNameList: [String]
  roleId: String
}

interface NamedStruct {
  description: String
  name: String
}

input NamedStructExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input NamedStructInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  isDeprecated: Boolean = false
  name: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

enum Operator {
  BT
  EQ
  GT
  GTE
  IN
  LK
  LT
  LTE
  NBT
  NEQ
  NGT
  NGTE
  NIL
  NIN
  NLK
  NLT
  NLTE
  NNIL
}

input OperatorExpression {
  arr: [Operator]
  opr: Operator = EQ
  val: Operator
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

"""权限"""
type Permission implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """字段"""
  field: String!
  fieldCount: Int
  fieldMax: String
  fieldMin: String
  isDeprecated: Boolean

  """名称"""
  name: ID!
  nameCount: Int
  nameMax: String
  nameMin: String
  permissionRoleRelation: [PermissionRoleRelation]
  permissionRoleRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: PermissionRoleRelationOrderBy, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionRoleRelation
  permissionRoleRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: PermissionRoleRelationOrderBy, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionRoleRelationConnection

  """权限类型"""
  permissionType: PermissionType!

  """租户"""
  realm(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmId: Int

  """角色"""
  roles(after: ID, before: ID, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Role]
  rolesAggregate(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  rolesConnection(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): RoleConnection
  syncPermissionPolicy: Boolean

  """实体"""
  type: String!
  typeCount: Int
  typeMax: String
  typeMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type PermissionConnection {
  edges: [PermissionEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input PermissionConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  first: Int
  groupBy: [String!]
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: PermissionOrderBy
  permissionRoleRelation: PermissionRoleRelationExpression
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  first: Int
  groupBy: [String!]
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: PermissionOrderBy
  permissionRoleRelation: PermissionRoleRelationExpression
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type PermissionEdge {
  cursor: ID
  node: Permission
}

input PermissionExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  permissionRoleRelation: PermissionRoleRelationExpression
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  field: String
  isDeprecated: Boolean = false
  name: ID
  permissionRoleRelation: [PermissionRoleRelationInput]
  permissionType: PermissionType
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  type: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: PermissionExpression
}

input PermissionListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  field: String
  isDeprecated: Boolean = false
  list: [PermissionInput]
  name: ID
  permissionRoleRelation: [PermissionRoleRelationInput]
  permissionType: PermissionType
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  type: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: PermissionExpression
}

input PermissionListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  first: Int
  groupBy: [String!]
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: PermissionOrderBy
  permissionRoleRelation: PermissionRoleRelationExpression
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  first: Int
  groupBy: [String!]
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: PermissionOrderBy
  permissionRoleRelation: PermissionRoleRelationExpression
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  field: String
  input: PermissionInput
  isDeprecated: Boolean = false
  name: ID
  permissionRoleRelation: [PermissionRoleRelationInput]
  permissionType: PermissionType
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  type: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: PermissionExpression
}

input PermissionOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  field: Sort
  isDeprecated: Sort
  name: Sort
  permissionType: Sort
  realmId: Sort
  type: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input PermissionQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  groupBy: [String!]
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  permissionRoleRelation: PermissionRoleRelationExpression
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type PermissionRoleRelation implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  permission(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, field: StringExpression, groupBy: [String!], includeDeprecated: Boolean = false, name: StringExpression, permissionRoleRelation: PermissionRoleRelationExpression, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Permission
  permissionRef: String
  permissionRefCount: Int
  permissionRefMax: String
  permissionRefMin: String
  realmId: Int
  role(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  roleRef: String
  roleRefCount: Int
  roleRefMax: String
  roleRefMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type PermissionRoleRelationConnection {
  edges: [PermissionRoleRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input PermissionRoleRelationConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [PermissionRoleRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: PermissionRoleRelationOrderBy
  permission: PermissionExpression
  permissionRef: StringExpression
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionRoleRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [PermissionRoleRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: PermissionRoleRelationOrderBy
  permission: PermissionExpression
  permissionRef: StringExpression
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type PermissionRoleRelationEdge {
  cursor: ID
  node: PermissionRoleRelation
}

input PermissionRoleRelationExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [PermissionRoleRelationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  permission: PermissionExpression
  permissionRef: StringExpression
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionRoleRelationInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  permission: PermissionInput
  permissionRef: String
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: PermissionRoleRelationExpression
}

input PermissionRoleRelationListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  list: [PermissionRoleRelationInput]
  permission: PermissionInput
  permissionRef: String
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: PermissionRoleRelationExpression
}

input PermissionRoleRelationListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [PermissionRoleRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: PermissionRoleRelationOrderBy
  permission: PermissionExpression
  permissionRef: StringExpression
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionRoleRelationListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [PermissionRoleRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: PermissionRoleRelationOrderBy
  permission: PermissionExpression
  permissionRef: StringExpression
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionRoleRelationMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: PermissionRoleRelationInput
  isDeprecated: Boolean = false
  permission: PermissionInput
  permissionRef: String
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: PermissionRoleRelationExpression
}

input PermissionRoleRelationOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  permissionRef: Sort
  realmId: Sort
  roleRef: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input PermissionRoleRelationQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [PermissionRoleRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  permission: PermissionExpression
  permissionRef: StringExpression
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionRoleRelationSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [PermissionRoleRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  permission: PermissionExpression
  permissionRef: StringExpression
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  groupBy: [String!]
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  permissionRoleRelation: PermissionRoleRelationExpression
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

"""权限类型"""
enum PermissionType {
  """读取"""
  READ

  """写入"""
  WRITE
}

input PermissionTypeExpression {
  arr: [PermissionType]
  opr: Operator = EQ
  val: PermissionType
}

type Policy {
  id: String
  ptype: String
  v0: String
  v1: String
  v2: String
  v3: String
  v4: String
  v5: String
}

input Property {
  name: String!
  required: [String]
  validation: JsonSchema
}

enum Protocol {
  GRPC
  HTTP
  LOCAL
  RSOCKET
}

input ProtocolExpression {
  arr: [Protocol]
  opr: Operator = EQ
  val: Protocol
}

type Query {
  current: CurrentUser
  currentPermissionNameListByTypes(types: [String]): [String]
  currentPermissionTypeList: [String]
  currentUser: User
  group(cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, exs: [GroupExpression], groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Group
  groupConnection(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, exs: [GroupExpression], first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): GroupConnection
  groupList(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, exs: [GroupExpression], first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Group]
  groupRoleRelation(cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleRelationExpression], group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleRelation
  groupRoleRelationConnection(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleRelationExpression], first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupRoleRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleRelationConnection
  groupRoleRelationList(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleRelationExpression], first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupRoleRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [GroupRoleRelation]
  groupUserRelation(cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupUserRelationExpression], group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): GroupUserRelation
  groupUserRelationConnection(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupUserRelationExpression], first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupUserRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): GroupUserRelationConnection
  groupUserRelationList(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupUserRelationExpression], first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupUserRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): [GroupUserRelation]
  jsonSchema(name: String): String
  permission(cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], field: StringExpression, groupBy: [String!], includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, permissionRoleRelation: PermissionRoleRelationExpression, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Permission
  permissionConnection(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], field: StringExpression, first: Int, groupBy: [String!], includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: PermissionOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionConnection
  permissionList(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], field: StringExpression, first: Int, groupBy: [String!], includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: PermissionOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Permission]
  permissionRoleRelation(cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [PermissionRoleRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionRoleRelation
  permissionRoleRelationConnection(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [PermissionRoleRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: PermissionRoleRelationOrderBy, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionRoleRelationConnection
  permissionRoleRelationList(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [PermissionRoleRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: PermissionRoleRelationOrderBy, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [PermissionRoleRelation]
  policyList: [Policy]
  realm(cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RealmExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmConnection(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RealmExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RealmOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RealmConnection
  realmList(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RealmExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RealmOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Realm]
  role(composites: RoleExpression, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  roleCompositeRelation(composite: RoleExpression, compositeRef: StringExpression, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleCompositeRelation
  roleCompositeRelationConnection(after: ID, before: ID, composite: RoleExpression, compositeRef: StringExpression, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleCompositeRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleCompositeRelationConnection
  roleCompositeRelationList(after: ID, before: ID, composite: RoleExpression, compositeRef: StringExpression, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleCompositeRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RoleCompositeRelation]
  roleConnection(after: ID, before: ID, composites: RoleExpression, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): RoleConnection
  roleList(after: ID, before: ID, composites: RoleExpression, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Role]
  roleUserRelation(cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleUserRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): RoleUserRelation
  roleUserRelationConnection(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleUserRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleUserRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): RoleUserRelationConnection
  roleUserRelationList(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleUserRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleUserRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): [RoleUserRelation]
  user(cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, not: Boolean = false, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): User
  userConnection(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, not: Boolean = false, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): UserConnection
  userList(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, not: Boolean = false, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): [User]
  userPhonesRelation(cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, phonesRef: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): UserPhonesRelation
  userPhonesRelationConnection(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserPhonesRelationOrderBy, phonesRef: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): UserPhonesRelationConnection
  userPhonesRelationList(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserPhonesRelationOrderBy, phonesRef: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): [UserPhonesRelation]
}

input Query_currentPermissionNameListByTypes_Arguments {
  types: [String]
}

input Query_jsonSchema_Arguments {
  name: String
}

"""租户"""
type Realm implements Meta & NamedStruct {
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """名称"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type RealmConnection {
  edges: [RealmEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RealmConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RealmOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RealmConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RealmOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RealmEdge {
  cursor: ID
  node: Realm
}

input RealmExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RealmInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean = false
  name: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RealmExpression
}

input RealmListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean = false
  list: [RealmInput]
  name: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RealmExpression
}

input RealmListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RealmOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RealmListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RealmOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RealmMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  input: RealmInput
  isDeprecated: Boolean = false
  name: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RealmExpression
}

input RealmOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RealmQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RealmSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

"""角色"""
type Role implements Meta & NamedStruct {
  """组合"""
  composites(after: ID, before: ID, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Role]
  compositesAggregate(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  compositesConnection(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): RoleConnection
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String
  groupRoleRelation: [GroupRoleRelation]
  groupRoleRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupRoleRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleRelation
  groupRoleRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupRoleRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleRelationConnection

  """组"""
  groups(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Group]
  groupsAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Group
  groupsConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): GroupConnection

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """名称"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String
  permissionRoleRelation: [PermissionRoleRelation]
  permissionRoleRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: PermissionRoleRelationOrderBy, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionRoleRelation
  permissionRoleRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: PermissionRoleRelationOrderBy, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionRoleRelationConnection

  """权限"""
  permissions(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, field: StringExpression, first: Int, groupBy: [String!], includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: PermissionOrderBy, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Permission]
  permissionsAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, field: StringExpression, first: Int, groupBy: [String!], includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: PermissionOrderBy, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Permission
  permissionsConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, field: StringExpression, first: Int, groupBy: [String!], includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: PermissionOrderBy, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionConnection

  """租户"""
  realm(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmId: Int
  roleCompositeRelation: [RoleCompositeRelation]
  roleCompositeRelationAggregate(composite: RoleExpression, compositeRef: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleCompositeRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleCompositeRelation
  roleCompositeRelationConnection(composite: RoleExpression, compositeRef: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleCompositeRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleCompositeRelationConnection
  roleUserRelation: [RoleUserRelation]
  roleUserRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleUserRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): RoleUserRelation
  roleUserRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleUserRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): RoleUserRelationConnection
  syncRolePolicy: Boolean
  updateTime: Timestamp
  updateUserId: String

  """用户"""
  users(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): [User]
  usersAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): User
  usersConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): UserConnection
  version: Int
}

type RoleCompositeRelation implements Meta {
  composite(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  compositeRef: String
  compositeRefCount: Int
  compositeRefMax: String
  compositeRefMin: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  role(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  roleRef: String
  roleRefCount: Int
  roleRefMax: String
  roleRefMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type RoleCompositeRelationConnection {
  edges: [RoleCompositeRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RoleCompositeRelationConnectionQueryArguments {
  after: ID
  before: ID
  composite: RoleExpression
  compositeRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleCompositeRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleCompositeRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  composite: RoleExpression
  compositeRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleCompositeRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RoleCompositeRelationEdge {
  cursor: ID
  node: RoleCompositeRelation
}

input RoleCompositeRelationExpression {
  composite: RoleExpression
  compositeRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeRelationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleCompositeRelationInput {
  composite: RoleInput
  compositeRef: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RoleCompositeRelationExpression
}

input RoleCompositeRelationListMutationArguments {
  composite: RoleInput
  compositeRef: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  list: [RoleCompositeRelationInput]
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RoleCompositeRelationExpression
}

input RoleCompositeRelationListQueryArguments {
  after: ID
  before: ID
  composite: RoleExpression
  compositeRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleCompositeRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleCompositeRelationListSubscriptionArguments {
  after: ID
  before: ID
  composite: RoleExpression
  compositeRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleCompositeRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleCompositeRelationMutationArguments {
  composite: RoleInput
  compositeRef: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: RoleCompositeRelationInput
  isDeprecated: Boolean = false
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RoleCompositeRelationExpression
}

input RoleCompositeRelationOrderBy {
  compositeRef: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  roleRef: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RoleCompositeRelationQueryArguments {
  composite: RoleExpression
  compositeRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleCompositeRelationSubscriptionArguments {
  composite: RoleExpression
  compositeRef: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RoleConnection {
  edges: [RoleEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RoleConnectionQueryArguments {
  after: ID
  before: ID
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  first: Int
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RoleOrderBy
  permissionRoleRelation: PermissionRoleRelationExpression
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleCompositeRelation: RoleCompositeRelationExpression
  roleUserRelation: RoleUserRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input RoleConnectionSubscriptionArguments {
  after: ID
  before: ID
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  first: Int
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RoleOrderBy
  permissionRoleRelation: PermissionRoleRelationExpression
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleCompositeRelation: RoleCompositeRelationExpression
  roleUserRelation: RoleUserRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

type RoleEdge {
  cursor: ID
  node: Role
}

input RoleExpression {
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  groupRoleRelation: GroupRoleRelationExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  permissionRoleRelation: PermissionRoleRelationExpression
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleCompositeRelation: RoleCompositeRelationExpression
  roleUserRelation: RoleUserRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input RoleInput {
  composites: [RoleInput]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  groupRoleRelation: [GroupRoleRelationInput]
  groups: [GroupInput]
  id: ID
  isDeprecated: Boolean = false
  name: String
  permissionRoleRelation: [PermissionRoleRelationInput]
  permissions: [PermissionInput]
  realm: RealmInput
  realmId: Int
  roleCompositeRelation: [RoleCompositeRelationInput]
  roleUserRelation: [RoleUserRelationInput]
  updateTime: Timestamp
  updateUserId: String
  users: [UserInput]
  version: Int
  where: RoleExpression
}

input RoleListMutationArguments {
  composites: [RoleInput]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  groupRoleRelation: [GroupRoleRelationInput]
  groups: [GroupInput]
  id: ID
  isDeprecated: Boolean = false
  list: [RoleInput]
  name: String
  permissionRoleRelation: [PermissionRoleRelationInput]
  permissions: [PermissionInput]
  realm: RealmInput
  realmId: Int
  roleCompositeRelation: [RoleCompositeRelationInput]
  roleUserRelation: [RoleUserRelationInput]
  updateTime: Timestamp
  updateUserId: String
  users: [UserInput]
  version: Int
  where: RoleExpression
}

input RoleListQueryArguments {
  after: ID
  before: ID
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  first: Int
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RoleOrderBy
  permissionRoleRelation: PermissionRoleRelationExpression
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleCompositeRelation: RoleCompositeRelationExpression
  roleUserRelation: RoleUserRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input RoleListSubscriptionArguments {
  after: ID
  before: ID
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  first: Int
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RoleOrderBy
  permissionRoleRelation: PermissionRoleRelationExpression
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleCompositeRelation: RoleCompositeRelationExpression
  roleUserRelation: RoleUserRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input RoleMutationArguments {
  composites: [RoleInput]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  groupRoleRelation: [GroupRoleRelationInput]
  groups: [GroupInput]
  id: ID
  input: RoleInput
  isDeprecated: Boolean = false
  name: String
  permissionRoleRelation: [PermissionRoleRelationInput]
  permissions: [PermissionInput]
  realm: RealmInput
  realmId: Int
  roleCompositeRelation: [RoleCompositeRelationInput]
  roleUserRelation: [RoleUserRelationInput]
  updateTime: Timestamp
  updateUserId: String
  users: [UserInput]
  version: Int
  where: RoleExpression
}

input RoleOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RoleQueryArguments {
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  permissionRoleRelation: PermissionRoleRelationExpression
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleCompositeRelation: RoleCompositeRelationExpression
  roleUserRelation: RoleUserRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input RoleSubscriptionArguments {
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  groupBy: [String!]
  groupRoleRelation: GroupRoleRelationExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  permissionRoleRelation: PermissionRoleRelationExpression
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleCompositeRelation: RoleCompositeRelationExpression
  roleUserRelation: RoleUserRelationExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

type RoleUserRelation implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  role(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  roleRef: String
  roleRefCount: Int
  roleRefMax: String
  roleRefMin: String
  updateTime: Timestamp
  updateUserId: String
  user(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): User
  userRef: String
  userRefCount: Int
  userRefMax: String
  userRefMin: String
  version: Int
}

type RoleUserRelationConnection {
  edges: [RoleUserRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RoleUserRelationConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleUserRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleUserRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input RoleUserRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleUserRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleUserRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

type RoleUserRelationEdge {
  cursor: ID
  node: RoleUserRelation
}

input RoleUserRelationExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleUserRelationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input RoleUserRelationInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: String
  version: Int
  where: RoleUserRelationExpression
}

input RoleUserRelationListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  list: [RoleUserRelationInput]
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: String
  version: Int
  where: RoleUserRelationExpression
}

input RoleUserRelationListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleUserRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleUserRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input RoleUserRelationListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleUserRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleUserRelationOrderBy
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input RoleUserRelationMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: RoleUserRelationInput
  isDeprecated: Boolean = false
  realmId: Int
  role: RoleInput
  roleRef: String
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: String
  version: Int
  where: RoleUserRelationExpression
}

input RoleUserRelationOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  roleRef: Sort
  updateTime: Sort
  updateUserId: Sort
  userRef: Sort
  version: Sort
}

input RoleUserRelationQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleUserRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input RoleUserRelationSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleUserRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  role: RoleExpression
  roleRef: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

enum Sort {
  ASC
  DESC
}

input SortExpression {
  arr: [Sort]
  opr: Operator = EQ
  val: Sort
}

input StringExpression {
  arr: [String]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: String
}

type Subscription {
  group(cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, exs: [GroupExpression], groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Group
  groupConnection(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, exs: [GroupExpression], first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): GroupConnection
  groupList(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, exs: [GroupExpression], first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groupUserRelation: GroupUserRelationExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Group]
  groupRoleRelation(cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleRelationExpression], group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleRelation
  groupRoleRelationConnection(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleRelationExpression], first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupRoleRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleRelationConnection
  groupRoleRelationList(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleRelationExpression], first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupRoleRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [GroupRoleRelation]
  groupUserRelation(cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupUserRelationExpression], group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): GroupUserRelation
  groupUserRelationConnection(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupUserRelationExpression], first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupUserRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): GroupUserRelationConnection
  groupUserRelationList(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupUserRelationExpression], first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupUserRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): [GroupUserRelation]
  permission(cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], field: StringExpression, groupBy: [String!], includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, permissionRoleRelation: PermissionRoleRelationExpression, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Permission
  permissionConnection(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], field: StringExpression, first: Int, groupBy: [String!], includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: PermissionOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionConnection
  permissionList(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], field: StringExpression, first: Int, groupBy: [String!], includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: PermissionOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Permission]
  permissionRoleRelation(cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [PermissionRoleRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionRoleRelation
  permissionRoleRelationConnection(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [PermissionRoleRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: PermissionRoleRelationOrderBy, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionRoleRelationConnection
  permissionRoleRelationList(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [PermissionRoleRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: PermissionRoleRelationOrderBy, permission: PermissionExpression, permissionRef: StringExpression, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [PermissionRoleRelation]
  realm(cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RealmExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmConnection(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RealmExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RealmOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RealmConnection
  realmList(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RealmExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RealmOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Realm]
  role(composites: RoleExpression, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  roleCompositeRelation(composite: RoleExpression, compositeRef: StringExpression, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleCompositeRelation
  roleCompositeRelationConnection(after: ID, before: ID, composite: RoleExpression, compositeRef: StringExpression, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleCompositeRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleCompositeRelationConnection
  roleCompositeRelationList(after: ID, before: ID, composite: RoleExpression, compositeRef: StringExpression, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleCompositeRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RoleCompositeRelation]
  roleConnection(after: ID, before: ID, composites: RoleExpression, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): RoleConnection
  roleList(after: ID, before: ID, composites: RoleExpression, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], first: Int, groupBy: [String!], groupRoleRelation: GroupRoleRelationExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RoleOrderBy, permissionRoleRelation: PermissionRoleRelationExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleCompositeRelation: RoleCompositeRelationExpression, roleUserRelation: RoleUserRelationExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Role]
  roleUserRelation(cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleUserRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): RoleUserRelation
  roleUserRelationConnection(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleUserRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleUserRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): RoleUserRelationConnection
  roleUserRelationList(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleUserRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleUserRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): [RoleUserRelation]
  user(cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, not: Boolean = false, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): User
  userConnection(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, not: Boolean = false, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): UserConnection
  userList(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], first: Int, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, not: Boolean = false, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): [User]
  userPhonesRelation(cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesRelationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, phonesRef: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): UserPhonesRelation
  userPhonesRelationConnection(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserPhonesRelationOrderBy, phonesRef: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): UserPhonesRelationConnection
  userPhonesRelationList(after: ID, before: ID, cond: Conditional, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesRelationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserPhonesRelationOrderBy, phonesRef: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): [UserPhonesRelation]
}

scalar Time

scalar Timestamp

interface TreeStruct {
  deep: Int
  name: String
  parentId: String
  path: String
}

input TreeStructExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  parentId: StringExpression
  path: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TreeStructInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  deep: Int
  isDeprecated: Boolean = false
  name: String
  parentId: String
  path: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

"""用户"""
type User implements Meta & NamedStruct {
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """禁用"""
  disable: Boolean

  """邮箱"""
  email: String
  emailCount: Int
  emailMax: String
  emailMin: String
  groupUserRelation: [GroupUserRelation]
  groupUserRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupUserRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): GroupUserRelation
  groupUserRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupRef: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupUserRelationOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): GroupUserRelationConnection

  """组"""
  groups(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Group]
  groupsAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Group
  groupsConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): GroupConnection

  """哈希"""
  hash: String
  hashCount: Int
  hashMax: String
  hashMin: String

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """姓氏"""
  lastName: String
  lastNameCount: Int
  lastNameMax: String
  lastNameMin: String

  """账号"""
  login: String!
  loginCount: Int
  loginMax: String
  loginMin: String

  """姓名"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """手机号"""
  phones(after: ID, arr: [String], before: ID, first: Int, last: Int, offset: Int, opr: Operator = EQ, sort: Sort, val: String): [String]

  """租户"""
  realm(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmId: Int
  roleUserRelation: [RoleUserRelation]
  roleUserRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleUserRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): RoleUserRelation
  roleUserRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleUserRelationOrderBy, realmId: IntExpression, role: RoleExpression, roleRef: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): RoleUserRelationConnection

  """角色"""
  roles(after: ID, before: ID, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Role]
  rolesAggregate(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  rolesConnection(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): RoleConnection

  """盐"""
  salt: String
  saltCount: Int
  saltMax: String
  saltMin: String
  syncUserPolicy: Boolean
  updateTime: Timestamp
  updateUserId: String
  userPhonesRelation: [UserPhonesRelation]
  userPhonesRelationAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserPhonesRelationOrderBy, phonesRef: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): UserPhonesRelation
  userPhonesRelationConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserPhonesRelationOrderBy, phonesRef: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userRef: StringExpression, version: IntExpression): UserPhonesRelationConnection
  version: Int
}

type UserConnection {
  edges: [UserEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input UserConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  first: Int
  groupBy: [String!]
  groupUserRelation: GroupUserRelationExpression
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: UserOrderBy
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roleUserRelation: RoleUserRelationExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userPhonesRelation: UserPhonesRelationExpression
  version: IntExpression
}

input UserConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  first: Int
  groupBy: [String!]
  groupUserRelation: GroupUserRelationExpression
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: UserOrderBy
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roleUserRelation: RoleUserRelationExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userPhonesRelation: UserPhonesRelationExpression
  version: IntExpression
}

type UserEdge {
  cursor: ID
  node: User
}

input UserExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  groupUserRelation: GroupUserRelationExpression
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roleUserRelation: RoleUserRelationExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userPhonesRelation: UserPhonesRelationExpression
  version: IntExpression
}

input UserInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  disable: Boolean
  email: String
  groupUserRelation: [GroupUserRelationInput]
  groups: [GroupInput]
  hash: String
  id: ID
  isDeprecated: Boolean = false
  lastName: String
  login: String
  name: String
  phones: [String]
  realm: RealmInput
  realmId: Int
  roleUserRelation: [RoleUserRelationInput]
  roles: [RoleInput]
  salt: String
  updateTime: Timestamp
  updateUserId: String
  userPhonesRelation: [UserPhonesRelationInput]
  version: Int
  where: UserExpression
}

input UserListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  disable: Boolean
  email: String
  groupUserRelation: [GroupUserRelationInput]
  groups: [GroupInput]
  hash: String
  id: ID
  isDeprecated: Boolean = false
  lastName: String
  list: [UserInput]
  login: String
  name: String
  phones: [String]
  realm: RealmInput
  realmId: Int
  roleUserRelation: [RoleUserRelationInput]
  roles: [RoleInput]
  salt: String
  updateTime: Timestamp
  updateUserId: String
  userPhonesRelation: [UserPhonesRelationInput]
  version: Int
  where: UserExpression
}

input UserListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  first: Int
  groupBy: [String!]
  groupUserRelation: GroupUserRelationExpression
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: UserOrderBy
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roleUserRelation: RoleUserRelationExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userPhonesRelation: UserPhonesRelationExpression
  version: IntExpression
}

input UserListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  first: Int
  groupBy: [String!]
  groupUserRelation: GroupUserRelationExpression
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: UserOrderBy
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roleUserRelation: RoleUserRelationExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userPhonesRelation: UserPhonesRelationExpression
  version: IntExpression
}

input UserMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  disable: Boolean
  email: String
  groupUserRelation: [GroupUserRelationInput]
  groups: [GroupInput]
  hash: String
  id: ID
  input: UserInput
  isDeprecated: Boolean = false
  lastName: String
  login: String
  name: String
  phones: [String]
  realm: RealmInput
  realmId: Int
  roleUserRelation: [RoleUserRelationInput]
  roles: [RoleInput]
  salt: String
  updateTime: Timestamp
  updateUserId: String
  userPhonesRelation: [UserPhonesRelationInput]
  version: Int
  where: UserExpression
}

input UserOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  disable: Sort
  email: Sort
  hash: Sort
  id: Sort
  isDeprecated: Sort
  lastName: Sort
  login: Sort
  name: Sort
  realmId: Sort
  salt: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

type UserPhonesRelation implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  phonesRef: String
  phonesRefCount: Int
  phonesRefMax: String
  phonesRefMin: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, groupBy: [String!], groupUserRelation: GroupUserRelationExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roleUserRelation: RoleUserRelationExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userPhonesRelation: UserPhonesRelationExpression, version: IntExpression): User
  userRef: String
  userRefCount: Int
  userRefMax: String
  userRefMin: String
  version: Int
}

type UserPhonesRelationConnection {
  edges: [UserPhonesRelationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input UserPhonesRelationConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserPhonesRelationOrderBy
  phonesRef: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input UserPhonesRelationConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserPhonesRelationOrderBy
  phonesRef: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

type UserPhonesRelationEdge {
  cursor: ID
  node: UserPhonesRelation
}

input UserPhonesRelationExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesRelationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  phonesRef: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input UserPhonesRelationInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  phonesRef: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: String
  version: Int
  where: UserPhonesRelationExpression
}

input UserPhonesRelationListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean = false
  list: [UserPhonesRelationInput]
  phonesRef: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: String
  version: Int
  where: UserPhonesRelationExpression
}

input UserPhonesRelationListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserPhonesRelationOrderBy
  phonesRef: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input UserPhonesRelationListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesRelationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserPhonesRelationOrderBy
  phonesRef: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input UserPhonesRelationMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  input: UserPhonesRelationInput
  isDeprecated: Boolean = false
  phonesRef: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userRef: String
  version: Int
  where: UserPhonesRelationExpression
}

input UserPhonesRelationOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  phonesRef: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  userRef: Sort
  version: Sort
}

input UserPhonesRelationQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  phonesRef: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input UserPhonesRelationSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesRelationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  phonesRef: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userRef: StringExpression
  version: IntExpression
}

input UserQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  groupBy: [String!]
  groupUserRelation: GroupUserRelationExpression
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roleUserRelation: RoleUserRelationExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userPhonesRelation: UserPhonesRelationExpression
  version: IntExpression
}

input UserSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  groupBy: [String!]
  groupUserRelation: GroupUserRelationExpression
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roleUserRelation: RoleUserRelationExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userPhonesRelation: UserPhonesRelationExpression
  version: IntExpression
}

input With {
  from: String
  to: String
  type: String
}
