import type { BaseTranslation } from '../../i18n-types';

const en: BaseTranslation = {
	code: {
		"-40101": 'Authentication failed',
		"-40900": 'Resource has been updated',
		"-40901": 'Existed unique values',
		"-99999": 'Requet error'
	},
	http: {
		"400": 'Bad Request',
		"404": 'Not Found',
		"408": 'Request Timeout',
		"500": 'Internal Server Error',
		unknown: 'Unknown Error'
	},
	types: {
		string: 'String',
		number: 'Number',
		integer: 'Integer',
		boolean: 'Boolean',
		array: 'Array',
		object: 'Object',
		null: 'Null'
	},
	formats: {
		date: 'Date (YYYY-MM-DD)',
		time: 'Time (HH:MM:SS)',
		'date-time': 'Date-Time (ISO 8601)',
		'iso-time': 'ISO Time',
		'iso-date-time': 'ISO Date-Time',
		duration: 'Duration (ISO 8601)',
		uri: 'URI',
		'uri-reference': 'URI Reference',
		'uri-template': 'URI Template',
		email: 'Email',
		hostname: 'Hostname',
		ipv4: 'IPv4 Address',
		ipv6: 'IPv6 Address',
		regex: 'Regular Expression',
		uuid: 'UUID',
		'json-pointer': 'JSON Pointer',
		'relative-json-pointer': 'Relative JSON Pointer',
		byte: 'Byte (Base64)',
		int32: 'Integer 32-bit',
		int64: 'Integer 64-bit',
		float: 'Float',
		double: 'Double',
		password: 'Password',
		binary: 'Binary'
	},
	jsonSchema: {
		items: 'must NOT have more than {limit:any} items',
		additionalProperties: 'must NOT have additional properties',
		anyOf: 'must match a schema in "anyOf"',
		const: 'must be equal to constant',
		contains: 'must contain a valid item',
		dependentRequired: 'must have properties {deps:any} when property {property:any} is present',
		discriminator: 'must pass "{keyword:any}" keyword validation',
		tag: 'tag "{tag:any}" must be string',
		mapping: 'value of tag "{tag:any}" must be in oneOf',
		enum: 'must be equal to one of the allowed values',
		false: 'boolean schema is false',
		format: 'must match format "{format:any}"',
		formatMaximum: 'must be {comparison:any} {limit:any}',
		formatMinimum: 'must be {comparison:any} {limit:any}',
		if: 'must match "{failingKeyword:any}" schema',
		maximum: 'must be {comparison:any} {limit:any}',
		maxItems: 'must NOT have more than {limit:any} item',
		maxLength: 'must NOT be longer than {limit:any} character',
		maxProperties: 'must NOT be more than {limit:any} properties',
		minimum: 'must be {comparison:any} {limit:any}',
		minItems: 'must NOT have less than {limit:any} item',
		minLength: 'must NOT be shorter than {limit:any} character',
		minProperties: 'must NOT be less than {limit:any} properties',
		multipleOf: 'must be a multiple of {multipleOf:any}',
		not: 'must NOT be valid according to schema in "not"',
		oneOf: 'must match exactly one schema in "oneOf"',
		pattern: 'must match pattern "{pattern:any}"',
		patternRequired: 'must have property matching pattern "{missingPattern:any}"',
		propertyNames: 'property name is invalid',
		required: 'required',
		type: 'must be {type:any}',
		unevaluatedItems: 'must NOT have more than {len:any} items',
		unevaluatedProperties: 'must NOT have unevaluated properties',
		uniqueItems: 'must NOT have duplicate items (items ## and {j:any} are {i:any} identical)',
		default: 'must pass "{keyword:any}" keyword validation'
	}
}

export default en;
