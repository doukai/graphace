// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
/* eslint-disable */

import { initFormatters } from './formatters'
import type { Locales, Translations } from './i18n-types'
import { loadedFormatters, loadedLocales, locales } from './i18n-util'

import en from './en'
import zh from './zh'

import en_errors from './en/errors'
import en_graphence from './en/graphence'
import en_graphql from './en/graphql'
import en_ui from './en/ui'
import en_ui_graphql from './en/ui_graphql'
import zh_errors from './zh/errors'
import zh_graphence from './zh/graphence'
import zh_graphql from './zh/graphql'
import zh_ui from './zh/ui'
import zh_ui_graphql from './zh/ui_graphql'

const localeTranslations = {
	en: {
		...en,
		errors: en_errors,
		graphence: en_graphence,
		graphql: en_graphql,
		ui: en_ui,
		ui_graphql: en_ui_graphql
	},
	zh: {
		...zh,
		errors: zh_errors,
		graphence: zh_graphence,
		graphql: zh_graphql,
		ui: zh_ui,
		ui_graphql: zh_ui_graphql
	},
}

export const loadLocale = (locale: Locales): void => {
	if (loadedLocales[locale]) return

	loadedLocales[locale] = localeTranslations[locale] as unknown as Translations
	loadFormatters(locale)
}

export const loadAllLocales = (): void => locales.forEach(loadLocale)

export const loadFormatters = (locale: Locales): void =>
	void (loadedFormatters[locale] = initFormatters(locale))
