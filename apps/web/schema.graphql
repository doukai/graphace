schema {
  query: QueryType
  mutation: MutationType
}

directive @column(autoIncrement: Boolean, default: String) on FIELD_DEFINITION

directive @connection(agg: String, field: String) on FIELD_DEFINITION

directive @containerType(className: String) on OBJECT

directive @cursor on FIELD_DEFINITION

directive @dataType(decimals: Int, default: String, length: Int, type: String) on FIELD_DEFINITION

directive @delete on FIELD

directive @denyAll on OBJECT

directive @format(locale: String, value: String) on FIELD_DEFINITION

directive @func(field: String, name: Function) on FIELD_DEFINITION

directive @invoke(className: String, methodName: String, parameters: [InvokeParameter], returnClassName: String) on FIELD_DEFINITION

directive @map(anchor: Boolean, from: String, to: String, with: MapWith) on FIELD_DEFINITION

directive @permitAll on OBJECT

directive @rolesAllowed(roles: [String]) on OBJECT

directive @table(engine: String) on OBJECT

directive @update on FIELD

directive @validation(allOf: [ValidationInput], anyOf: [ValidationInput], const: String, contentEncoding: String, contentMediaType: String, dependentRequired: [Property], else: ValidationInput, enum: [String], exclusiveMaximum: Float, exclusiveMinimum: Float, format: String, if: ValidationInput, items: ValidationInput, maxItems: Int, maxLength: Int, maximum: Float, minItems: Int, minLength: Int, minimum: Float, multipleOf: Float, not: ValidationInput, oneOf: [ValidationInput], pattern: String, properties: [Property], then: ValidationInput, uniqueItems: Boolean) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInteger

input BooleanExpression {
  in: [Boolean]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: Boolean
}

enum Conditional {
  AND
  OR
}

input ConditionalExpression {
  in: [Conditional]
  opr: Operator = EQ
  val: Conditional
}

scalar Date

scalar DateTime

input FloatExpression {
  in: [Float]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: Float
}

enum Function {
  AVG
  COUNT
  MAX
  MIN
  SUM
}

input FunctionExpression {
  in: [Function]
  opr: Operator = EQ
  val: Function
}

input IDExpression {
  in: [ID]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: ID
}

input IntExpression {
  in: [Int]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: Int
}

input InvokeParameter {
  className: String
  name: String
}

input MapWith {
  from: String
  to: String
  type: String
}

interface Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  isDeprecated: Boolean
  realmId: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type MutationType implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  isDeprecated: Boolean
  organization(above: OrganizationInput, aboveId: Int, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, name: String!, realmId: String, updateTime: Timestamp, updateUserId: String, users: [UserInput!], version: Int, where: OrganizationExpression): Organization
  organizationList(above: OrganizationInput, aboveId: Int, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, list: [OrganizationInput], name: String!, realmId: String, updateTime: Timestamp, updateUserId: String, users: [UserInput!], version: Int, where: OrganizationExpression): [Organization]
  realmId: String
  role(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, name: String!, realmId: String, type: [RoleType]!, updateTime: Timestamp, updateUserId: String, users: [UserInput!], version: Int, where: RoleExpression): Role
  roleList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, list: [RoleInput], name: String!, realmId: String, type: [RoleType]!, updateTime: Timestamp, updateUserId: String, users: [UserInput!], version: Int, where: RoleExpression): [Role]
  roleRoleType(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, realmId: String, roleId: Int, type: RoleType, updateTime: Timestamp, updateUserId: String, version: Int, where: RoleRoleTypeExpression): RoleRoleType
  roleRoleTypeList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, list: [RoleRoleTypeInput], realmId: String, roleId: Int, type: RoleType, updateTime: Timestamp, updateUserId: String, version: Int, where: RoleRoleTypeExpression): [RoleRoleType]
  updateTime: Timestamp
  updateUserId: String
  user(age: Int, createGroupId: String, createTime: Timestamp, createUserId: String, disable: Boolean, id: ID, isDeprecated: Boolean, login: String!, name: String!, organization: OrganizationInput, organizationId: Int, password: String!, phones: [String!], realmId: String, roles: [RoleInput!], sex: Sex, test1: [Int!], test2: [Boolean!], updateTime: Timestamp, updateUserId: String, userProfile: UserProfileInput, version: Int, where: UserExpression): User
  userList(age: Int, createGroupId: String, createTime: Timestamp, createUserId: String, disable: Boolean, id: ID, isDeprecated: Boolean, list: [UserInput], login: String!, name: String!, organization: OrganizationInput, organizationId: Int, password: String!, phones: [String!], realmId: String, roles: [RoleInput!], sex: Sex, test1: [Int!], test2: [Boolean!], updateTime: Timestamp, updateUserId: String, userProfile: UserProfileInput, version: Int, where: UserExpression): [User]
  userPhones(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, phone: String, realmId: String, updateTime: Timestamp, updateUserId: String, userId: Int, version: Int, where: UserPhonesExpression): UserPhones
  userPhonesList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, list: [UserPhonesInput], phone: String, realmId: String, updateTime: Timestamp, updateUserId: String, userId: Int, version: Int, where: UserPhonesExpression): [UserPhones]
  userProfile(address: String, createGroupId: String, createTime: Timestamp, createUserId: String, email: String, id: ID, isDeprecated: Boolean, qq: String, realmId: String, updateTime: Timestamp, updateUserId: String, user: UserInput, userId: String, version: Int, where: UserProfileExpression): UserProfile
  userProfileList(address: String, createGroupId: String, createTime: Timestamp, createUserId: String, email: String, id: ID, isDeprecated: Boolean, list: [UserProfileInput], qq: String, realmId: String, updateTime: Timestamp, updateUserId: String, user: UserInput, userId: String, version: Int, where: UserProfileExpression): [UserProfile]
  userRole(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, realmId: String, roleId: Int, updateTime: Timestamp, updateUserId: String, userId: Int, version: Int, where: UserRoleExpression): UserRole
  userRoleList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, list: [UserRoleInput], realmId: String, roleId: Int, updateTime: Timestamp, updateUserId: String, userId: Int, version: Int, where: UserRoleExpression): [UserRole]
  userTest1(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, realmId: String, test1: Int, updateTime: Timestamp, updateUserId: String, userId: Int, version: Int, where: UserTest1Expression): UserTest1
  userTest1List(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, list: [UserTest1Input], realmId: String, test1: Int, updateTime: Timestamp, updateUserId: String, userId: Int, version: Int, where: UserTest1Expression): [UserTest1]
  userTest2(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, realmId: String, test2: Boolean, updateTime: Timestamp, updateUserId: String, userId: Int, version: Int, where: UserTest2Expression): UserTest2
  userTest2List(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, list: [UserTest2Input], realmId: String, test2: Boolean, updateTime: Timestamp, updateUserId: String, userId: Int, version: Int, where: UserTest2Expression): [UserTest2]
  version: Int
}

enum Operator {
  BT
  EQ
  GT
  GTE
  IN
  LK
  LT
  LTE
  NBT
  NEQ
  NGT
  NGTE
  NIL
  NIN
  NLK
  NLT
  NLTE
  NNIL
}

input OperatorExpression {
  in: [Operator]
  opr: Operator = EQ
  val: Operator
}

type Organization implements Meta {
  aboveId: Int
  aboveIdAvg: Int
  aboveIdCount: Int
  aboveIdMax: Int
  aboveIdMin: Int
  aboveIdSum: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: ID
  idMin: ID
  isDeprecated: Boolean
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String
  orgLevel3: [Int]
  realmId: String
  roleDisable: [Boolean]
  updateTime: Timestamp
  updateUserId: String
  userByOrg: [User]
  users(after: ID, age: IntExpression, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, organization: OrganizationExpression, organizationId: IntExpression, password: StringExpression, phones: StringExpression, realmId: StringExpression, roles: RoleExpression, sex: SexExpression, test1: IntExpression, test2: BooleanExpression, updateTime: StringExpression, updateUserId: StringExpression, userProfile: UserProfileExpression, version: IntExpression): [User!]
  usersAggregate(age: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, id: StringExpression, includeDeprecated: Boolean = false, login: StringExpression, name: StringExpression, organization: OrganizationExpression, organizationId: IntExpression, password: StringExpression, phones: StringExpression, realmId: StringExpression, roles: RoleExpression, sex: SexExpression, test1: IntExpression, test2: BooleanExpression, updateTime: StringExpression, updateUserId: StringExpression, userProfile: UserProfileExpression, version: IntExpression): User
  usersConnection(age: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, id: StringExpression, includeDeprecated: Boolean = false, login: StringExpression, name: StringExpression, organization: OrganizationExpression, organizationId: IntExpression, password: StringExpression, phones: StringExpression, realmId: StringExpression, roles: RoleExpression, sex: SexExpression, test1: IntExpression, test2: BooleanExpression, updateTime: StringExpression, updateUserId: StringExpression, userProfile: UserProfileExpression, version: IntExpression): UserConnection
  version: Int
}

type OrganizationConnection {
  edges: [OrganizationEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type OrganizationEdge {
  cursor: ID
  node: Organization
}

input OrganizationExpression {
  above: OrganizationExpression
  aboveId: IntExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [OrganizationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  realmId: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input OrganizationInput {
  above: OrganizationInput
  aboveId: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  name: String!
  realmId: String
  updateTime: Timestamp
  updateUserId: String
  users: [UserInput!]
  version: Int
}

input OrganizationOrderBy {
  aboveId: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

input Property {
  name: String!
  required: [String]
  validation: ValidationInput
}

type QueryType implements Meta {
  __schema(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, mutationTypeName: StringExpression, queryTypeName: StringExpression, realmId: StringExpression, subscriptionTypeName: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): __Schema
  __type(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, ofTypeName: StringExpression, realmId: StringExpression, schemaId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): __Type
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  findRole2(disable: Boolean, name: String, type: Int): [Role]
  isDeprecated: Boolean
  orgLevel(organization: OrganizationInput): Int
  orgLevel5(organization: OrganizationInput): [Int]
  organization(above: OrganizationExpression, aboveId: IntExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, realmId: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Organization
  organizationConnection(above: OrganizationExpression, aboveId: IntExpression, after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [OrganizationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: OrganizationOrderBy, realmId: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): OrganizationConnection
  organizationList(above: OrganizationExpression, aboveId: IntExpression, after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: OrganizationOrderBy, realmId: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Organization]
  parent2(organization: OrganizationInput): Organization
  realmId: String
  role(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, realmId: StringExpression, type: RoleTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): Role
  roleConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, realmId: StringExpression, type: RoleTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): RoleConnection
  roleDisable2(organization: OrganizationInput): [Boolean]
  roleList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, realmId: StringExpression, type: RoleTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, users: UserExpression, version: IntExpression): [Role]
  roleRoleType(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, realmId: StringExpression, roleId: IntExpression, type: RoleTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleRoleType
  roleRoleTypeConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleRoleTypeExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleRoleTypeOrderBy, realmId: StringExpression, roleId: IntExpression, type: RoleTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleRoleTypeConnection
  roleRoleTypeList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleRoleTypeOrderBy, realmId: StringExpression, roleId: IntExpression, type: RoleTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RoleRoleType]
  updateTime: Timestamp
  updateUserId: String
  user(age: IntExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, id: StringExpression, includeDeprecated: Boolean = false, login: StringExpression, name: StringExpression, organization: OrganizationExpression, organizationId: IntExpression, password: StringExpression, phones: StringExpression, realmId: StringExpression, roles: RoleExpression, sex: SexExpression, test1: IntExpression, test2: BooleanExpression, updateTime: StringExpression, updateUserId: StringExpression, userProfile: UserProfileExpression, version: IntExpression): User
  userByOrg2(organization: OrganizationInput): [User]
  userConnection(after: ID, age: IntExpression, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, exs: [UserExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, organization: OrganizationExpression, organizationId: IntExpression, password: StringExpression, phones: StringExpression, realmId: StringExpression, roles: RoleExpression, sex: SexExpression, test1: IntExpression, test2: BooleanExpression, updateTime: StringExpression, updateUserId: StringExpression, userProfile: UserProfileExpression, version: IntExpression): UserConnection
  userDetail(user: UserInput): String
  userDetail6(user: UserInput): [String]
  userList(after: ID, age: IntExpression, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, organization: OrganizationExpression, organizationId: IntExpression, password: StringExpression, phones: StringExpression, realmId: StringExpression, roles: RoleExpression, sex: SexExpression, test1: IntExpression, test2: BooleanExpression, updateTime: StringExpression, updateUserId: StringExpression, userProfile: UserProfileExpression, version: IntExpression): [User]
  userPhones(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, phone: StringExpression, realmId: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserPhones
  userPhonesConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserPhonesOrderBy, phone: StringExpression, realmId: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserPhonesConnection
  userPhonesList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserPhonesOrderBy, phone: StringExpression, realmId: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): [UserPhones]
  userProfile(address: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, email: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, qq: StringExpression, realmId: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userId: StringExpression, version: IntExpression): UserProfile
  userProfileConnection(address: StringExpression, after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, email: StringExpression, exs: [UserProfileExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserProfileOrderBy, qq: StringExpression, realmId: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userId: StringExpression, version: IntExpression): UserProfileConnection
  userProfileList(address: StringExpression, after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, email: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserProfileOrderBy, qq: StringExpression, realmId: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, user: UserExpression, userId: StringExpression, version: IntExpression): [UserProfile]
  userRole(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, realmId: StringExpression, roleId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserRole
  userRoleConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserRoleExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserRoleOrderBy, realmId: StringExpression, roleId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserRoleConnection
  userRoleList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserRoleOrderBy, realmId: StringExpression, roleId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): [UserRole]
  userTest1(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, realmId: StringExpression, test1: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserTest1
  userTest1Connection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserTest1Expression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserTest1OrderBy, realmId: StringExpression, test1: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserTest1Connection
  userTest1List(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserTest1OrderBy, realmId: StringExpression, test1: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): [UserTest1]
  userTest2(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, realmId: StringExpression, test2: BooleanExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserTest2
  userTest2Connection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserTest2Expression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserTest2OrderBy, realmId: StringExpression, test2: BooleanExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserTest2Connection
  userTest2List(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserTest2OrderBy, realmId: StringExpression, test2: BooleanExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): [UserTest2]
  version: Int
}

type Role implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: ID
  idMin: ID
  isDeprecated: Boolean
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String
  realmId: String
  type(after: ID, before: ID, first: Int, in: [RoleType], last: Int, offset: Int, opr: Operator = EQ, sort: Sort, val: RoleType): [RoleType]!
  updateTime: Timestamp
  updateUserId: String
  users(after: ID, age: IntExpression, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, organization: OrganizationExpression, organizationId: IntExpression, password: StringExpression, phones: StringExpression, realmId: StringExpression, roles: RoleExpression, sex: SexExpression, test1: IntExpression, test2: BooleanExpression, updateTime: StringExpression, updateUserId: StringExpression, userProfile: UserProfileExpression, version: IntExpression): [User!]
  usersAggregate(age: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, id: StringExpression, includeDeprecated: Boolean = false, login: StringExpression, name: StringExpression, organization: OrganizationExpression, organizationId: IntExpression, password: StringExpression, phones: StringExpression, realmId: StringExpression, roles: RoleExpression, sex: SexExpression, test1: IntExpression, test2: BooleanExpression, updateTime: StringExpression, updateUserId: StringExpression, userProfile: UserProfileExpression, version: IntExpression): User
  usersConnection(age: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, id: StringExpression, includeDeprecated: Boolean = false, login: StringExpression, name: StringExpression, organization: OrganizationExpression, organizationId: IntExpression, password: StringExpression, phones: StringExpression, realmId: StringExpression, roles: RoleExpression, sex: SexExpression, test1: IntExpression, test2: BooleanExpression, updateTime: StringExpression, updateUserId: StringExpression, userProfile: UserProfileExpression, version: IntExpression): UserConnection
  version: Int
}

type RoleConnection {
  edges: [RoleEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type RoleEdge {
  cursor: ID
  node: Role
}

input RoleExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  realmId: StringExpression
  type: RoleTypeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  users: UserExpression
  version: IntExpression
}

input RoleInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  name: String!
  realmId: String
  type: [RoleType]!
  updateTime: Timestamp
  updateUserId: String
  users: [UserInput!]
  version: Int
}

input RoleOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

type RoleRoleType implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: ID
  idMin: ID
  isDeprecated: Boolean
  realmId: String
  roleId: Int
  roleIdAvg: Int
  roleIdCount: Int
  roleIdMax: Int
  roleIdMin: Int
  roleIdSum: Int
  type: RoleType
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type RoleRoleTypeConnection {
  edges: [RoleRoleTypeEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type RoleRoleTypeEdge {
  cursor: ID
  node: RoleRoleType
}

input RoleRoleTypeExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleRoleTypeExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  realmId: StringExpression
  roleId: IntExpression
  type: RoleTypeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleRoleTypeInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  realmId: String
  roleId: Int
  type: RoleType
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

input RoleRoleTypeOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  roleId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

enum RoleType {
  ADMIN
  ANONYMOUS
  USER
}

input RoleTypeExpression {
  in: [RoleType]
  opr: Operator = EQ
  val: RoleType
}

enum Sex {
  FEMALE
  MAN
}

input SexExpression {
  in: [Sex]
  opr: Operator = EQ
  val: Sex
}

enum Sort {
  ASC
  DESC
}

input SortExpression {
  in: [Sort]
  opr: Operator = EQ
  val: Sort
}

input StringExpression {
  in: [String]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: String
}

scalar Time

scalar Timestamp

type User implements Meta {
  age: Int
  ageAvg: Int
  ageCount: Int
  ageMax: Int
  ageMin: Int
  ageSum: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  disable: Boolean
  id: ID
  idCount: Int
  idMax: ID
  idMin: ID
  isDeprecated: Boolean
  login: String!
  loginCount: Int
  loginMax: String
  loginMin: String
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String
  organization(above: OrganizationExpression, aboveId: IntExpression, id: StringExpression, name: StringExpression, users: UserExpression): Organization
  organizationId: Int
  organizationIdAvg: Int
  organizationIdCount: Int
  organizationIdMax: Int
  organizationIdMin: Int
  organizationIdSum: Int
  password: String!
  passwordCount: Int
  passwordMax: String
  passwordMin: String
  phones(after: ID, before: ID, first: Int, in: [String], last: Int, offset: Int, opr: Operator = EQ, sort: Sort, val: String): [String!]
  realmId: String
  roles(after: ID, before: ID, first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, type: RoleTypeExpression, users: UserExpression): [Role!]
  rolesAggregate(id: StringExpression, name: StringExpression, type: RoleTypeExpression, users: UserExpression): Role
  rolesConnection(id: StringExpression, name: StringExpression, type: RoleTypeExpression, users: UserExpression): RoleConnection
  sex: Sex
  test1(after: ID, before: ID, first: Int, in: [Int], last: Int, offset: Int, opr: Operator = EQ, sort: Sort, val: Int): [Int!]
  test2(after: ID, before: ID, first: Int, in: [Boolean], last: Int, offset: Int, opr: Operator = EQ, sort: Sort, val: Boolean): [Boolean!]
  updateTime: Timestamp
  updateUserId: String
  userDetail2: String
  userProfile(address: StringExpression, email: StringExpression, id: StringExpression, qq: StringExpression, user: UserExpression, userId: StringExpression): UserProfile
  version: Int
}

type UserConnection {
  edges: [UserEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type UserEdge {
  cursor: ID
  node: User
}

input UserExpression {
  age: IntExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  disable: BooleanExpression
  exs: [UserExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  login: StringExpression
  name: StringExpression
  organization: OrganizationExpression
  organizationId: IntExpression
  password: StringExpression
  phones: StringExpression
  realmId: StringExpression
  roles: RoleExpression
  sex: SexExpression
  test1: IntExpression
  test2: BooleanExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userProfile: UserProfileExpression
  version: IntExpression
}

input UserInput {
  age: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  disable: Boolean
  id: ID
  isDeprecated: Boolean
  login: String!
  name: String!
  organization: OrganizationInput
  organizationId: Int
  password: String!
  phones: [String!]
  realmId: String
  roles: [RoleInput!]
  sex: Sex
  test1: [Int!]
  test2: [Boolean!]
  updateTime: Timestamp
  updateUserId: String
  userProfile: UserProfileInput
  version: Int
}

input UserOrderBy {
  age: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  disable: Sort
  id: Sort
  isDeprecated: Sort
  login: Sort
  name: Sort
  organizationId: Sort
  password: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

type UserPhones implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: ID
  idMin: ID
  isDeprecated: Boolean
  phone: String
  phoneCount: Int
  phoneMax: String
  phoneMin: String
  realmId: String
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  userIdAvg: Int
  userIdCount: Int
  userIdMax: Int
  userIdMin: Int
  userIdSum: Int
  version: Int
}

type UserPhonesConnection {
  edges: [UserPhonesEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type UserPhonesEdge {
  cursor: ID
  node: UserPhones
}

input UserPhonesExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  phone: StringExpression
  realmId: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  version: IntExpression
}

input UserPhonesInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  phone: String
  realmId: String
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  version: Int
}

input UserPhonesOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  phone: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  userId: Sort
  version: Sort
}

type UserProfile implements Meta {
  address: String
  addressCount: Int
  addressMax: String
  addressMin: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  email: String
  emailCount: Int
  emailMax: String
  emailMin: String
  id: ID
  idCount: Int
  idMax: ID
  idMin: ID
  isDeprecated: Boolean
  qq: String
  qqCount: Int
  qqMax: String
  qqMin: String
  realmId: String
  updateTime: Timestamp
  updateUserId: String
  user(age: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, id: StringExpression, includeDeprecated: Boolean = false, login: StringExpression, name: StringExpression, organization: OrganizationExpression, organizationId: IntExpression, password: StringExpression, phones: StringExpression, realmId: StringExpression, roles: RoleExpression, sex: SexExpression, test1: IntExpression, test2: BooleanExpression, updateTime: StringExpression, updateUserId: StringExpression, userProfile: UserProfileExpression, version: IntExpression): User
  userId: String
  userIdCount: Int
  userIdMax: String
  userIdMin: String
  version: Int
}

type UserProfileConnection {
  edges: [UserProfileEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type UserProfileEdge {
  cursor: ID
  node: UserProfile
}

input UserProfileExpression {
  address: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  email: StringExpression
  exs: [UserProfileExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  qq: StringExpression
  realmId: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  user: UserExpression
  userId: StringExpression
  version: IntExpression
}

input UserProfileInput {
  address: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  email: String
  id: ID
  isDeprecated: Boolean
  qq: String
  realmId: String
  updateTime: Timestamp
  updateUserId: String
  user: UserInput
  userId: String
  version: Int
}

input UserProfileOrderBy {
  address: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  email: Sort
  id: Sort
  isDeprecated: Sort
  qq: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  userId: Sort
  version: Sort
}

type UserRole implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: ID
  idMin: ID
  isDeprecated: Boolean
  realmId: String
  roleId: Int
  roleIdAvg: Int
  roleIdCount: Int
  roleIdMax: Int
  roleIdMin: Int
  roleIdSum: Int
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  userIdAvg: Int
  userIdCount: Int
  userIdMax: Int
  userIdMin: Int
  userIdSum: Int
  version: Int
}

type UserRoleConnection {
  edges: [UserRoleEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type UserRoleEdge {
  cursor: ID
  node: UserRole
}

input UserRoleExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserRoleExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  realmId: StringExpression
  roleId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  version: IntExpression
}

input UserRoleInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  realmId: String
  roleId: Int
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  version: Int
}

input UserRoleOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  roleId: Sort
  updateTime: Sort
  updateUserId: Sort
  userId: Sort
  version: Sort
}

type UserTest1 implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: ID
  idMin: ID
  isDeprecated: Boolean
  realmId: String
  test1: Int
  test1Avg: Int
  test1Count: Int
  test1Max: Int
  test1Min: Int
  test1Sum: Int
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  userIdAvg: Int
  userIdCount: Int
  userIdMax: Int
  userIdMin: Int
  userIdSum: Int
  version: Int
}

type UserTest1Connection {
  edges: [UserTest1Edge]
  pageInfo: PageInfo!
  totalCount: Int
}

type UserTest1Edge {
  cursor: ID
  node: UserTest1
}

input UserTest1Expression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserTest1Expression]
  id: StringExpression
  includeDeprecated: Boolean = false
  realmId: StringExpression
  test1: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  version: IntExpression
}

input UserTest1Input {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  realmId: String
  test1: Int
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  version: Int
}

input UserTest1OrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  test1: Sort
  updateTime: Sort
  updateUserId: Sort
  userId: Sort
  version: Sort
}

type UserTest2 implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: ID
  idMin: ID
  isDeprecated: Boolean
  realmId: String
  test2: Boolean
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  userIdAvg: Int
  userIdCount: Int
  userIdMax: Int
  userIdMin: Int
  userIdSum: Int
  version: Int
}

type UserTest2Connection {
  edges: [UserTest2Edge]
  pageInfo: PageInfo!
  totalCount: Int
}

type UserTest2Edge {
  cursor: ID
  node: UserTest2
}

input UserTest2Expression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserTest2Expression]
  id: StringExpression
  includeDeprecated: Boolean = false
  realmId: StringExpression
  test2: BooleanExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  version: IntExpression
}

input UserTest2Input {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  realmId: String
  test2: Boolean
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  version: Int
}

input UserTest2OrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  test2: Sort
  updateTime: Sort
  updateUserId: Sort
  userId: Sort
  version: Sort
}

input ValidationInput {
  allOf: [ValidationInput]
  anyOf: [ValidationInput]
  const: String
  contentEncoding: String
  contentMediaType: String
  dependentRequired: [Property]
  else: ValidationInput
  enum: [String]
  exclusiveMaximum: Float
  exclusiveMinimum: Float
  format: String
  if: ValidationInput
  items: ValidationInput
  maxItems: Int
  maxLength: Int
  maximum: Float
  minItems: Int
  minLength: Int
  minimum: Float
  multipleOf: Float
  not: ValidationInput
  oneOf: [ValidationInput]
  pattern: String
  properties: [Property]
  then: ValidationInput
  uniqueItems: Boolean
}

type __DirectiveConnection {
  edges: [__DirectiveEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type __DirectiveEdge {
  cursor: ID
  node: __Directive
}

type __DirectiveLocations implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  directiveLocation: __DirectiveLocation!
  directiveName: String!
  directiveNameCount: Int
  directiveNameMax: String
  directiveNameMin: String
  id: ID
  idCount: Int
  idMax: ID
  idMin: ID
  isDeprecated: Boolean
  realmId: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type __DirectiveLocationsConnection {
  edges: [__DirectiveLocationsEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type __DirectiveLocationsEdge {
  cursor: ID
  node: __DirectiveLocations
}

type __EnumValueConnection {
  edges: [__EnumValueEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type __EnumValueEdge {
  cursor: ID
  node: __EnumValue
}

type __FieldConnection {
  edges: [__FieldEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type __FieldEdge {
  cursor: ID
  node: __Field
}

type __InputValueConnection {
  edges: [__InputValueEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type __InputValueEdge {
  cursor: ID
  node: __InputValue
}

type __SchemaConnection {
  edges: [__SchemaEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type __SchemaEdge {
  cursor: ID
  node: __Schema
}

type __TypeConnection {
  edges: [__TypeEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type __TypeEdge {
  cursor: ID
  node: __Type
}

type __TypeInterfaces implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: ID
  idMin: ID
  interfaceName: String!
  interfaceNameCount: Int
  interfaceNameMax: String
  interfaceNameMin: String
  isDeprecated: Boolean
  realmId: String
  typeName: String!
  typeNameCount: Int
  typeNameMax: String
  typeNameMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type __TypeInterfacesConnection {
  edges: [__TypeInterfacesEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type __TypeInterfacesEdge {
  cursor: ID
  node: __TypeInterfaces
}

type __TypePossibleTypes implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: ID
  idMin: ID
  isDeprecated: Boolean
  possibleTypeName: String!
  possibleTypeNameCount: Int
  possibleTypeNameMax: String
  possibleTypeNameMin: String
  realmId: String
  typeName: String!
  typeNameCount: Int
  typeNameMax: String
  typeNameMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type __TypePossibleTypesConnection {
  edges: [__TypePossibleTypesEdge]
  pageInfo: PageInfo!
  totalCount: Int
}

type __TypePossibleTypesEdge {
  cursor: ID
  node: __TypePossibleTypes
}
