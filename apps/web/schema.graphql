directive @classInfo(annotationName: String, className: String!, exists: Boolean, grpcClassName: String) on OBJECT

directive @connection(agg: String, field: String) on FIELD_DEFINITION

directive @containerType on OBJECT

directive @cursor on FIELD_DEFINITION

directive @dataType(autoIncrement: Boolean, decimals: Int, default: String, length: Int, type: String) on FIELD_DEFINITION

directive @delete(if: Boolean = false) on FIELD

directive @denyAll on FIELD | OBJECT

directive @fetch(anchor: Boolean, from: String!, protocol: Protocol, to: String, with: With) on FIELD_DEFINITION

directive @format(locale: String, value: String) on FIELD | FIELD_DEFINITION

directive @func(field: String, name: Func) on FIELD_DEFINITION

directive @implements(interfaces: [String]) on INPUT_OBJECT | OBJECT

directive @interface on INPUT_OBJECT | OBJECT

directive @invoke(className: String, methodName: String, parameters: [InvokeParameter], returnClassName: String) on FIELD_DEFINITION | INPUT_OBJECT | MUTATION | QUERY | SUBSCRIPTION

directive @invokes(list: [Invoke]) on FIELD_DEFINITION | INPUT_OBJECT | MUTATION | QUERY | SUBSCRIPTION

directive @map(anchor: Boolean, from: String!, to: String, with: With) on FIELD_DEFINITION

directive @mergeToList(arguments: [String]) on FIELD

directive @packageInfo(grpcPackageName: String, packageName: String!) on FIELD_DEFINITION | MUTATION | OBJECT | QUERY | SUBSCRIPTION

directive @permitAll on FIELD | OBJECT

directive @rolesAllowed(roles: [String]) on FIELD | OBJECT

directive @table(engine: String) on OBJECT

directive @validation(allOf: [ValidationInput], anyOf: [ValidationInput], const: String, contentEncoding: String, contentMediaType: String, dependentRequired: [Property], else: ValidationInput, enum: [String], exclusiveMaximum: Float, exclusiveMinimum: Float, format: String, if: ValidationInput, items: ValidationInput, maxItems: Int, maxLength: Int, maximum: Float, minItems: Int, minLength: Int, minimum: Float, multipleOf: Float, not: ValidationInput, oneOf: [ValidationInput], pattern: String, properties: [Property], then: ValidationInput, uniqueItems: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | OBJECT

"""年度财报"""
type AnnualFinancialReport implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """毛利"""
  grossProfit: Float
  grossProfitAvg: Float
  grossProfitCount: Int
  grossProfitMax: Float
  grossProfitMin: Float
  grossProfitSum: Float

  """公司"""
  group(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group
  groupId: Int
  groupIdAvg: Int
  groupIdCount: Int
  groupIdMax: Int
  groupIdMin: Int
  groupIdSum: Int

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """净利"""
  netProfit: Float
  netProfitAvg: Float
  netProfitCount: Int
  netProfitMax: Float
  netProfitMin: Float
  netProfitSum: Float

  """管理费用"""
  operatingExpenses: Float
  operatingExpensesAvg: Float
  operatingExpensesCount: Int
  operatingExpensesMax: Float
  operatingExpensesMin: Float
  operatingExpensesSum: Float

  """上站成本"""
  pickupToStationCost: Float
  pickupToStationCostAvg: Float
  pickupToStationCostCount: Int
  pickupToStationCostMax: Float
  pickupToStationCostMin: Float
  pickupToStationCostSum: Float

  """上站应收"""
  pickupToStationIncome: Float
  pickupToStationIncomeAvg: Float
  pickupToStationIncomeCount: Int
  pickupToStationIncomeMax: Float
  pickupToStationIncomeMin: Float
  pickupToStationIncomeSum: Float

  """港口成本"""
  portCost: Float
  portCostAvg: Float
  portCostCount: Int
  portCostMax: Float
  portCostMin: Float
  portCostSum: Float

  """铁路成本"""
  railwayCost: Float
  railwayCostAvg: Float
  railwayCostCount: Int
  railwayCostMax: Float
  railwayCostMin: Float
  railwayCostSum: Float

  """铁路应收"""
  railwayIncome: Float
  railwayIncomeAvg: Float
  railwayIncomeCount: Int
  railwayIncomeMax: Float
  railwayIncomeMin: Float
  railwayIncomeSum: Float

  """下站成本"""
  railwayToDeliveryCost: Float
  railwayToDeliveryCostAvg: Float
  railwayToDeliveryCostCount: Int
  railwayToDeliveryCostMax: Float
  railwayToDeliveryCostMin: Float
  railwayToDeliveryCostSum: Float

  """下站应收"""
  railwayToDeliveryIncome: Float
  railwayToDeliveryIncomeAvg: Float
  railwayToDeliveryIncomeCount: Int
  railwayToDeliveryIncomeMax: Float
  railwayToDeliveryIncomeMin: Float
  railwayToDeliveryIncomeSum: Float
  realmId: Int

  """仓储成本"""
  storageCost: Float
  storageCostAvg: Float
  storageCostCount: Int
  storageCostMax: Float
  storageCostMin: Float
  storageCostSum: Float

  """成本合计"""
  totalCost: Float
  totalCostAvg: Float
  totalCostCount: Int
  totalCostMax: Float
  totalCostMin: Float
  totalCostSum: Float

  """应收合计"""
  totalIncome: Float
  totalIncomeAvg: Float
  totalIncomeCount: Int
  totalIncomeMax: Float
  totalIncomeMin: Float
  totalIncomeSum: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int

  """年份"""
  year: Int!
  yearAvg: Int
  yearCount: Int
  yearMax: Int
  yearMin: Int
  yearSum: Int
}

type AnnualFinancialReportConnection {
  edges: [AnnualFinancialReportEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input AnnualFinancialReportConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [AnnualFinancialReportExpression]
  first: Int
  grossProfit: FloatExpression
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  netProfit: FloatExpression
  not: Boolean = false
  offset: Int
  operatingExpenses: FloatExpression
  orderBy: AnnualFinancialReportOrderBy
  pickupToStationCost: FloatExpression
  pickupToStationIncome: FloatExpression
  portCost: FloatExpression
  railwayCost: FloatExpression
  railwayIncome: FloatExpression
  railwayToDeliveryCost: FloatExpression
  railwayToDeliveryIncome: FloatExpression
  realmId: IntExpression
  storageCost: FloatExpression
  totalCost: FloatExpression
  totalIncome: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

input AnnualFinancialReportConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [AnnualFinancialReportExpression]
  first: Int
  grossProfit: FloatExpression
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  netProfit: FloatExpression
  not: Boolean = false
  offset: Int
  operatingExpenses: FloatExpression
  orderBy: AnnualFinancialReportOrderBy
  pickupToStationCost: FloatExpression
  pickupToStationIncome: FloatExpression
  portCost: FloatExpression
  railwayCost: FloatExpression
  railwayIncome: FloatExpression
  railwayToDeliveryCost: FloatExpression
  railwayToDeliveryIncome: FloatExpression
  realmId: IntExpression
  storageCost: FloatExpression
  totalCost: FloatExpression
  totalIncome: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

type AnnualFinancialReportEdge {
  cursor: ID
  node: AnnualFinancialReport
}

input AnnualFinancialReportExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [AnnualFinancialReportExpression]
  grossProfit: FloatExpression
  group: GroupExpression
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  netProfit: FloatExpression
  not: Boolean = false
  operatingExpenses: FloatExpression
  pickupToStationCost: FloatExpression
  pickupToStationIncome: FloatExpression
  portCost: FloatExpression
  railwayCost: FloatExpression
  railwayIncome: FloatExpression
  railwayToDeliveryCost: FloatExpression
  railwayToDeliveryIncome: FloatExpression
  realmId: IntExpression
  storageCost: FloatExpression
  totalCost: FloatExpression
  totalIncome: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

input AnnualFinancialReportInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  grossProfit: Float
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  netProfit: Float
  operatingExpenses: Float
  pickupToStationCost: Float
  pickupToStationIncome: Float
  portCost: Float
  railwayCost: Float
  railwayIncome: Float
  railwayToDeliveryCost: Float
  railwayToDeliveryIncome: Float
  realmId: Int
  storageCost: Float
  totalCost: Float
  totalIncome: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: AnnualFinancialReportExpression
  year: Int
}

input AnnualFinancialReportListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  grossProfit: Float
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  list: [AnnualFinancialReportInput]
  netProfit: Float
  operatingExpenses: Float
  pickupToStationCost: Float
  pickupToStationIncome: Float
  portCost: Float
  railwayCost: Float
  railwayIncome: Float
  railwayToDeliveryCost: Float
  railwayToDeliveryIncome: Float
  realmId: Int
  storageCost: Float
  totalCost: Float
  totalIncome: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: AnnualFinancialReportExpression
  year: Int
}

input AnnualFinancialReportListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [AnnualFinancialReportExpression]
  first: Int
  grossProfit: FloatExpression
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  netProfit: FloatExpression
  not: Boolean = false
  offset: Int
  operatingExpenses: FloatExpression
  orderBy: AnnualFinancialReportOrderBy
  pickupToStationCost: FloatExpression
  pickupToStationIncome: FloatExpression
  portCost: FloatExpression
  railwayCost: FloatExpression
  railwayIncome: FloatExpression
  railwayToDeliveryCost: FloatExpression
  railwayToDeliveryIncome: FloatExpression
  realmId: IntExpression
  storageCost: FloatExpression
  totalCost: FloatExpression
  totalIncome: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

input AnnualFinancialReportListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [AnnualFinancialReportExpression]
  first: Int
  grossProfit: FloatExpression
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  netProfit: FloatExpression
  not: Boolean = false
  offset: Int
  operatingExpenses: FloatExpression
  orderBy: AnnualFinancialReportOrderBy
  pickupToStationCost: FloatExpression
  pickupToStationIncome: FloatExpression
  portCost: FloatExpression
  railwayCost: FloatExpression
  railwayIncome: FloatExpression
  railwayToDeliveryCost: FloatExpression
  railwayToDeliveryIncome: FloatExpression
  realmId: IntExpression
  storageCost: FloatExpression
  totalCost: FloatExpression
  totalIncome: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

input AnnualFinancialReportMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  grossProfit: Float
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  netProfit: Float
  operatingExpenses: Float
  pickupToStationCost: Float
  pickupToStationIncome: Float
  portCost: Float
  railwayCost: Float
  railwayIncome: Float
  railwayToDeliveryCost: Float
  railwayToDeliveryIncome: Float
  realmId: Int
  storageCost: Float
  totalCost: Float
  totalIncome: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: AnnualFinancialReportExpression
  year: Int
}

input AnnualFinancialReportOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  grossProfit: Sort
  groupId: Sort
  id: Sort
  isDeprecated: Sort
  netProfit: Sort
  operatingExpenses: Sort
  pickupToStationCost: Sort
  pickupToStationIncome: Sort
  portCost: Sort
  railwayCost: Sort
  railwayIncome: Sort
  railwayToDeliveryCost: Sort
  railwayToDeliveryIncome: Sort
  realmId: Sort
  storageCost: Sort
  totalCost: Sort
  totalIncome: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
  year: Sort
}

input AnnualFinancialReportQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [AnnualFinancialReportExpression]
  grossProfit: FloatExpression
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  netProfit: FloatExpression
  not: Boolean = false
  operatingExpenses: FloatExpression
  pickupToStationCost: FloatExpression
  pickupToStationIncome: FloatExpression
  portCost: FloatExpression
  railwayCost: FloatExpression
  railwayIncome: FloatExpression
  railwayToDeliveryCost: FloatExpression
  railwayToDeliveryIncome: FloatExpression
  realmId: IntExpression
  storageCost: FloatExpression
  totalCost: FloatExpression
  totalIncome: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

input AnnualFinancialReportSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [AnnualFinancialReportExpression]
  grossProfit: FloatExpression
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  netProfit: FloatExpression
  not: Boolean = false
  operatingExpenses: FloatExpression
  pickupToStationCost: FloatExpression
  pickupToStationIncome: FloatExpression
  portCost: FloatExpression
  railwayCost: FloatExpression
  railwayIncome: FloatExpression
  railwayToDeliveryCost: FloatExpression
  railwayToDeliveryIncome: FloatExpression
  realmId: IntExpression
  storageCost: FloatExpression
  totalCost: FloatExpression
  totalIncome: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

scalar BigDecimal

scalar BigInteger

input BooleanExpression {
  in: [Boolean]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: Boolean
}

"""业务类型"""
enum BusinessType {
  """门到门"""
  DOOR_TO_DOOR

  """门到站"""
  DOOR_TO_STATION

  """站到门"""
  STATION_TO_DOOR

  """站到站"""
  STATION_TO_STATION
}

input BusinessTypeExpression {
  in: [BusinessType]
  opr: Operator = EQ
  val: BusinessType
}

"""货物"""
type CargoItem implements Meta & NamedStruct {
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """异常数"""
  exceptionCount: Int
  exceptionCountAvg: Int
  exceptionCountCount: Int
  exceptionCountMax: Int
  exceptionCountMin: Int
  exceptionCountSum: Int

  """异常说明"""
  exceptionDescription: String
  exceptionDescriptionCount: Int
  exceptionDescriptionMax: String
  exceptionDescriptionMin: String

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """型号"""
  model: String
  modelCount: Int
  modelMax: String
  modelMin: String

  """货物名称"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """备注"""
  notes: String
  notesCount: Int
  notesMax: String
  notesMin: String

  """订单"""
  order(agent: UserExpression, agentId: IntExpression, arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, businessType: BusinessTypeExpression, cargoItems: CargoItemExpression, chargeItems: ChargeItemExpression, consignee: ContactInfoExpression, consigneeId: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: CustomerExpression, customerId: IntExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, notes: StringExpression, orderDate: StringExpression, orderNumber: StringExpression, plannedArrivalTime: StringExpression, plannedDepartureTime: StringExpression, project: ProjectExpression, projectId: IntExpression, realmId: IntExpression, serviceType: ServiceTypeExpression, shipper: ContactInfoExpression, shipperId: IntExpression, transportationMode: TransportationModeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Order!
  orderId: Int
  orderIdAvg: Int
  orderIdCount: Int
  orderIdMax: Int
  orderIdMin: Int
  orderIdSum: Int

  """包装"""
  packaging: String
  packagingCount: Int
  packagingMax: String
  packagingMin: String

  """数量"""
  quantity: Int!
  quantityAvg: Int
  quantityCount: Int
  quantityMax: Int
  quantityMin: Int
  quantitySum: Int
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int

  """体积（立方米）"""
  volume: Float
  volumeAvg: Float
  volumeCount: Int
  volumeMax: Float
  volumeMin: Float
  volumeSum: Float

  """重量（千克）"""
  weight: Float
  weightAvg: Float
  weightCount: Int
  weightMax: Float
  weightMin: Float
  weightSum: Float
}

type CargoItemConnection {
  edges: [CargoItemEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input CargoItemConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exceptionCount: IntExpression
  exceptionDescription: StringExpression
  exs: [CargoItemExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  model: StringExpression
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  order: OrderExpression
  orderBy: CargoItemOrderBy
  orderId: IntExpression
  packaging: StringExpression
  quantity: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  volume: FloatExpression
  weight: FloatExpression
}

input CargoItemConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exceptionCount: IntExpression
  exceptionDescription: StringExpression
  exs: [CargoItemExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  model: StringExpression
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  order: OrderExpression
  orderBy: CargoItemOrderBy
  orderId: IntExpression
  packaging: StringExpression
  quantity: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  volume: FloatExpression
  weight: FloatExpression
}

type CargoItemEdge {
  cursor: ID
  node: CargoItem
}

input CargoItemExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exceptionCount: IntExpression
  exceptionDescription: StringExpression
  exs: [CargoItemExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  model: StringExpression
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  order: OrderExpression
  orderId: IntExpression
  packaging: StringExpression
  quantity: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  volume: FloatExpression
  weight: FloatExpression
}

input CargoItemInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  exceptionCount: Int
  exceptionDescription: String
  id: ID
  isDeprecated: Boolean
  model: String
  name: String
  notes: String
  order: OrderInput
  orderId: Int
  packaging: String
  quantity: Int
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  volume: Float
  weight: Float
  where: CargoItemExpression
}

input CargoItemListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  exceptionCount: Int
  exceptionDescription: String
  id: ID
  isDeprecated: Boolean
  list: [CargoItemInput]
  model: String
  name: String
  notes: String
  order: OrderInput
  orderId: Int
  packaging: String
  quantity: Int
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  volume: Float
  weight: Float
  where: CargoItemExpression
}

input CargoItemListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exceptionCount: IntExpression
  exceptionDescription: StringExpression
  exs: [CargoItemExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  model: StringExpression
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  order: OrderExpression
  orderBy: CargoItemOrderBy
  orderId: IntExpression
  packaging: StringExpression
  quantity: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  volume: FloatExpression
  weight: FloatExpression
}

input CargoItemListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exceptionCount: IntExpression
  exceptionDescription: StringExpression
  exs: [CargoItemExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  model: StringExpression
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  order: OrderExpression
  orderBy: CargoItemOrderBy
  orderId: IntExpression
  packaging: StringExpression
  quantity: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  volume: FloatExpression
  weight: FloatExpression
}

input CargoItemMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  exceptionCount: Int
  exceptionDescription: String
  id: ID
  isDeprecated: Boolean
  model: String
  name: String
  notes: String
  order: OrderInput
  orderId: Int
  packaging: String
  quantity: Int
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  volume: Float
  weight: Float
  where: CargoItemExpression
}

input CargoItemOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  exceptionCount: Sort
  exceptionDescription: Sort
  id: Sort
  isDeprecated: Sort
  model: Sort
  name: Sort
  notes: Sort
  orderId: Sort
  packaging: Sort
  quantity: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
  volume: Sort
  weight: Sort
}

input CargoItemQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exceptionCount: IntExpression
  exceptionDescription: StringExpression
  exs: [CargoItemExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  model: StringExpression
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  order: OrderExpression
  orderId: IntExpression
  packaging: StringExpression
  quantity: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  volume: FloatExpression
  weight: FloatExpression
}

input CargoItemSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exceptionCount: IntExpression
  exceptionDescription: StringExpression
  exs: [CargoItemExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  model: StringExpression
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  order: OrderExpression
  orderId: IntExpression
  packaging: StringExpression
  quantity: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  volume: FloatExpression
  weight: FloatExpression
}

"""收费项目"""
type ChargeItem implements Meta & NamedStruct {
  """金额"""
  amount: Float
  amountAvg: Float
  amountCount: Int
  amountMax: Float
  amountMin: Float
  amountSum: Float

  """收费类型"""
  chargeType: ChargeType!
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """名称"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """备注"""
  notes: String
  notesCount: Int
  notesMax: String
  notesMin: String

  """订单ID"""
  orderId: String!
  orderIdCount: Int
  orderIdMax: String
  orderIdMin: String
  realmId: Int

  """税额"""
  taxAmount: Float
  taxAmountAvg: Float
  taxAmountCount: Int
  taxAmountMax: Float
  taxAmountMin: Float
  taxAmountSum: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type ChargeItemConnection {
  edges: [ChargeItemEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input ChargeItemConnectionQueryArguments {
  after: ID
  amount: FloatExpression
  before: ID
  chargeType: ChargeTypeExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [ChargeItemExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: ChargeItemOrderBy
  orderId: StringExpression
  realmId: IntExpression
  taxAmount: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ChargeItemConnectionSubscriptionArguments {
  after: ID
  amount: FloatExpression
  before: ID
  chargeType: ChargeTypeExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [ChargeItemExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: ChargeItemOrderBy
  orderId: StringExpression
  realmId: IntExpression
  taxAmount: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type ChargeItemEdge {
  cursor: ID
  node: ChargeItem
}

input ChargeItemExpression {
  amount: FloatExpression
  chargeType: ChargeTypeExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [ChargeItemExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  orderId: StringExpression
  realmId: IntExpression
  taxAmount: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ChargeItemInput {
  amount: Float
  chargeType: ChargeType
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  name: String
  notes: String
  orderId: String
  realmId: Int
  taxAmount: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: ChargeItemExpression
}

input ChargeItemListMutationArguments {
  amount: Float
  chargeType: ChargeType
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  list: [ChargeItemInput]
  name: String
  notes: String
  orderId: String
  realmId: Int
  taxAmount: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: ChargeItemExpression
}

input ChargeItemListQueryArguments {
  after: ID
  amount: FloatExpression
  before: ID
  chargeType: ChargeTypeExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [ChargeItemExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: ChargeItemOrderBy
  orderId: StringExpression
  realmId: IntExpression
  taxAmount: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ChargeItemListSubscriptionArguments {
  after: ID
  amount: FloatExpression
  before: ID
  chargeType: ChargeTypeExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [ChargeItemExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: ChargeItemOrderBy
  orderId: StringExpression
  realmId: IntExpression
  taxAmount: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ChargeItemMutationArguments {
  amount: Float
  chargeType: ChargeType
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  name: String
  notes: String
  orderId: String
  realmId: Int
  taxAmount: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: ChargeItemExpression
}

input ChargeItemOrderBy {
  amount: Sort
  chargeType: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  notes: Sort
  orderId: Sort
  realmId: Sort
  taxAmount: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input ChargeItemQueryArguments {
  amount: FloatExpression
  chargeType: ChargeTypeExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [ChargeItemExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  orderId: StringExpression
  realmId: IntExpression
  taxAmount: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ChargeItemSubscriptionArguments {
  amount: FloatExpression
  chargeType: ChargeTypeExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [ChargeItemExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  orderId: StringExpression
  realmId: IntExpression
  taxAmount: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

"""费用类型"""
enum ChargeType {
  """下站费用"""
  DELIVERY_STATION_FEE

  """上站费用"""
  PICKUP_STATION_FEE

  """港口费用"""
  PORT_FEE

  """铁路费用"""
  RAILWAY_FEE

  """仓储费用"""
  STORAGE_FEE
}

input ChargeTypeExpression {
  in: [ChargeType]
  opr: Operator = EQ
  val: ChargeType
}

enum Conditional {
  AND
  OR
}

input ConditionalExpression {
  in: [Conditional]
  opr: Operator = EQ
  val: Conditional
}

"""联系信息"""
type ContactInfo implements Meta & NamedStruct {
  """地址"""
  address: String
  addressCount: Int
  addressMax: String
  addressMin: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """联系人姓名"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """联系人手机号"""
  phone: String!
  phoneCount: Int
  phoneMax: String
  phoneMin: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type ContactInfoConnection {
  edges: [ContactInfoEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input ContactInfoConnectionQueryArguments {
  address: StringExpression
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [ContactInfoExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: ContactInfoOrderBy
  phone: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ContactInfoConnectionSubscriptionArguments {
  address: StringExpression
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [ContactInfoExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: ContactInfoOrderBy
  phone: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type ContactInfoEdge {
  cursor: ID
  node: ContactInfo
}

input ContactInfoExpression {
  address: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [ContactInfoExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  phone: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ContactInfoInput {
  address: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  name: String
  phone: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: ContactInfoExpression
}

input ContactInfoListMutationArguments {
  address: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  list: [ContactInfoInput]
  name: String
  phone: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: ContactInfoExpression
}

input ContactInfoListQueryArguments {
  address: StringExpression
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [ContactInfoExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: ContactInfoOrderBy
  phone: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ContactInfoListSubscriptionArguments {
  address: StringExpression
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [ContactInfoExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: ContactInfoOrderBy
  phone: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ContactInfoMutationArguments {
  address: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  name: String
  phone: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: ContactInfoExpression
}

input ContactInfoOrderBy {
  address: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  phone: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input ContactInfoQueryArguments {
  address: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [ContactInfoExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  phone: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ContactInfoSubscriptionArguments {
  address: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [ContactInfoExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  phone: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

"""合同"""
type Contract implements Meta & NamedStruct {
  """补充内容"""
  additionalContent: String
  additionalContentCount: Int
  additionalContentMax: String
  additionalContentMin: String

  """业务隶属公司"""
  businessAffiliate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group
  businessAffiliateId: Int
  businessAffiliateIdAvg: Int
  businessAffiliateIdCount: Int
  businessAffiliateIdMax: Int
  businessAffiliateIdMin: Int
  businessAffiliateIdSum: Int

  """业务规模（万吨）"""
  businessScale: Float
  businessScaleAvg: Float
  businessScaleCount: Int
  businessScaleMax: Float
  businessScaleMin: Float
  businessScaleSum: Float

  """业务类型"""
  businessType: BusinessType

  """代码"""
  code: String
  codeCount: Int
  codeMax: String
  codeMin: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """客户"""
  customer(address: StringExpression, city: StringExpression, code: StringExpression, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, email: StringExpression, fax: StringExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, notes: StringExpression, phoneNumber: StringExpression, postalCode: StringExpression, province: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Customer!
  customerId: Int
  customerIdAvg: Int
  customerIdCount: Int
  customerIdMax: Int
  customerIdMin: Int
  customerIdSum: Int

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """生效时间"""
  effectiveDate: Timestamp!
  effectiveDateCount: Int
  effectiveDateMax: Timestamp
  effectiveDateMin: Timestamp

  """截止时间"""
  expirationDate: Timestamp!
  expirationDateCount: Int
  expirationDateMax: Timestamp
  expirationDateMin: Timestamp

  """存档部门"""
  filingDepartment(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group
  filingDepartmentId: Int
  filingDepartmentIdAvg: Int
  filingDepartmentIdCount: Int
  filingDepartmentIdMax: Int
  filingDepartmentIdMin: Int
  filingDepartmentIdSum: Int

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """名称"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """备注"""
  notes: String
  notesCount: Int
  notesMax: String
  notesMin: String

  """履行情况"""
  performanceStatus: ContractStatus

  """计价单位"""
  pricingUnit: String
  pricingUnitCount: Int
  pricingUnitMax: String
  pricingUnitMin: String
  realmId: Int

  """签约方数"""
  signatoryCount: Int
  signatoryCountAvg: Int
  signatoryCountCount: Int
  signatoryCountMax: Int
  signatoryCountMin: Int
  signatoryCountSum: Int

  """签约公司"""
  signingCompany(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group!
  signingCompanyId: Int
  signingCompanyIdAvg: Int
  signingCompanyIdCount: Int
  signingCompanyIdMax: Int
  signingCompanyIdMin: Int
  signingCompanyIdSum: Int

  """运输方式"""
  transportationMode: TransportationMode

  """单价"""
  unitPrice: PricingUnit
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type ContractConnection {
  edges: [ContractEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input ContractConnectionQueryArguments {
  additionalContent: StringExpression
  after: ID
  before: ID
  businessAffiliate: GroupExpression
  businessAffiliateId: IntExpression
  businessScale: FloatExpression
  businessType: BusinessTypeExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  description: StringExpression
  effectiveDate: StringExpression
  expirationDate: StringExpression
  exs: [ContractExpression]
  filingDepartment: GroupExpression
  filingDepartmentId: IntExpression
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: ContractOrderBy
  performanceStatus: ContractStatusExpression
  pricingUnit: StringExpression
  realmId: IntExpression
  signatoryCount: IntExpression
  signingCompany: GroupExpression
  signingCompanyId: IntExpression
  transportationMode: TransportationModeExpression
  unitPrice: PricingUnitExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ContractConnectionSubscriptionArguments {
  additionalContent: StringExpression
  after: ID
  before: ID
  businessAffiliate: GroupExpression
  businessAffiliateId: IntExpression
  businessScale: FloatExpression
  businessType: BusinessTypeExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  description: StringExpression
  effectiveDate: StringExpression
  expirationDate: StringExpression
  exs: [ContractExpression]
  filingDepartment: GroupExpression
  filingDepartmentId: IntExpression
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: ContractOrderBy
  performanceStatus: ContractStatusExpression
  pricingUnit: StringExpression
  realmId: IntExpression
  signatoryCount: IntExpression
  signingCompany: GroupExpression
  signingCompanyId: IntExpression
  transportationMode: TransportationModeExpression
  unitPrice: PricingUnitExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type ContractEdge {
  cursor: ID
  node: Contract
}

input ContractExpression {
  additionalContent: StringExpression
  businessAffiliate: GroupExpression
  businessAffiliateId: IntExpression
  businessScale: FloatExpression
  businessType: BusinessTypeExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  description: StringExpression
  effectiveDate: StringExpression
  expirationDate: StringExpression
  exs: [ContractExpression]
  filingDepartment: GroupExpression
  filingDepartmentId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  performanceStatus: ContractStatusExpression
  pricingUnit: StringExpression
  realmId: IntExpression
  signatoryCount: IntExpression
  signingCompany: GroupExpression
  signingCompanyId: IntExpression
  transportationMode: TransportationModeExpression
  unitPrice: PricingUnitExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ContractInput {
  additionalContent: String
  businessAffiliate: GroupInput
  businessAffiliateId: Int
  businessScale: Float
  businessType: BusinessType
  code: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  customer: CustomerInput
  customerId: Int
  description: String
  effectiveDate: Timestamp
  expirationDate: Timestamp
  filingDepartment: GroupInput
  filingDepartmentId: Int
  id: ID
  isDeprecated: Boolean
  name: String
  notes: String
  performanceStatus: ContractStatus
  pricingUnit: String
  realmId: Int
  signatoryCount: Int
  signingCompany: GroupInput
  signingCompanyId: Int
  transportationMode: TransportationMode
  unitPrice: PricingUnit
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: ContractExpression
}

input ContractListMutationArguments {
  additionalContent: String
  businessAffiliate: GroupInput
  businessAffiliateId: Int
  businessScale: Float
  businessType: BusinessType
  code: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  customer: CustomerInput
  customerId: Int
  description: String
  effectiveDate: Timestamp
  expirationDate: Timestamp
  filingDepartment: GroupInput
  filingDepartmentId: Int
  id: ID
  isDeprecated: Boolean
  list: [ContractInput]
  name: String
  notes: String
  performanceStatus: ContractStatus
  pricingUnit: String
  realmId: Int
  signatoryCount: Int
  signingCompany: GroupInput
  signingCompanyId: Int
  transportationMode: TransportationMode
  unitPrice: PricingUnit
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: ContractExpression
}

input ContractListQueryArguments {
  additionalContent: StringExpression
  after: ID
  before: ID
  businessAffiliate: GroupExpression
  businessAffiliateId: IntExpression
  businessScale: FloatExpression
  businessType: BusinessTypeExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  description: StringExpression
  effectiveDate: StringExpression
  expirationDate: StringExpression
  exs: [ContractExpression]
  filingDepartment: GroupExpression
  filingDepartmentId: IntExpression
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: ContractOrderBy
  performanceStatus: ContractStatusExpression
  pricingUnit: StringExpression
  realmId: IntExpression
  signatoryCount: IntExpression
  signingCompany: GroupExpression
  signingCompanyId: IntExpression
  transportationMode: TransportationModeExpression
  unitPrice: PricingUnitExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ContractListSubscriptionArguments {
  additionalContent: StringExpression
  after: ID
  before: ID
  businessAffiliate: GroupExpression
  businessAffiliateId: IntExpression
  businessScale: FloatExpression
  businessType: BusinessTypeExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  description: StringExpression
  effectiveDate: StringExpression
  expirationDate: StringExpression
  exs: [ContractExpression]
  filingDepartment: GroupExpression
  filingDepartmentId: IntExpression
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: ContractOrderBy
  performanceStatus: ContractStatusExpression
  pricingUnit: StringExpression
  realmId: IntExpression
  signatoryCount: IntExpression
  signingCompany: GroupExpression
  signingCompanyId: IntExpression
  transportationMode: TransportationModeExpression
  unitPrice: PricingUnitExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ContractMutationArguments {
  additionalContent: String
  businessAffiliate: GroupInput
  businessAffiliateId: Int
  businessScale: Float
  businessType: BusinessType
  code: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  customer: CustomerInput
  customerId: Int
  description: String
  effectiveDate: Timestamp
  expirationDate: Timestamp
  filingDepartment: GroupInput
  filingDepartmentId: Int
  id: ID
  isDeprecated: Boolean
  name: String
  notes: String
  performanceStatus: ContractStatus
  pricingUnit: String
  realmId: Int
  signatoryCount: Int
  signingCompany: GroupInput
  signingCompanyId: Int
  transportationMode: TransportationMode
  unitPrice: PricingUnit
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: ContractExpression
}

input ContractOrderBy {
  additionalContent: Sort
  businessAffiliateId: Sort
  businessScale: Sort
  businessType: Sort
  code: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  customerId: Sort
  description: Sort
  effectiveDate: Sort
  expirationDate: Sort
  filingDepartmentId: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  notes: Sort
  performanceStatus: Sort
  pricingUnit: Sort
  realmId: Sort
  signatoryCount: Sort
  signingCompanyId: Sort
  transportationMode: Sort
  unitPrice: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input ContractQueryArguments {
  additionalContent: StringExpression
  businessAffiliate: GroupExpression
  businessAffiliateId: IntExpression
  businessScale: FloatExpression
  businessType: BusinessTypeExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  description: StringExpression
  effectiveDate: StringExpression
  expirationDate: StringExpression
  exs: [ContractExpression]
  filingDepartment: GroupExpression
  filingDepartmentId: IntExpression
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  performanceStatus: ContractStatusExpression
  pricingUnit: StringExpression
  realmId: IntExpression
  signatoryCount: IntExpression
  signingCompany: GroupExpression
  signingCompanyId: IntExpression
  transportationMode: TransportationModeExpression
  unitPrice: PricingUnitExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

"""合同状态"""
enum ContractStatus {
  """变更"""
  CHANGE

  """到期终止"""
  EXPIRATION_TERMINATION

  """正常履行"""
  NORMAL_PERFORMANCE

  """解除"""
  TERMINATION
}

input ContractStatusExpression {
  in: [ContractStatus]
  opr: Operator = EQ
  val: ContractStatus
}

input ContractSubscriptionArguments {
  additionalContent: StringExpression
  businessAffiliate: GroupExpression
  businessAffiliateId: IntExpression
  businessScale: FloatExpression
  businessType: BusinessTypeExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  description: StringExpression
  effectiveDate: StringExpression
  expirationDate: StringExpression
  exs: [ContractExpression]
  filingDepartment: GroupExpression
  filingDepartmentId: IntExpression
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  performanceStatus: ContractStatusExpression
  pricingUnit: StringExpression
  realmId: IntExpression
  signatoryCount: IntExpression
  signingCompany: GroupExpression
  signingCompanyId: IntExpression
  transportationMode: TransportationModeExpression
  unitPrice: PricingUnitExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type CurrentUser {
  groups: [String]
  id: String
  lastName: String
  login: String
  name: String
  realmId: Int
  roles: [String]
}

"""客户"""
type Customer implements Meta & NamedStruct {
  """地址"""
  address: String
  addressCount: Int
  addressMax: String
  addressMin: String

  """市"""
  city: String
  cityCount: Int
  cityMax: String
  cityMin: String

  """代码"""
  code: String!
  codeCount: Int
  codeMax: String
  codeMin: String

  """联系人"""
  contactPerson: String
  contactPersonCount: Int
  contactPersonMax: String
  contactPersonMin: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """区县"""
  district: String
  districtCount: Int
  districtMax: String
  districtMin: String

  """邮箱"""
  email: String
  emailCount: Int
  emailMax: String
  emailMin: String

  """传真"""
  fax: String
  faxCount: Int
  faxMax: String
  faxMin: String

  """所属公司"""
  group(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group
  groupId: Int
  groupIdAvg: Int
  groupIdCount: Int
  groupIdMax: Int
  groupIdMin: Int
  groupIdSum: Int

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """名称"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """备注"""
  notes: String
  notesCount: Int
  notesMax: String
  notesMin: String

  """手机号码"""
  phoneNumber: String
  phoneNumberCount: Int
  phoneNumberMax: String
  phoneNumberMin: String

  """邮编"""
  postalCode: String
  postalCodeCount: Int
  postalCodeMax: String
  postalCodeMin: String

  """省"""
  province: String
  provinceCount: Int
  provinceMax: String
  provinceMin: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type CustomerConnection {
  edges: [CustomerEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input CustomerConnectionQueryArguments {
  address: StringExpression
  after: ID
  before: ID
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  email: StringExpression
  exs: [CustomerExpression]
  fax: StringExpression
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: CustomerOrderBy
  phoneNumber: StringExpression
  postalCode: StringExpression
  province: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CustomerConnectionSubscriptionArguments {
  address: StringExpression
  after: ID
  before: ID
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  email: StringExpression
  exs: [CustomerExpression]
  fax: StringExpression
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: CustomerOrderBy
  phoneNumber: StringExpression
  postalCode: StringExpression
  province: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type CustomerEdge {
  cursor: ID
  node: Customer
}

input CustomerExpression {
  address: StringExpression
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  email: StringExpression
  exs: [CustomerExpression]
  fax: StringExpression
  group: GroupExpression
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  phoneNumber: StringExpression
  postalCode: StringExpression
  province: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CustomerInput {
  address: String
  city: String
  code: String
  contactPerson: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  district: String
  email: String
  fax: String
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  name: String
  notes: String
  phoneNumber: String
  postalCode: String
  province: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: CustomerExpression
}

input CustomerListMutationArguments {
  address: String
  city: String
  code: String
  contactPerson: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  district: String
  email: String
  fax: String
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  list: [CustomerInput]
  name: String
  notes: String
  phoneNumber: String
  postalCode: String
  province: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: CustomerExpression
}

input CustomerListQueryArguments {
  address: StringExpression
  after: ID
  before: ID
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  email: StringExpression
  exs: [CustomerExpression]
  fax: StringExpression
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: CustomerOrderBy
  phoneNumber: StringExpression
  postalCode: StringExpression
  province: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CustomerListSubscriptionArguments {
  address: StringExpression
  after: ID
  before: ID
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  email: StringExpression
  exs: [CustomerExpression]
  fax: StringExpression
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: CustomerOrderBy
  phoneNumber: StringExpression
  postalCode: StringExpression
  province: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CustomerMutationArguments {
  address: String
  city: String
  code: String
  contactPerson: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  district: String
  email: String
  fax: String
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  name: String
  notes: String
  phoneNumber: String
  postalCode: String
  province: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: CustomerExpression
}

input CustomerOrderBy {
  address: Sort
  city: Sort
  code: Sort
  contactPerson: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  district: Sort
  email: Sort
  fax: Sort
  groupId: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  notes: Sort
  phoneNumber: Sort
  postalCode: Sort
  province: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input CustomerQueryArguments {
  address: StringExpression
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  email: StringExpression
  exs: [CustomerExpression]
  fax: StringExpression
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  phoneNumber: StringExpression
  postalCode: StringExpression
  province: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input CustomerSubscriptionArguments {
  address: StringExpression
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  email: StringExpression
  exs: [CustomerExpression]
  fax: StringExpression
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  phoneNumber: StringExpression
  postalCode: StringExpression
  province: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

scalar Date

scalar DateTime

"""配送"""
type DeliveryWaybill implements Meta {
  """到达站"""
  arrivalStation(address: StringExpression, city: StringExpression, code: StringExpression, description: StringExpression, district: StringExpression, groupBy: [String!], id: StringExpression, name: StringExpression, notes: StringExpression, province: StringExpression, railwayBureau: RailwayBureauExpression): TrainStation!
  arrivalStationId: Int
  arrivalStationIdAvg: Int
  arrivalStationIdCount: Int
  arrivalStationIdMax: Int
  arrivalStationIdMin: Int
  arrivalStationIdSum: Int

  """到达时间"""
  arrivalTime: Timestamp!
  arrivalTimeCount: Int
  arrivalTimeMax: Timestamp
  arrivalTimeMin: Timestamp

  """货物信息"""
  cargoItems(after: ID, before: ID, description: StringExpression, exceptionCount: IntExpression, exceptionDescription: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, model: StringExpression, name: StringExpression, notes: StringExpression, offset: Int, order: OrderExpression, orderBy: CargoItemOrderBy, packaging: StringExpression, quantity: IntExpression, volume: FloatExpression, weight: FloatExpression): [CargoItem!]
  cargoItemsAggregate(description: StringExpression, exceptionCount: IntExpression, exceptionDescription: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, model: StringExpression, name: StringExpression, notes: StringExpression, offset: Int, order: OrderExpression, orderBy: CargoItemOrderBy, packaging: StringExpression, quantity: IntExpression, volume: FloatExpression, weight: FloatExpression): CargoItem
  cargoItemsConnection(after: ID, before: ID, description: StringExpression, exceptionCount: IntExpression, exceptionDescription: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, model: StringExpression, name: StringExpression, notes: StringExpression, offset: Int, order: OrderExpression, orderBy: CargoItemOrderBy, packaging: StringExpression, quantity: IntExpression, volume: FloatExpression, weight: FloatExpression): CargoItemConnection

  """联系人"""
  contactPerson: String
  contactPersonCount: Int
  contactPersonMax: String
  contactPersonMin: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """配送地址"""
  deliveryAddress: String!
  deliveryAddressCount: Int
  deliveryAddressMax: String
  deliveryAddressMin: String

  """配送时间"""
  deliveryTime: Timestamp!
  deliveryTimeCount: Int
  deliveryTimeMax: Timestamp
  deliveryTimeMin: Timestamp

  """所属公司"""
  group(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group
  groupId: Int
  groupIdAvg: Int
  groupIdCount: Int
  groupIdMax: Int
  groupIdMin: Int
  groupIdSum: Int

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """车牌号"""
  licensePlate: String
  licensePlateCount: Int
  licensePlateMax: String
  licensePlateMin: String

  """付费信息"""
  paymentItems(after: ID, amount: FloatExpression, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, invoiceNumber: StringExpression, last: Int, name: StringExpression, notes: StringExpression, offset: Int, orderBy: PaymentItemOrderBy, paymentType: ChargeTypeExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillId: StringExpression): [PaymentItem!]
  paymentItemsAggregate(amount: FloatExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, invoiceNumber: StringExpression, last: Int, name: StringExpression, notes: StringExpression, offset: Int, orderBy: PaymentItemOrderBy, paymentType: ChargeTypeExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillId: StringExpression): PaymentItem
  paymentItemsConnection(after: ID, amount: FloatExpression, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, invoiceNumber: StringExpression, last: Int, name: StringExpression, notes: StringExpression, offset: Int, orderBy: PaymentItemOrderBy, paymentType: ChargeTypeExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillId: StringExpression): PaymentItemConnection

  """手机号"""
  phoneNumber: String
  phoneNumberCount: Int
  phoneNumberMax: String
  phoneNumberMin: String
  realmId: Int

  """供应商信息"""
  supplier(address: StringExpression, city: StringExpression, code: StringExpression, contactPerson: StringExpression, description: StringExpression, district: StringExpression, email: StringExpression, fax: StringExpression, group: GroupExpression, groupBy: [String!], id: StringExpression, name: StringExpression, notes: StringExpression, phoneNumber: StringExpression, postalCode: StringExpression): Supplier
  supplierId: Int
  supplierIdAvg: Int
  supplierIdCount: Int
  supplierIdMax: Int
  supplierIdMin: Int
  supplierIdSum: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int

  """运单号"""
  waybillNumber: String!
  waybillNumberCount: Int
  waybillNumberMax: String
  waybillNumberMin: String
}

type DeliveryWaybillConnection {
  edges: [DeliveryWaybillEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input DeliveryWaybillConnectionQueryArguments {
  after: ID
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  arrivalTime: StringExpression
  before: ID
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deliveryAddress: StringExpression
  deliveryTime: StringExpression
  exs: [DeliveryWaybillExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  licensePlate: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: DeliveryWaybillOrderBy
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

input DeliveryWaybillConnectionSubscriptionArguments {
  after: ID
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  arrivalTime: StringExpression
  before: ID
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deliveryAddress: StringExpression
  deliveryTime: StringExpression
  exs: [DeliveryWaybillExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  licensePlate: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: DeliveryWaybillOrderBy
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

type DeliveryWaybillEdge {
  cursor: ID
  node: DeliveryWaybill
}

input DeliveryWaybillExpression {
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  arrivalTime: StringExpression
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deliveryAddress: StringExpression
  deliveryTime: StringExpression
  exs: [DeliveryWaybillExpression]
  group: GroupExpression
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  licensePlate: StringExpression
  not: Boolean = false
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

input DeliveryWaybillInput {
  arrivalStation: TrainStationInput
  arrivalStationId: Int
  arrivalTime: Timestamp
  cargoItems: [CargoItemInput]
  contactPerson: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  deliveryAddress: String
  deliveryTime: Timestamp
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  licensePlate: String
  paymentItems: [PaymentItemInput]
  phoneNumber: String
  realmId: Int
  supplier: SupplierInput
  supplierId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  waybillNumber: String
  where: DeliveryWaybillExpression
}

input DeliveryWaybillListMutationArguments {
  arrivalStation: TrainStationInput
  arrivalStationId: Int
  arrivalTime: Timestamp
  cargoItems: [CargoItemInput]
  contactPerson: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  deliveryAddress: String
  deliveryTime: Timestamp
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  licensePlate: String
  list: [DeliveryWaybillInput]
  paymentItems: [PaymentItemInput]
  phoneNumber: String
  realmId: Int
  supplier: SupplierInput
  supplierId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  waybillNumber: String
  where: DeliveryWaybillExpression
}

input DeliveryWaybillListQueryArguments {
  after: ID
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  arrivalTime: StringExpression
  before: ID
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deliveryAddress: StringExpression
  deliveryTime: StringExpression
  exs: [DeliveryWaybillExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  licensePlate: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: DeliveryWaybillOrderBy
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

input DeliveryWaybillListSubscriptionArguments {
  after: ID
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  arrivalTime: StringExpression
  before: ID
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deliveryAddress: StringExpression
  deliveryTime: StringExpression
  exs: [DeliveryWaybillExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  licensePlate: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: DeliveryWaybillOrderBy
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

input DeliveryWaybillMutationArguments {
  arrivalStation: TrainStationInput
  arrivalStationId: Int
  arrivalTime: Timestamp
  cargoItems: [CargoItemInput]
  contactPerson: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  deliveryAddress: String
  deliveryTime: Timestamp
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  licensePlate: String
  paymentItems: [PaymentItemInput]
  phoneNumber: String
  realmId: Int
  supplier: SupplierInput
  supplierId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  waybillNumber: String
  where: DeliveryWaybillExpression
}

input DeliveryWaybillOrderBy {
  arrivalStationId: Sort
  arrivalTime: Sort
  contactPerson: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  deliveryAddress: Sort
  deliveryTime: Sort
  groupId: Sort
  id: Sort
  isDeprecated: Sort
  licensePlate: Sort
  phoneNumber: Sort
  realmId: Sort
  supplierId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
  waybillNumber: Sort
}

input DeliveryWaybillQueryArguments {
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  arrivalTime: StringExpression
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deliveryAddress: StringExpression
  deliveryTime: StringExpression
  exs: [DeliveryWaybillExpression]
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  licensePlate: StringExpression
  not: Boolean = false
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

input DeliveryWaybillSubscriptionArguments {
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  arrivalTime: StringExpression
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deliveryAddress: StringExpression
  deliveryTime: StringExpression
  exs: [DeliveryWaybillExpression]
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  licensePlate: StringExpression
  not: Boolean = false
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

"""员工档案"""
type EmployeeProfile implements Meta {
  """地址"""
  address: String
  addressCount: Int
  addressMax: String
  addressMin: String

  """出生日期"""
  birthDate: String
  birthDateCount: Int
  birthDateMax: String
  birthDateMin: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """紧急联系人"""
  emergencyContact: String
  emergencyContactCount: Int
  emergencyContactMax: String
  emergencyContactMin: String

  """紧急联系人电话"""
  emergencyContactPhone: String
  emergencyContactPhoneCount: Int
  emergencyContactPhoneMax: String
  emergencyContactPhoneMin: String

  """员工"""
  employee(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): User!
  employeeId: Int
  employeeIdAvg: Int
  employeeIdCount: Int
  employeeIdMax: Int
  employeeIdMin: Int
  employeeIdSum: Int

  """性别"""
  gender: Gender

  """入职日期"""
  hireDate: String
  hireDateCount: Int
  hireDateMax: String
  hireDateMin: String

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """备注"""
  notes: String
  notesCount: Int
  notesMax: String
  notesMin: String

  """职位"""
  position: String
  positionCount: Int
  positionMax: String
  positionMin: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type EmployeeProfileConnection {
  edges: [EmployeeProfileEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input EmployeeProfileConnectionQueryArguments {
  address: StringExpression
  after: ID
  before: ID
  birthDate: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  emergencyContact: StringExpression
  emergencyContactPhone: StringExpression
  employee: UserExpression
  employeeId: IntExpression
  exs: [EmployeeProfileExpression]
  first: Int
  gender: GenderExpression
  groupBy: [String!]
  hireDate: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: EmployeeProfileOrderBy
  position: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input EmployeeProfileConnectionSubscriptionArguments {
  address: StringExpression
  after: ID
  before: ID
  birthDate: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  emergencyContact: StringExpression
  emergencyContactPhone: StringExpression
  employee: UserExpression
  employeeId: IntExpression
  exs: [EmployeeProfileExpression]
  first: Int
  gender: GenderExpression
  groupBy: [String!]
  hireDate: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: EmployeeProfileOrderBy
  position: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type EmployeeProfileEdge {
  cursor: ID
  node: EmployeeProfile
}

input EmployeeProfileExpression {
  address: StringExpression
  birthDate: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  emergencyContact: StringExpression
  emergencyContactPhone: StringExpression
  employee: UserExpression
  employeeId: IntExpression
  exs: [EmployeeProfileExpression]
  gender: GenderExpression
  hireDate: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  notes: StringExpression
  position: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input EmployeeProfileInput {
  address: String
  birthDate: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  emergencyContact: String
  emergencyContactPhone: String
  employee: UserInput
  employeeId: Int
  gender: Gender
  hireDate: String
  id: ID
  isDeprecated: Boolean
  notes: String
  position: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: EmployeeProfileExpression
}

input EmployeeProfileListMutationArguments {
  address: String
  birthDate: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  emergencyContact: String
  emergencyContactPhone: String
  employee: UserInput
  employeeId: Int
  gender: Gender
  hireDate: String
  id: ID
  isDeprecated: Boolean
  list: [EmployeeProfileInput]
  notes: String
  position: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: EmployeeProfileExpression
}

input EmployeeProfileListQueryArguments {
  address: StringExpression
  after: ID
  before: ID
  birthDate: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  emergencyContact: StringExpression
  emergencyContactPhone: StringExpression
  employee: UserExpression
  employeeId: IntExpression
  exs: [EmployeeProfileExpression]
  first: Int
  gender: GenderExpression
  groupBy: [String!]
  hireDate: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: EmployeeProfileOrderBy
  position: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input EmployeeProfileListSubscriptionArguments {
  address: StringExpression
  after: ID
  before: ID
  birthDate: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  emergencyContact: StringExpression
  emergencyContactPhone: StringExpression
  employee: UserExpression
  employeeId: IntExpression
  exs: [EmployeeProfileExpression]
  first: Int
  gender: GenderExpression
  groupBy: [String!]
  hireDate: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: EmployeeProfileOrderBy
  position: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input EmployeeProfileMutationArguments {
  address: String
  birthDate: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  emergencyContact: String
  emergencyContactPhone: String
  employee: UserInput
  employeeId: Int
  gender: Gender
  hireDate: String
  id: ID
  isDeprecated: Boolean
  notes: String
  position: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: EmployeeProfileExpression
}

input EmployeeProfileOrderBy {
  address: Sort
  birthDate: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  emergencyContact: Sort
  emergencyContactPhone: Sort
  employeeId: Sort
  gender: Sort
  hireDate: Sort
  id: Sort
  isDeprecated: Sort
  notes: Sort
  position: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input EmployeeProfileQueryArguments {
  address: StringExpression
  birthDate: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  emergencyContact: StringExpression
  emergencyContactPhone: StringExpression
  employee: UserExpression
  employeeId: IntExpression
  exs: [EmployeeProfileExpression]
  gender: GenderExpression
  groupBy: [String!]
  hireDate: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  notes: StringExpression
  position: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input EmployeeProfileSubscriptionArguments {
  address: StringExpression
  birthDate: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  emergencyContact: StringExpression
  emergencyContactPhone: StringExpression
  employee: UserExpression
  employeeId: IntExpression
  exs: [EmployeeProfileExpression]
  gender: GenderExpression
  groupBy: [String!]
  hireDate: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  notes: StringExpression
  position: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input FloatExpression {
  in: [Float]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: Float
}

enum Func {
  AVG
  COUNT
  MAX
  MIN
  SUM
}

input FuncExpression {
  in: [Func]
  opr: Operator = EQ
  val: Func
}

"""性别"""
enum Gender {
  """女"""
  FEMALE

  """男"""
  MALE

  """其他"""
  OTHER
}

input GenderExpression {
  in: [Gender]
  opr: Operator = EQ
  val: Gender
}

"""组"""
type Group implements Meta & NamedStruct & TreeStruct {
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """层级"""
  deep: Int
  deepAvg: Int
  deepCount: Int
  deepMax: Int
  deepMin: Int
  deepSum: Int

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String
  groupRole: [GroupRole]
  groupRoleAggregate(first: Int, groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, last: Int, offset: Int, orderBy: GroupRoleOrderBy, roleId: IntExpression, roleIdType: RoleExpression): GroupRole
  groupRoleConnection(first: Int, groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, last: Int, offset: Int, orderBy: GroupRoleOrderBy, roleId: IntExpression, roleIdType: RoleExpression): GroupRoleConnection

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """名称"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """上级"""
  parent(deep: IntExpression, description: StringExpression, groupBy: [String!], id: StringExpression, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, roles: RoleExpression, subGroups: GroupExpression, users: UserExpression): Group

  """上级ID"""
  parentId: String
  parentIdCount: Int
  parentIdMax: String
  parentIdMin: String

  """路径"""
  path: String
  pathCount: Int
  pathMax: String
  pathMin: String

  """租户"""
  realm(description: StringExpression, groupBy: [String!], id: StringExpression, name: StringExpression): Realm
  realmId: Int
  realmIdAvg: Int
  realmIdCount: Int
  realmIdMax: Int
  realmIdMin: Int
  realmIdSum: Int

  """角色"""
  roles(after: ID, before: ID, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRole: GroupRoleExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleComposite: RoleCompositeExpression, rolePermission: RolePermissionExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): [Role]
  rolesAggregate(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRole: GroupRoleExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleComposite: RoleCompositeExpression, rolePermission: RolePermissionExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  rolesConnection(after: ID, before: ID, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRole: GroupRoleExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleComposite: RoleCompositeExpression, rolePermission: RolePermissionExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): RoleConnection

  """下级"""
  subGroups(after: ID, before: ID, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, roles: RoleExpression, subGroups: GroupExpression, users: UserExpression): [Group]
  subGroupsAggregate(deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, roles: RoleExpression, subGroups: GroupExpression, users: UserExpression): Group
  subGroupsConnection(after: ID, before: ID, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, roles: RoleExpression, subGroups: GroupExpression, users: UserExpression): GroupConnection
  syncGroupPolicy: Boolean
  updateTime: Timestamp
  updateUserId: String
  userGroup: [UserGroup]
  userGroupAggregate(first: Int, groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, last: Int, offset: Int, orderBy: UserGroupOrderBy, userId: IntExpression, userIdType: UserExpression): UserGroup
  userGroupConnection(first: Int, groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, last: Int, offset: Int, orderBy: UserGroupOrderBy, userId: IntExpression, userIdType: UserExpression): UserGroupConnection

  """用户"""
  users(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): [User]
  usersAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): User
  usersConnection(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): UserConnection
  version: Int
}

type GroupConnection {
  edges: [GroupEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input GroupConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  first: Int
  groupBy: [String!]
  groupRole: GroupRoleExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: GroupOrderBy
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  users: UserExpression
  version: IntExpression
}

input GroupConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  first: Int
  groupBy: [String!]
  groupRole: GroupRoleExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: GroupOrderBy
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  users: UserExpression
  version: IntExpression
}

type GroupEdge {
  cursor: ID
  node: Group
}

input GroupExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  groupRole: GroupRoleExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  users: UserExpression
  version: IntExpression
}

input GroupInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  deep: Int
  description: String
  groupRole: [GroupRoleInput]
  id: ID
  isDeprecated: Boolean
  name: String
  parent: GroupInput
  parentId: String
  path: String
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  subGroups: [GroupInput]
  updateTime: Timestamp
  updateUserId: String
  userGroup: [UserGroupInput]
  users: [UserInput]
  version: Int
  where: GroupExpression
}

input GroupListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  deep: Int
  description: String
  groupRole: [GroupRoleInput]
  id: ID
  isDeprecated: Boolean
  list: [GroupInput]
  name: String
  parent: GroupInput
  parentId: String
  path: String
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  subGroups: [GroupInput]
  updateTime: Timestamp
  updateUserId: String
  userGroup: [UserGroupInput]
  users: [UserInput]
  version: Int
  where: GroupExpression
}

input GroupListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  first: Int
  groupBy: [String!]
  groupRole: GroupRoleExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: GroupOrderBy
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  users: UserExpression
  version: IntExpression
}

input GroupListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  first: Int
  groupBy: [String!]
  groupRole: GroupRoleExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: GroupOrderBy
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  users: UserExpression
  version: IntExpression
}

input GroupMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  deep: Int
  description: String
  groupRole: [GroupRoleInput]
  id: ID
  isDeprecated: Boolean
  name: String
  parent: GroupInput
  parentId: String
  path: String
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  subGroups: [GroupInput]
  updateTime: Timestamp
  updateUserId: String
  userGroup: [UserGroupInput]
  users: [UserInput]
  version: Int
  where: GroupExpression
}

input GroupOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  deep: Sort
  description: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  parentId: Sort
  path: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input GroupQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  groupBy: [String!]
  groupRole: GroupRoleExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  users: UserExpression
  version: IntExpression
}

type GroupRole implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  groupId: Int
  groupIdAvg: Int
  groupIdCount: Int
  groupIdMax: Int
  groupIdMin: Int
  groupIdSum: Int
  groupIdType(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  roleIdAvg: Int
  roleIdCount: Int
  roleIdMax: Int
  roleIdMin: Int
  roleIdSum: Int
  roleIdType(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], groupRole: GroupRoleExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleComposite: RoleCompositeExpression, rolePermission: RolePermissionExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type GroupRoleConnection {
  edges: [GroupRoleEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input GroupRoleConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleExpression]
  first: Int
  groupBy: [String!]
  groupId: IntExpression
  groupIdType: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupRoleOrderBy
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupRoleConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleExpression]
  first: Int
  groupBy: [String!]
  groupId: IntExpression
  groupIdType: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupRoleOrderBy
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type GroupRoleEdge {
  cursor: ID
  node: GroupRole
}

input GroupRoleExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleExpression]
  groupId: IntExpression
  groupIdType: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupRoleInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  groupId: Int
  groupIdType: GroupInput
  id: ID
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  roleIdType: RoleInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: GroupRoleExpression
}

input GroupRoleListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  groupId: Int
  groupIdType: GroupInput
  id: ID
  isDeprecated: Boolean
  list: [GroupRoleInput]
  realmId: Int
  roleId: Int
  roleIdType: RoleInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: GroupRoleExpression
}

input GroupRoleListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleExpression]
  first: Int
  groupBy: [String!]
  groupId: IntExpression
  groupIdType: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupRoleOrderBy
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupRoleListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleExpression]
  first: Int
  groupBy: [String!]
  groupId: IntExpression
  groupIdType: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: GroupRoleOrderBy
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupRoleMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  groupId: Int
  groupIdType: GroupInput
  id: ID
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  roleIdType: RoleInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: GroupRoleExpression
}

input GroupRoleOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  groupId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  roleId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input GroupRoleQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleExpression]
  groupBy: [String!]
  groupId: IntExpression
  groupIdType: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupRoleSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleExpression]
  groupBy: [String!]
  groupId: IntExpression
  groupIdType: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deep: IntExpression
  description: StringExpression
  exs: [GroupExpression]
  groupBy: [String!]
  groupRole: GroupRoleExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  parent: GroupExpression
  parentId: StringExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  users: UserExpression
  version: IntExpression
}

input IDExpression {
  in: [ID]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: ID
}

input IntExpression {
  in: [Int]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: Int
}

input Invoke {
  className: String
  methodName: String
  parameters: [InvokeParameter]
  returnClassName: String
  thrownTypes: [String]
}

input InvokeParameter {
  className: String
  name: String
}

"""营销任务"""
type MarketingObjective implements Meta {
  """年度毛利指标"""
  annualGrossProfitTarget: Float
  annualGrossProfitTargetAvg: Float
  annualGrossProfitTargetCount: Int
  annualGrossProfitTargetMax: Float
  annualGrossProfitTargetMin: Float
  annualGrossProfitTargetSum: Float

  """备注"""
  annualNetProfitTarget: Float
  annualNetProfitTargetAvg: Float
  annualNetProfitTargetCount: Int
  annualNetProfitTargetMax: Float
  annualNetProfitTargetMin: Float
  annualNetProfitTargetSum: Float

  """年度收入指标"""
  annualRevenueTarget: Float
  annualRevenueTargetAvg: Float
  annualRevenueTargetCount: Int
  annualRevenueTargetMax: Float
  annualRevenueTargetMin: Float
  annualRevenueTargetSum: Float
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """月度目标"""
  monthlyMarketingObjectives(after: ID, before: ID, first: Int, groupBy: [String!], id: StringExpression, last: Int, month: IntExpression, monthlyGrossProfitTarget: FloatExpression, monthlyNetProfitTarget: FloatExpression, monthlyRevenueTarget: FloatExpression, notes: StringExpression, offset: Int, orderBy: MonthlyMarketingObjectiveOrderBy): [MonthlyMarketingObjective!]
  monthlyMarketingObjectivesAggregate(first: Int, groupBy: [String!], id: StringExpression, last: Int, month: IntExpression, monthlyGrossProfitTarget: FloatExpression, monthlyNetProfitTarget: FloatExpression, monthlyRevenueTarget: FloatExpression, notes: StringExpression, offset: Int, orderBy: MonthlyMarketingObjectiveOrderBy): MonthlyMarketingObjective
  monthlyMarketingObjectivesConnection(after: ID, before: ID, first: Int, groupBy: [String!], id: StringExpression, last: Int, month: IntExpression, monthlyGrossProfitTarget: FloatExpression, monthlyNetProfitTarget: FloatExpression, monthlyRevenueTarget: FloatExpression, notes: StringExpression, offset: Int, orderBy: MonthlyMarketingObjectiveOrderBy): MonthlyMarketingObjectiveConnection
  monthlyTargetId: Int
  monthlyTargetIdAvg: Int
  monthlyTargetIdCount: Int
  monthlyTargetIdMax: Int
  monthlyTargetIdMin: Int
  monthlyTargetIdSum: Int

  """备注"""
  notes: String
  notesCount: Int
  notesMax: String
  notesMin: String

  """人员"""
  personnel(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): User!
  personnelId: Int
  personnelIdAvg: Int
  personnelIdCount: Int
  personnelIdMax: Int
  personnelIdMin: Int
  personnelIdSum: Int
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type MarketingObjectiveConnection {
  edges: [MarketingObjectiveEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input MarketingObjectiveConnectionQueryArguments {
  after: ID
  annualGrossProfitTarget: FloatExpression
  annualNetProfitTarget: FloatExpression
  annualRevenueTarget: FloatExpression
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MarketingObjectiveExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  monthlyMarketingObjectives: MonthlyMarketingObjectiveExpression
  monthlyTargetId: IntExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: MarketingObjectiveOrderBy
  personnel: UserExpression
  personnelId: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input MarketingObjectiveConnectionSubscriptionArguments {
  after: ID
  annualGrossProfitTarget: FloatExpression
  annualNetProfitTarget: FloatExpression
  annualRevenueTarget: FloatExpression
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MarketingObjectiveExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  monthlyMarketingObjectives: MonthlyMarketingObjectiveExpression
  monthlyTargetId: IntExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: MarketingObjectiveOrderBy
  personnel: UserExpression
  personnelId: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type MarketingObjectiveEdge {
  cursor: ID
  node: MarketingObjective
}

input MarketingObjectiveExpression {
  annualGrossProfitTarget: FloatExpression
  annualNetProfitTarget: FloatExpression
  annualRevenueTarget: FloatExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MarketingObjectiveExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  monthlyMarketingObjectives: MonthlyMarketingObjectiveExpression
  monthlyTargetId: IntExpression
  not: Boolean = false
  notes: StringExpression
  personnel: UserExpression
  personnelId: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input MarketingObjectiveInput {
  annualGrossProfitTarget: Float
  annualNetProfitTarget: Float
  annualRevenueTarget: Float
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  monthlyMarketingObjectives: [MonthlyMarketingObjectiveInput]
  monthlyTargetId: Int
  notes: String
  personnel: UserInput
  personnelId: Int
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: MarketingObjectiveExpression
}

input MarketingObjectiveListMutationArguments {
  annualGrossProfitTarget: Float
  annualNetProfitTarget: Float
  annualRevenueTarget: Float
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  list: [MarketingObjectiveInput]
  monthlyMarketingObjectives: [MonthlyMarketingObjectiveInput]
  monthlyTargetId: Int
  notes: String
  personnel: UserInput
  personnelId: Int
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: MarketingObjectiveExpression
}

input MarketingObjectiveListQueryArguments {
  after: ID
  annualGrossProfitTarget: FloatExpression
  annualNetProfitTarget: FloatExpression
  annualRevenueTarget: FloatExpression
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MarketingObjectiveExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  monthlyMarketingObjectives: MonthlyMarketingObjectiveExpression
  monthlyTargetId: IntExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: MarketingObjectiveOrderBy
  personnel: UserExpression
  personnelId: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input MarketingObjectiveListSubscriptionArguments {
  after: ID
  annualGrossProfitTarget: FloatExpression
  annualNetProfitTarget: FloatExpression
  annualRevenueTarget: FloatExpression
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MarketingObjectiveExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  monthlyMarketingObjectives: MonthlyMarketingObjectiveExpression
  monthlyTargetId: IntExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: MarketingObjectiveOrderBy
  personnel: UserExpression
  personnelId: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input MarketingObjectiveMutationArguments {
  annualGrossProfitTarget: Float
  annualNetProfitTarget: Float
  annualRevenueTarget: Float
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  monthlyMarketingObjectives: [MonthlyMarketingObjectiveInput]
  monthlyTargetId: Int
  notes: String
  personnel: UserInput
  personnelId: Int
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: MarketingObjectiveExpression
}

input MarketingObjectiveOrderBy {
  annualGrossProfitTarget: Sort
  annualNetProfitTarget: Sort
  annualRevenueTarget: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  monthlyTargetId: Sort
  notes: Sort
  personnelId: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input MarketingObjectiveQueryArguments {
  annualGrossProfitTarget: FloatExpression
  annualNetProfitTarget: FloatExpression
  annualRevenueTarget: FloatExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MarketingObjectiveExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  monthlyMarketingObjectives: MonthlyMarketingObjectiveExpression
  monthlyTargetId: IntExpression
  not: Boolean = false
  notes: StringExpression
  personnel: UserExpression
  personnelId: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input MarketingObjectiveSubscriptionArguments {
  annualGrossProfitTarget: FloatExpression
  annualNetProfitTarget: FloatExpression
  annualRevenueTarget: FloatExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MarketingObjectiveExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  monthlyMarketingObjectives: MonthlyMarketingObjectiveExpression
  monthlyTargetId: IntExpression
  not: Boolean = false
  notes: StringExpression
  personnel: UserExpression
  personnelId: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

interface Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  isDeprecated: Boolean
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

input MetaExpression {
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
}

input MetaInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

"""月度财报"""
type MonthlyFinancialReport implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """毛利"""
  grossProfit: Float
  grossProfitAvg: Float
  grossProfitCount: Int
  grossProfitMax: Float
  grossProfitMin: Float
  grossProfitSum: Float

  """公司"""
  group(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group
  groupId: Int
  groupIdAvg: Int
  groupIdCount: Int
  groupIdMax: Int
  groupIdMin: Int
  groupIdSum: Int

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """月份"""
  month: Int!
  monthAvg: Int
  monthCount: Int
  monthMax: Int
  monthMin: Int
  monthSum: Int

  """净利"""
  netProfit: Float
  netProfitAvg: Float
  netProfitCount: Int
  netProfitMax: Float
  netProfitMin: Float
  netProfitSum: Float

  """管理费用"""
  operatingExpenses: Float
  operatingExpensesAvg: Float
  operatingExpensesCount: Int
  operatingExpensesMax: Float
  operatingExpensesMin: Float
  operatingExpensesSum: Float

  """上站成本"""
  pickupToStationCost: Float
  pickupToStationCostAvg: Float
  pickupToStationCostCount: Int
  pickupToStationCostMax: Float
  pickupToStationCostMin: Float
  pickupToStationCostSum: Float

  """上站应收"""
  pickupToStationIncome: Float
  pickupToStationIncomeAvg: Float
  pickupToStationIncomeCount: Int
  pickupToStationIncomeMax: Float
  pickupToStationIncomeMin: Float
  pickupToStationIncomeSum: Float

  """港口成本"""
  portCost: Float
  portCostAvg: Float
  portCostCount: Int
  portCostMax: Float
  portCostMin: Float
  portCostSum: Float

  """铁路成本"""
  railwayCost: Float
  railwayCostAvg: Float
  railwayCostCount: Int
  railwayCostMax: Float
  railwayCostMin: Float
  railwayCostSum: Float

  """铁路应收"""
  railwayIncome: Float
  railwayIncomeAvg: Float
  railwayIncomeCount: Int
  railwayIncomeMax: Float
  railwayIncomeMin: Float
  railwayIncomeSum: Float

  """下站成本"""
  railwayToDeliveryCost: Float
  railwayToDeliveryCostAvg: Float
  railwayToDeliveryCostCount: Int
  railwayToDeliveryCostMax: Float
  railwayToDeliveryCostMin: Float
  railwayToDeliveryCostSum: Float

  """下站应收"""
  railwayToDeliveryIncome: Float
  railwayToDeliveryIncomeAvg: Float
  railwayToDeliveryIncomeCount: Int
  railwayToDeliveryIncomeMax: Float
  railwayToDeliveryIncomeMin: Float
  railwayToDeliveryIncomeSum: Float
  realmId: Int

  """仓储成本"""
  storageCost: Float
  storageCostAvg: Float
  storageCostCount: Int
  storageCostMax: Float
  storageCostMin: Float
  storageCostSum: Float

  """成本合计"""
  totalCost: Float
  totalCostAvg: Float
  totalCostCount: Int
  totalCostMax: Float
  totalCostMin: Float
  totalCostSum: Float

  """应收合计"""
  totalIncome: Float
  totalIncomeAvg: Float
  totalIncomeCount: Int
  totalIncomeMax: Float
  totalIncomeMin: Float
  totalIncomeSum: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int

  """年份"""
  year: Int!
  yearAvg: Int
  yearCount: Int
  yearMax: Int
  yearMin: Int
  yearSum: Int
}

type MonthlyFinancialReportConnection {
  edges: [MonthlyFinancialReportEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input MonthlyFinancialReportConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MonthlyFinancialReportExpression]
  first: Int
  grossProfit: FloatExpression
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  month: IntExpression
  netProfit: FloatExpression
  not: Boolean = false
  offset: Int
  operatingExpenses: FloatExpression
  orderBy: MonthlyFinancialReportOrderBy
  pickupToStationCost: FloatExpression
  pickupToStationIncome: FloatExpression
  portCost: FloatExpression
  railwayCost: FloatExpression
  railwayIncome: FloatExpression
  railwayToDeliveryCost: FloatExpression
  railwayToDeliveryIncome: FloatExpression
  realmId: IntExpression
  storageCost: FloatExpression
  totalCost: FloatExpression
  totalIncome: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

input MonthlyFinancialReportConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MonthlyFinancialReportExpression]
  first: Int
  grossProfit: FloatExpression
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  month: IntExpression
  netProfit: FloatExpression
  not: Boolean = false
  offset: Int
  operatingExpenses: FloatExpression
  orderBy: MonthlyFinancialReportOrderBy
  pickupToStationCost: FloatExpression
  pickupToStationIncome: FloatExpression
  portCost: FloatExpression
  railwayCost: FloatExpression
  railwayIncome: FloatExpression
  railwayToDeliveryCost: FloatExpression
  railwayToDeliveryIncome: FloatExpression
  realmId: IntExpression
  storageCost: FloatExpression
  totalCost: FloatExpression
  totalIncome: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

type MonthlyFinancialReportEdge {
  cursor: ID
  node: MonthlyFinancialReport
}

input MonthlyFinancialReportExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MonthlyFinancialReportExpression]
  grossProfit: FloatExpression
  group: GroupExpression
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  month: IntExpression
  netProfit: FloatExpression
  not: Boolean = false
  operatingExpenses: FloatExpression
  pickupToStationCost: FloatExpression
  pickupToStationIncome: FloatExpression
  portCost: FloatExpression
  railwayCost: FloatExpression
  railwayIncome: FloatExpression
  railwayToDeliveryCost: FloatExpression
  railwayToDeliveryIncome: FloatExpression
  realmId: IntExpression
  storageCost: FloatExpression
  totalCost: FloatExpression
  totalIncome: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

input MonthlyFinancialReportInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  grossProfit: Float
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  month: Int
  netProfit: Float
  operatingExpenses: Float
  pickupToStationCost: Float
  pickupToStationIncome: Float
  portCost: Float
  railwayCost: Float
  railwayIncome: Float
  railwayToDeliveryCost: Float
  railwayToDeliveryIncome: Float
  realmId: Int
  storageCost: Float
  totalCost: Float
  totalIncome: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: MonthlyFinancialReportExpression
  year: Int
}

input MonthlyFinancialReportListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  grossProfit: Float
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  list: [MonthlyFinancialReportInput]
  month: Int
  netProfit: Float
  operatingExpenses: Float
  pickupToStationCost: Float
  pickupToStationIncome: Float
  portCost: Float
  railwayCost: Float
  railwayIncome: Float
  railwayToDeliveryCost: Float
  railwayToDeliveryIncome: Float
  realmId: Int
  storageCost: Float
  totalCost: Float
  totalIncome: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: MonthlyFinancialReportExpression
  year: Int
}

input MonthlyFinancialReportListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MonthlyFinancialReportExpression]
  first: Int
  grossProfit: FloatExpression
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  month: IntExpression
  netProfit: FloatExpression
  not: Boolean = false
  offset: Int
  operatingExpenses: FloatExpression
  orderBy: MonthlyFinancialReportOrderBy
  pickupToStationCost: FloatExpression
  pickupToStationIncome: FloatExpression
  portCost: FloatExpression
  railwayCost: FloatExpression
  railwayIncome: FloatExpression
  railwayToDeliveryCost: FloatExpression
  railwayToDeliveryIncome: FloatExpression
  realmId: IntExpression
  storageCost: FloatExpression
  totalCost: FloatExpression
  totalIncome: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

input MonthlyFinancialReportListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MonthlyFinancialReportExpression]
  first: Int
  grossProfit: FloatExpression
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  month: IntExpression
  netProfit: FloatExpression
  not: Boolean = false
  offset: Int
  operatingExpenses: FloatExpression
  orderBy: MonthlyFinancialReportOrderBy
  pickupToStationCost: FloatExpression
  pickupToStationIncome: FloatExpression
  portCost: FloatExpression
  railwayCost: FloatExpression
  railwayIncome: FloatExpression
  railwayToDeliveryCost: FloatExpression
  railwayToDeliveryIncome: FloatExpression
  realmId: IntExpression
  storageCost: FloatExpression
  totalCost: FloatExpression
  totalIncome: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

input MonthlyFinancialReportMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  grossProfit: Float
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  month: Int
  netProfit: Float
  operatingExpenses: Float
  pickupToStationCost: Float
  pickupToStationIncome: Float
  portCost: Float
  railwayCost: Float
  railwayIncome: Float
  railwayToDeliveryCost: Float
  railwayToDeliveryIncome: Float
  realmId: Int
  storageCost: Float
  totalCost: Float
  totalIncome: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: MonthlyFinancialReportExpression
  year: Int
}

input MonthlyFinancialReportOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  grossProfit: Sort
  groupId: Sort
  id: Sort
  isDeprecated: Sort
  month: Sort
  netProfit: Sort
  operatingExpenses: Sort
  pickupToStationCost: Sort
  pickupToStationIncome: Sort
  portCost: Sort
  railwayCost: Sort
  railwayIncome: Sort
  railwayToDeliveryCost: Sort
  railwayToDeliveryIncome: Sort
  realmId: Sort
  storageCost: Sort
  totalCost: Sort
  totalIncome: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
  year: Sort
}

input MonthlyFinancialReportQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MonthlyFinancialReportExpression]
  grossProfit: FloatExpression
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  month: IntExpression
  netProfit: FloatExpression
  not: Boolean = false
  operatingExpenses: FloatExpression
  pickupToStationCost: FloatExpression
  pickupToStationIncome: FloatExpression
  portCost: FloatExpression
  railwayCost: FloatExpression
  railwayIncome: FloatExpression
  railwayToDeliveryCost: FloatExpression
  railwayToDeliveryIncome: FloatExpression
  realmId: IntExpression
  storageCost: FloatExpression
  totalCost: FloatExpression
  totalIncome: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

input MonthlyFinancialReportSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MonthlyFinancialReportExpression]
  grossProfit: FloatExpression
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  month: IntExpression
  netProfit: FloatExpression
  not: Boolean = false
  operatingExpenses: FloatExpression
  pickupToStationCost: FloatExpression
  pickupToStationIncome: FloatExpression
  portCost: FloatExpression
  railwayCost: FloatExpression
  railwayIncome: FloatExpression
  railwayToDeliveryCost: FloatExpression
  railwayToDeliveryIncome: FloatExpression
  realmId: IntExpression
  storageCost: FloatExpression
  totalCost: FloatExpression
  totalIncome: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

"""营销月度目标"""
type MonthlyMarketingObjective implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """月份"""
  month: Int
  monthAvg: Int
  monthCount: Int
  monthMax: Int
  monthMin: Int
  monthSum: Int

  """月度毛利指标"""
  monthlyGrossProfitTarget: Float
  monthlyGrossProfitTargetAvg: Float
  monthlyGrossProfitTargetCount: Int
  monthlyGrossProfitTargetMax: Float
  monthlyGrossProfitTargetMin: Float
  monthlyGrossProfitTargetSum: Float

  """月度净利指标"""
  monthlyNetProfitTarget: Float
  monthlyNetProfitTargetAvg: Float
  monthlyNetProfitTargetCount: Int
  monthlyNetProfitTargetMax: Float
  monthlyNetProfitTargetMin: Float
  monthlyNetProfitTargetSum: Float

  """月度收入指标"""
  monthlyRevenueTarget: Float
  monthlyRevenueTargetAvg: Float
  monthlyRevenueTargetCount: Int
  monthlyRevenueTargetMax: Float
  monthlyRevenueTargetMin: Float
  monthlyRevenueTargetSum: Float

  """备注"""
  notes: String
  notesCount: Int
  notesMax: String
  notesMin: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type MonthlyMarketingObjectiveConnection {
  edges: [MonthlyMarketingObjectiveEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input MonthlyMarketingObjectiveConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MonthlyMarketingObjectiveExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  month: IntExpression
  monthlyGrossProfitTarget: FloatExpression
  monthlyNetProfitTarget: FloatExpression
  monthlyRevenueTarget: FloatExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: MonthlyMarketingObjectiveOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input MonthlyMarketingObjectiveConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MonthlyMarketingObjectiveExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  month: IntExpression
  monthlyGrossProfitTarget: FloatExpression
  monthlyNetProfitTarget: FloatExpression
  monthlyRevenueTarget: FloatExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: MonthlyMarketingObjectiveOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type MonthlyMarketingObjectiveEdge {
  cursor: ID
  node: MonthlyMarketingObjective
}

input MonthlyMarketingObjectiveExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MonthlyMarketingObjectiveExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  month: IntExpression
  monthlyGrossProfitTarget: FloatExpression
  monthlyNetProfitTarget: FloatExpression
  monthlyRevenueTarget: FloatExpression
  not: Boolean = false
  notes: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input MonthlyMarketingObjectiveInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  month: Int
  monthlyGrossProfitTarget: Float
  monthlyNetProfitTarget: Float
  monthlyRevenueTarget: Float
  notes: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: MonthlyMarketingObjectiveExpression
}

input MonthlyMarketingObjectiveListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  list: [MonthlyMarketingObjectiveInput]
  month: Int
  monthlyGrossProfitTarget: Float
  monthlyNetProfitTarget: Float
  monthlyRevenueTarget: Float
  notes: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: MonthlyMarketingObjectiveExpression
}

input MonthlyMarketingObjectiveListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MonthlyMarketingObjectiveExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  month: IntExpression
  monthlyGrossProfitTarget: FloatExpression
  monthlyNetProfitTarget: FloatExpression
  monthlyRevenueTarget: FloatExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: MonthlyMarketingObjectiveOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input MonthlyMarketingObjectiveListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MonthlyMarketingObjectiveExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  month: IntExpression
  monthlyGrossProfitTarget: FloatExpression
  monthlyNetProfitTarget: FloatExpression
  monthlyRevenueTarget: FloatExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: MonthlyMarketingObjectiveOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input MonthlyMarketingObjectiveMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  month: Int
  monthlyGrossProfitTarget: Float
  monthlyNetProfitTarget: Float
  monthlyRevenueTarget: Float
  notes: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: MonthlyMarketingObjectiveExpression
}

input MonthlyMarketingObjectiveOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  month: Sort
  monthlyGrossProfitTarget: Sort
  monthlyNetProfitTarget: Sort
  monthlyRevenueTarget: Sort
  notes: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input MonthlyMarketingObjectiveQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MonthlyMarketingObjectiveExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  month: IntExpression
  monthlyGrossProfitTarget: FloatExpression
  monthlyNetProfitTarget: FloatExpression
  monthlyRevenueTarget: FloatExpression
  not: Boolean = false
  notes: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input MonthlyMarketingObjectiveSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [MonthlyMarketingObjectiveExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  month: IntExpression
  monthlyGrossProfitTarget: FloatExpression
  monthlyNetProfitTarget: FloatExpression
  monthlyRevenueTarget: FloatExpression
  not: Boolean = false
  notes: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type Mutation implements Meta {
  annualFinancialReport(createGroupId: String, createTime: Timestamp, createUserId: String, grossProfit: Float, group: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, netProfit: Float, operatingExpenses: Float, pickupToStationCost: Float, pickupToStationIncome: Float, portCost: Float, railwayCost: Float, railwayIncome: Float, railwayToDeliveryCost: Float, railwayToDeliveryIncome: Float, realmId: Int, storageCost: Float, totalCost: Float, totalIncome: Float, updateTime: Timestamp, updateUserId: String, version: Int, where: AnnualFinancialReportExpression, year: Int): AnnualFinancialReport
  annualFinancialReportList(createGroupId: String, createTime: Timestamp, createUserId: String, grossProfit: Float, group: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, list: [AnnualFinancialReportInput], netProfit: Float, operatingExpenses: Float, pickupToStationCost: Float, pickupToStationIncome: Float, portCost: Float, railwayCost: Float, railwayIncome: Float, railwayToDeliveryCost: Float, railwayToDeliveryIncome: Float, realmId: Int, storageCost: Float, totalCost: Float, totalIncome: Float, updateTime: Timestamp, updateUserId: String, version: Int, where: AnnualFinancialReportExpression, year: Int): [AnnualFinancialReport]
  cargoItem(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, exceptionCount: Int, exceptionDescription: String, id: ID, isDeprecated: Boolean, model: String, name: String, notes: String, order: OrderInput, orderId: Int, packaging: String, quantity: Int, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, volume: Float, weight: Float, where: CargoItemExpression): CargoItem
  cargoItemList(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, exceptionCount: Int, exceptionDescription: String, id: ID, isDeprecated: Boolean, list: [CargoItemInput], model: String, name: String, notes: String, order: OrderInput, orderId: Int, packaging: String, quantity: Int, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, volume: Float, weight: Float, where: CargoItemExpression): [CargoItem]
  chargeItem(amount: Float, chargeType: ChargeType, createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, isDeprecated: Boolean, name: String, notes: String, orderId: String, realmId: Int, taxAmount: Float, updateTime: Timestamp, updateUserId: String, version: Int, where: ChargeItemExpression): ChargeItem
  chargeItemList(amount: Float, chargeType: ChargeType, createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, isDeprecated: Boolean, list: [ChargeItemInput], name: String, notes: String, orderId: String, realmId: Int, taxAmount: Float, updateTime: Timestamp, updateUserId: String, version: Int, where: ChargeItemExpression): [ChargeItem]
  contactInfo(address: String, createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, isDeprecated: Boolean, name: String, phone: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: ContactInfoExpression): ContactInfo
  contactInfoList(address: String, createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, isDeprecated: Boolean, list: [ContactInfoInput], name: String, phone: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: ContactInfoExpression): [ContactInfo]
  contract(additionalContent: String, businessAffiliate: GroupInput, businessAffiliateId: Int, businessScale: Float, businessType: BusinessType, code: String, createGroupId: String, createTime: Timestamp, createUserId: String, customer: CustomerInput, customerId: Int, description: String, effectiveDate: Timestamp, expirationDate: Timestamp, filingDepartment: GroupInput, filingDepartmentId: Int, id: ID, isDeprecated: Boolean, name: String, notes: String, performanceStatus: ContractStatus, pricingUnit: String, realmId: Int, signatoryCount: Int, signingCompany: GroupInput, signingCompanyId: Int, transportationMode: TransportationMode, unitPrice: PricingUnit, updateTime: Timestamp, updateUserId: String, version: Int, where: ContractExpression): Contract
  contractList(additionalContent: String, businessAffiliate: GroupInput, businessAffiliateId: Int, businessScale: Float, businessType: BusinessType, code: String, createGroupId: String, createTime: Timestamp, createUserId: String, customer: CustomerInput, customerId: Int, description: String, effectiveDate: Timestamp, expirationDate: Timestamp, filingDepartment: GroupInput, filingDepartmentId: Int, id: ID, isDeprecated: Boolean, list: [ContractInput], name: String, notes: String, performanceStatus: ContractStatus, pricingUnit: String, realmId: Int, signatoryCount: Int, signingCompany: GroupInput, signingCompanyId: Int, transportationMode: TransportationMode, unitPrice: PricingUnit, updateTime: Timestamp, updateUserId: String, version: Int, where: ContractExpression): [Contract]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  customer(address: String, city: String, code: String, contactPerson: String, createGroupId: String, createTime: Timestamp, createUserId: String, description: String, district: String, email: String, fax: String, group: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, name: String, notes: String, phoneNumber: String, postalCode: String, province: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: CustomerExpression): Customer
  customerList(address: String, city: String, code: String, contactPerson: String, createGroupId: String, createTime: Timestamp, createUserId: String, description: String, district: String, email: String, fax: String, group: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, list: [CustomerInput], name: String, notes: String, phoneNumber: String, postalCode: String, province: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: CustomerExpression): [Customer]
  deliveryWaybill(arrivalStation: TrainStationInput, arrivalStationId: Int, arrivalTime: Timestamp, cargoItems: [CargoItemInput], contactPerson: String, createGroupId: String, createTime: Timestamp, createUserId: String, deliveryAddress: String, deliveryTime: Timestamp, group: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, licensePlate: String, paymentItems: [PaymentItemInput], phoneNumber: String, realmId: Int, supplier: SupplierInput, supplierId: Int, updateTime: Timestamp, updateUserId: String, version: Int, waybillNumber: String, where: DeliveryWaybillExpression): DeliveryWaybill
  deliveryWaybillList(arrivalStation: TrainStationInput, arrivalStationId: Int, arrivalTime: Timestamp, cargoItems: [CargoItemInput], contactPerson: String, createGroupId: String, createTime: Timestamp, createUserId: String, deliveryAddress: String, deliveryTime: Timestamp, group: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, licensePlate: String, list: [DeliveryWaybillInput], paymentItems: [PaymentItemInput], phoneNumber: String, realmId: Int, supplier: SupplierInput, supplierId: Int, updateTime: Timestamp, updateUserId: String, version: Int, waybillNumber: String, where: DeliveryWaybillExpression): [DeliveryWaybill]
  employeeProfile(address: String, birthDate: String, createGroupId: String, createTime: Timestamp, createUserId: String, emergencyContact: String, emergencyContactPhone: String, employee: UserInput, employeeId: Int, gender: Gender, hireDate: String, id: ID, isDeprecated: Boolean, notes: String, position: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: EmployeeProfileExpression): EmployeeProfile
  employeeProfileList(address: String, birthDate: String, createGroupId: String, createTime: Timestamp, createUserId: String, emergencyContact: String, emergencyContactPhone: String, employee: UserInput, employeeId: Int, gender: Gender, hireDate: String, id: ID, isDeprecated: Boolean, list: [EmployeeProfileInput], notes: String, position: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: EmployeeProfileExpression): [EmployeeProfile]
  group(createGroupId: String, createTime: Timestamp, createUserId: String, deep: Int, description: String, groupRole: [GroupRoleInput], id: ID, isDeprecated: Boolean, name: String, parent: GroupInput, parentId: String, path: String, realm: RealmInput, realmId: Int, roles: [RoleInput], subGroups: [GroupInput], updateTime: Timestamp, updateUserId: String, userGroup: [UserGroupInput], users: [UserInput], version: Int, where: GroupExpression): Group
  groupList(createGroupId: String, createTime: Timestamp, createUserId: String, deep: Int, description: String, groupRole: [GroupRoleInput], id: ID, isDeprecated: Boolean, list: [GroupInput], name: String, parent: GroupInput, parentId: String, path: String, realm: RealmInput, realmId: Int, roles: [RoleInput], subGroups: [GroupInput], updateTime: Timestamp, updateUserId: String, userGroup: [UserGroupInput], users: [UserInput], version: Int, where: GroupExpression): [Group]
  groupRole(createGroupId: String, createTime: Timestamp, createUserId: String, groupId: Int, groupIdType: GroupInput, id: ID, isDeprecated: Boolean, realmId: Int, roleId: Int, roleIdType: RoleInput, updateTime: Timestamp, updateUserId: String, version: Int, where: GroupRoleExpression): GroupRole
  groupRoleList(createGroupId: String, createTime: Timestamp, createUserId: String, groupId: Int, groupIdType: GroupInput, id: ID, isDeprecated: Boolean, list: [GroupRoleInput], realmId: Int, roleId: Int, roleIdType: RoleInput, updateTime: Timestamp, updateUserId: String, version: Int, where: GroupRoleExpression): [GroupRole]
  isDeprecated: Boolean
  login(login: String!, password: String!): String
  marketingObjective(annualGrossProfitTarget: Float, annualNetProfitTarget: Float, annualRevenueTarget: Float, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, monthlyMarketingObjectives: [MonthlyMarketingObjectiveInput], monthlyTargetId: Int, notes: String, personnel: UserInput, personnelId: Int, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: MarketingObjectiveExpression): MarketingObjective
  marketingObjectiveList(annualGrossProfitTarget: Float, annualNetProfitTarget: Float, annualRevenueTarget: Float, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, list: [MarketingObjectiveInput], monthlyMarketingObjectives: [MonthlyMarketingObjectiveInput], monthlyTargetId: Int, notes: String, personnel: UserInput, personnelId: Int, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: MarketingObjectiveExpression): [MarketingObjective]
  monthlyFinancialReport(createGroupId: String, createTime: Timestamp, createUserId: String, grossProfit: Float, group: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, month: Int, netProfit: Float, operatingExpenses: Float, pickupToStationCost: Float, pickupToStationIncome: Float, portCost: Float, railwayCost: Float, railwayIncome: Float, railwayToDeliveryCost: Float, railwayToDeliveryIncome: Float, realmId: Int, storageCost: Float, totalCost: Float, totalIncome: Float, updateTime: Timestamp, updateUserId: String, version: Int, where: MonthlyFinancialReportExpression, year: Int): MonthlyFinancialReport
  monthlyFinancialReportList(createGroupId: String, createTime: Timestamp, createUserId: String, grossProfit: Float, group: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, list: [MonthlyFinancialReportInput], month: Int, netProfit: Float, operatingExpenses: Float, pickupToStationCost: Float, pickupToStationIncome: Float, portCost: Float, railwayCost: Float, railwayIncome: Float, railwayToDeliveryCost: Float, railwayToDeliveryIncome: Float, realmId: Int, storageCost: Float, totalCost: Float, totalIncome: Float, updateTime: Timestamp, updateUserId: String, version: Int, where: MonthlyFinancialReportExpression, year: Int): [MonthlyFinancialReport]
  monthlyMarketingObjective(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, month: Int, monthlyGrossProfitTarget: Float, monthlyNetProfitTarget: Float, monthlyRevenueTarget: Float, notes: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: MonthlyMarketingObjectiveExpression): MonthlyMarketingObjective
  monthlyMarketingObjectiveList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, list: [MonthlyMarketingObjectiveInput], month: Int, monthlyGrossProfitTarget: Float, monthlyNetProfitTarget: Float, monthlyRevenueTarget: Float, notes: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: MonthlyMarketingObjectiveExpression): [MonthlyMarketingObjective]
  order(agent: UserInput, agentId: Int, arrivalStation: TrainStationInput, arrivalStationId: Int, businessType: BusinessType, cargoItems: [CargoItemInput], chargeItems: [ChargeItemInput], consignee: ContactInfoInput, consigneeId: Int, createGroupId: String, createTime: Timestamp, createUserId: String, customer: CustomerInput, customerId: Int, departureStation: TrainStationInput, departureStationId: Int, group: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, notes: String, orderDate: Timestamp, orderNumber: String, plannedArrivalTime: Timestamp, plannedDepartureTime: Timestamp, project: ProjectInput, projectId: Int, realmId: Int, serviceType: ServiceType, shipper: ContactInfoInput, shipperId: Int, transportationMode: TransportationMode, updateTime: Timestamp, updateUserId: String, version: Int, where: OrderExpression): Order
  orderList(agent: UserInput, agentId: Int, arrivalStation: TrainStationInput, arrivalStationId: Int, businessType: BusinessType, cargoItems: [CargoItemInput], chargeItems: [ChargeItemInput], consignee: ContactInfoInput, consigneeId: Int, createGroupId: String, createTime: Timestamp, createUserId: String, customer: CustomerInput, customerId: Int, departureStation: TrainStationInput, departureStationId: Int, group: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, list: [OrderInput], notes: String, orderDate: Timestamp, orderNumber: String, plannedArrivalTime: Timestamp, plannedDepartureTime: Timestamp, project: ProjectInput, projectId: Int, realmId: Int, serviceType: ServiceType, shipper: ContactInfoInput, shipperId: Int, transportationMode: TransportationMode, updateTime: Timestamp, updateUserId: String, version: Int, where: OrderExpression): [Order]
  paymentItem(amount: Float, createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, invoiceNumber: String, isDeprecated: Boolean, name: String, notes: String, paymentType: ChargeType, realmId: Int, taxAmount: Float, updateTime: Timestamp, updateUserId: String, version: Int, waybillId: String, where: PaymentItemExpression): PaymentItem
  paymentItemList(amount: Float, createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, invoiceNumber: String, isDeprecated: Boolean, list: [PaymentItemInput], name: String, notes: String, paymentType: ChargeType, realmId: Int, taxAmount: Float, updateTime: Timestamp, updateUserId: String, version: Int, waybillId: String, where: PaymentItemExpression): [PaymentItem]
  permission(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, field: String, isDeprecated: Boolean, name: ID, permissionType: PermissionType, realm: RealmInput, realmId: Int, rolePermission: [RolePermissionInput], roles: [RoleInput], type: String, updateTime: Timestamp, updateUserId: String, version: Int, where: PermissionExpression): Permission
  permissionList(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, field: String, isDeprecated: Boolean, list: [PermissionInput], name: ID, permissionType: PermissionType, realm: RealmInput, realmId: Int, rolePermission: [RolePermissionInput], roles: [RoleInput], type: String, updateTime: Timestamp, updateUserId: String, version: Int, where: PermissionExpression): [Permission]
  pickupWaybill(cargoItems: [CargoItemInput], contactPerson: String, createGroupId: String, createTime: Timestamp, createUserId: String, departureStation: TrainStationInput, departureStationId: Int, group: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, licensePlate: String, onStationTime: Timestamp, paymentItems: [PaymentItemInput], phoneNumber: String, pickupAddress: String, pickupTime: Timestamp, realmId: Int, supplier: SupplierInput, supplierId: Int, updateTime: Timestamp, updateUserId: String, version: Int, waybillNumber: String, where: PickupWaybillExpression): PickupWaybill
  pickupWaybillList(cargoItems: [CargoItemInput], contactPerson: String, createGroupId: String, createTime: Timestamp, createUserId: String, departureStation: TrainStationInput, departureStationId: Int, group: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, licensePlate: String, list: [PickupWaybillInput], onStationTime: Timestamp, paymentItems: [PaymentItemInput], phoneNumber: String, pickupAddress: String, pickupTime: Timestamp, realmId: Int, supplier: SupplierInput, supplierId: Int, updateTime: Timestamp, updateUserId: String, version: Int, waybillNumber: String, where: PickupWaybillExpression): [PickupWaybill]
  project(arrivalStation: TrainStationInput, arrivalStationId: Int, businessType: BusinessType, code: String, contract: ContractInput, contractId: Int, createGroupId: String, createTime: Timestamp, createUserId: String, customer: CustomerInput, customerId: Int, departureStation: TrainStationInput, departureStationId: Int, description: String, group: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, manager: UserInput, managerId: Int, name: String, notes: String, realmId: Int, serviceType: ServiceType, settlementMethod: SettlementMethod, transportationMode: TransportationMode, updateTime: Timestamp, updateUserId: String, version: Int, where: ProjectExpression): Project
  projectList(arrivalStation: TrainStationInput, arrivalStationId: Int, businessType: BusinessType, code: String, contract: ContractInput, contractId: Int, createGroupId: String, createTime: Timestamp, createUserId: String, customer: CustomerInput, customerId: Int, departureStation: TrainStationInput, departureStationId: Int, description: String, group: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, list: [ProjectInput], manager: UserInput, managerId: Int, name: String, notes: String, realmId: Int, serviceType: ServiceType, settlementMethod: SettlementMethod, transportationMode: TransportationMode, updateTime: Timestamp, updateUserId: String, version: Int, where: ProjectExpression): [Project]
  railwayBureau(code: String, createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, isDeprecated: Boolean, name: String, notes: String, province: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: RailwayBureauExpression): RailwayBureau
  railwayBureauList(code: String, createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, isDeprecated: Boolean, list: [RailwayBureauInput], name: String, notes: String, province: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: RailwayBureauExpression): [RailwayBureau]
  railwayWaybill(arrivalStation: TrainStationInput, arrivalStationId: Int, arrivalTime: Timestamp, cargoItems: [CargoItemInput], contactPerson: String, createGroupId: String, createTime: Timestamp, createUserId: String, departureStation: TrainStationInput, departureStationId: Int, departureTime: Timestamp, group: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, paymentItems: [PaymentItemInput], phoneNumber: String, railwayWaybillTicketNumbers: [RailwayWaybillTicketNumbersInput], railwayWaybillTrainNumbers: [RailwayWaybillTrainNumbersInput], realmId: Int, supplier: SupplierInput, supplierId: Int, ticketNumbers: [String], trainCount: Int, trainNumbers: [String], updateTime: Timestamp, updateUserId: String, version: Int, waybillNumber: String, where: RailwayWaybillExpression): RailwayWaybill
  railwayWaybillList(arrivalStation: TrainStationInput, arrivalStationId: Int, arrivalTime: Timestamp, cargoItems: [CargoItemInput], contactPerson: String, createGroupId: String, createTime: Timestamp, createUserId: String, departureStation: TrainStationInput, departureStationId: Int, departureTime: Timestamp, group: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, list: [RailwayWaybillInput], paymentItems: [PaymentItemInput], phoneNumber: String, railwayWaybillTicketNumbers: [RailwayWaybillTicketNumbersInput], railwayWaybillTrainNumbers: [RailwayWaybillTrainNumbersInput], realmId: Int, supplier: SupplierInput, supplierId: Int, ticketNumbers: [String], trainCount: Int, trainNumbers: [String], updateTime: Timestamp, updateUserId: String, version: Int, waybillNumber: String, where: RailwayWaybillExpression): [RailwayWaybill]
  railwayWaybillTicketNumbers(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, realmId: Int, ticketNumber: String, ticketNumberId: Int, ticketNumberIdType: RailwayWaybillInput, updateTime: Timestamp, updateUserId: String, version: Int, where: RailwayWaybillTicketNumbersExpression): RailwayWaybillTicketNumbers
  railwayWaybillTicketNumbersList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, list: [RailwayWaybillTicketNumbersInput], realmId: Int, ticketNumber: String, ticketNumberId: Int, ticketNumberIdType: RailwayWaybillInput, updateTime: Timestamp, updateUserId: String, version: Int, where: RailwayWaybillTicketNumbersExpression): [RailwayWaybillTicketNumbers]
  railwayWaybillTrainNumbers(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, railwayWaybillId: Int, railwayWaybillIdType: RailwayWaybillInput, realmId: Int, trainNumber: String, updateTime: Timestamp, updateUserId: String, version: Int, where: RailwayWaybillTrainNumbersExpression): RailwayWaybillTrainNumbers
  railwayWaybillTrainNumbersList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, list: [RailwayWaybillTrainNumbersInput], railwayWaybillId: Int, railwayWaybillIdType: RailwayWaybillInput, realmId: Int, trainNumber: String, updateTime: Timestamp, updateUserId: String, version: Int, where: RailwayWaybillTrainNumbersExpression): [RailwayWaybillTrainNumbers]
  realm(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, isDeprecated: Boolean, name: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: RealmExpression): Realm
  realmId: Int
  realmList(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, isDeprecated: Boolean, list: [RealmInput], name: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: RealmExpression): [Realm]
  role(composites: [RoleInput], createGroupId: String, createTime: Timestamp, createUserId: String, description: String, groupRole: [GroupRoleInput], groups: [GroupInput], id: ID, isDeprecated: Boolean, name: String, permissions: [PermissionInput], realm: RealmInput, realmId: Int, roleComposite: [RoleCompositeInput], rolePermission: [RolePermissionInput], updateTime: Timestamp, updateUserId: String, userRole: [UserRoleInput], users: [UserInput], version: Int, where: RoleExpression): Role
  roleComposite(compositeId: Int, compositeIdType: RoleInput, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, realmId: Int, roleId: Int, roleIdType: RoleInput, updateTime: Timestamp, updateUserId: String, version: Int, where: RoleCompositeExpression): RoleComposite
  roleCompositeList(compositeId: Int, compositeIdType: RoleInput, createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, list: [RoleCompositeInput], realmId: Int, roleId: Int, roleIdType: RoleInput, updateTime: Timestamp, updateUserId: String, version: Int, where: RoleCompositeExpression): [RoleComposite]
  roleList(composites: [RoleInput], createGroupId: String, createTime: Timestamp, createUserId: String, description: String, groupRole: [GroupRoleInput], groups: [GroupInput], id: ID, isDeprecated: Boolean, list: [RoleInput], name: String, permissions: [PermissionInput], realm: RealmInput, realmId: Int, roleComposite: [RoleCompositeInput], rolePermission: [RolePermissionInput], updateTime: Timestamp, updateUserId: String, userRole: [UserRoleInput], users: [UserInput], version: Int, where: RoleExpression): [Role]
  rolePermission(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, permissionName: String, permissionNameType: PermissionInput, realmId: Int, roleId: Int, roleIdType: RoleInput, updateTime: Timestamp, updateUserId: String, version: Int, where: RolePermissionExpression): RolePermission
  rolePermissionList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, list: [RolePermissionInput], permissionName: String, permissionNameType: PermissionInput, realmId: Int, roleId: Int, roleIdType: RoleInput, updateTime: Timestamp, updateUserId: String, version: Int, where: RolePermissionExpression): [RolePermission]
  salaryCalculation(basicSalary: Float, bonuses: Float, createGroupId: String, createTime: Timestamp, createUserId: String, deductions: Float, employee: UserInput, employeeId: Int, grossSalary: Float, housingFund: Float, id: ID, isDeprecated: Boolean, month: Int, netSalary: Float, notes: String, otherAllowances: Float, overtimePay: Float, realmId: Int, socialSecurity: Float, tax: Float, updateTime: Timestamp, updateUserId: String, version: Int, where: SalaryCalculationExpression, year: Int): SalaryCalculation
  salaryCalculationList(basicSalary: Float, bonuses: Float, createGroupId: String, createTime: Timestamp, createUserId: String, deductions: Float, employee: UserInput, employeeId: Int, grossSalary: Float, housingFund: Float, id: ID, isDeprecated: Boolean, list: [SalaryCalculationInput], month: Int, netSalary: Float, notes: String, otherAllowances: Float, overtimePay: Float, realmId: Int, socialSecurity: Float, tax: Float, updateTime: Timestamp, updateUserId: String, version: Int, where: SalaryCalculationExpression, year: Int): [SalaryCalculation]
  supplier(address: String, city: String, code: String, contactPerson: String, createGroupId: String, createTime: Timestamp, createUserId: String, description: String, district: String, email: String, fax: String, group: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, name: String, notes: String, phoneNumber: String, postalCode: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: SupplierExpression): Supplier
  supplierList(address: String, city: String, code: String, contactPerson: String, createGroupId: String, createTime: Timestamp, createUserId: String, description: String, district: String, email: String, fax: String, group: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, list: [SupplierInput], name: String, notes: String, phoneNumber: String, postalCode: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: SupplierExpression): [Supplier]
  targetCustomer(challenges: String, connectableResources: String, contactInformation: String, createGroupId: String, createTime: Timestamp, createUserId: String, creditInvestigation: String, decisionMaker: String, description: String, id: ID, isDeprecated: Boolean, logisticsMatching: String, name: String, needsAnalysis: String, notes: String, otherInfluencingFactors: String, productMatching: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: TargetCustomerExpression): TargetCustomer
  targetCustomerList(challenges: String, connectableResources: String, contactInformation: String, createGroupId: String, createTime: Timestamp, createUserId: String, creditInvestigation: String, decisionMaker: String, description: String, id: ID, isDeprecated: Boolean, list: [TargetCustomerInput], logisticsMatching: String, name: String, needsAnalysis: String, notes: String, otherInfluencingFactors: String, productMatching: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: TargetCustomerExpression): [TargetCustomer]
  trainStation(address: String, city: String, code: String, createGroupId: String, createTime: Timestamp, createUserId: String, description: String, district: String, id: ID, isDeprecated: Boolean, name: String, notes: String, province: String, railwayBureau: RailwayBureauInput, railwayBureauId: Int, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: TrainStationExpression): TrainStation
  trainStationList(address: String, city: String, code: String, createGroupId: String, createTime: Timestamp, createUserId: String, description: String, district: String, id: ID, isDeprecated: Boolean, list: [TrainStationInput], name: String, notes: String, province: String, railwayBureau: RailwayBureauInput, railwayBureauId: Int, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: TrainStationExpression): [TrainStation]
  updateTime: Timestamp
  updateUserId: String
  user(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, disable: Boolean, email: String, groups: [GroupInput], hash: String, id: ID, isDeprecated: Boolean, lastName: String, login: String, name: String, phones: [String], realm: RealmInput, realmId: Int, roles: [RoleInput], salt: String, updateTime: Timestamp, updateUserId: String, userGroup: [UserGroupInput], userPhones: [UserPhonesInput], userRole: [UserRoleInput], version: Int, where: UserExpression): User
  userGroup(createGroupId: String, createTime: Timestamp, createUserId: String, groupId: Int, groupIdType: GroupInput, id: ID, isDeprecated: Boolean, realmId: Int, updateTime: Timestamp, updateUserId: String, userId: Int, userIdType: UserInput, version: Int, where: UserGroupExpression): UserGroup
  userGroupList(createGroupId: String, createTime: Timestamp, createUserId: String, groupId: Int, groupIdType: GroupInput, id: ID, isDeprecated: Boolean, list: [UserGroupInput], realmId: Int, updateTime: Timestamp, updateUserId: String, userId: Int, userIdType: UserInput, version: Int, where: UserGroupExpression): [UserGroup]
  userList(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, disable: Boolean, email: String, groups: [GroupInput], hash: String, id: ID, isDeprecated: Boolean, lastName: String, list: [UserInput], login: String, name: String, phones: [String], realm: RealmInput, realmId: Int, roles: [RoleInput], salt: String, updateTime: Timestamp, updateUserId: String, userGroup: [UserGroupInput], userPhones: [UserPhonesInput], userRole: [UserRoleInput], version: Int, where: UserExpression): [User]
  userPhones(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, phone: String, realmId: Int, updateTime: Timestamp, updateUserId: String, userId: Int, userIdType: UserInput, version: Int, where: UserPhonesExpression): UserPhones
  userPhonesList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, list: [UserPhonesInput], phone: String, realmId: Int, updateTime: Timestamp, updateUserId: String, userId: Int, userIdType: UserInput, version: Int, where: UserPhonesExpression): [UserPhones]
  userRole(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, realmId: Int, roleId: Int, roleIdType: RoleInput, updateTime: Timestamp, updateUserId: String, userId: Int, userIdType: UserInput, version: Int, where: UserRoleExpression): UserRole
  userRoleList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, list: [UserRoleInput], realmId: Int, roleId: Int, roleIdType: RoleInput, updateTime: Timestamp, updateUserId: String, userId: Int, userIdType: UserInput, version: Int, where: UserRoleExpression): [UserRole]
  version: Int
}

input Mutation_login_Arguments {
  login: String!
  password: String!
}

interface NamedStruct {
  description: String
  name: String
}

input NamedStructExpression {
  description: StringExpression
  name: StringExpression
}

input NamedStructInput {
  description: String
  name: String
}

enum Operator {
  BT
  EQ
  GT
  GTE
  IN
  LK
  LT
  LTE
  NBT
  NEQ
  NGT
  NGTE
  NIL
  NIN
  NLK
  NLT
  NLTE
  NNIL
}

input OperatorExpression {
  in: [Operator]
  opr: Operator = EQ
  val: Operator
}

"""订单"""
type Order implements Meta {
  """经办人"""
  agent(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): User!
  agentId: Int
  agentIdAvg: Int
  agentIdCount: Int
  agentIdMax: Int
  agentIdMin: Int
  agentIdSum: Int

  """到达站"""
  arrivalStation(address: StringExpression, city: StringExpression, code: StringExpression, description: StringExpression, district: StringExpression, groupBy: [String!], id: StringExpression, name: StringExpression, notes: StringExpression, province: StringExpression, railwayBureau: RailwayBureauExpression): TrainStation!
  arrivalStationId: Int
  arrivalStationIdAvg: Int
  arrivalStationIdCount: Int
  arrivalStationIdMax: Int
  arrivalStationIdMin: Int
  arrivalStationIdSum: Int

  """业务类型"""
  businessType: BusinessType!

  """货物信息"""
  cargoItems(after: ID, before: ID, description: StringExpression, exceptionCount: IntExpression, exceptionDescription: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, model: StringExpression, name: StringExpression, notes: StringExpression, offset: Int, order: OrderExpression, orderBy: CargoItemOrderBy, packaging: StringExpression, quantity: IntExpression, volume: FloatExpression, weight: FloatExpression): [CargoItem!]!
  cargoItemsAggregate(description: StringExpression, exceptionCount: IntExpression, exceptionDescription: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, model: StringExpression, name: StringExpression, notes: StringExpression, offset: Int, order: OrderExpression, orderBy: CargoItemOrderBy, packaging: StringExpression, quantity: IntExpression, volume: FloatExpression, weight: FloatExpression): CargoItem
  cargoItemsConnection(after: ID, before: ID, description: StringExpression, exceptionCount: IntExpression, exceptionDescription: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, model: StringExpression, name: StringExpression, notes: StringExpression, offset: Int, order: OrderExpression, orderBy: CargoItemOrderBy, packaging: StringExpression, quantity: IntExpression, volume: FloatExpression, weight: FloatExpression): CargoItemConnection

  """收费信息"""
  chargeItems(after: ID, amount: FloatExpression, before: ID, chargeType: ChargeTypeExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, notes: StringExpression, offset: Int, orderBy: ChargeItemOrderBy, orderId: StringExpression, taxAmount: FloatExpression): [ChargeItem!]
  chargeItemsAggregate(amount: FloatExpression, chargeType: ChargeTypeExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, notes: StringExpression, offset: Int, orderBy: ChargeItemOrderBy, orderId: StringExpression, taxAmount: FloatExpression): ChargeItem
  chargeItemsConnection(after: ID, amount: FloatExpression, before: ID, chargeType: ChargeTypeExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, notes: StringExpression, offset: Int, orderBy: ChargeItemOrderBy, orderId: StringExpression, taxAmount: FloatExpression): ChargeItemConnection

  """收货信息"""
  consignee(address: StringExpression, description: StringExpression, groupBy: [String!], id: StringExpression, name: StringExpression, phone: StringExpression): ContactInfo
  consigneeId: Int
  consigneeIdAvg: Int
  consigneeIdCount: Int
  consigneeIdMax: Int
  consigneeIdMin: Int
  consigneeIdSum: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """委托客户"""
  customer(address: StringExpression, city: StringExpression, code: StringExpression, contactPerson: StringExpression, description: StringExpression, district: StringExpression, email: StringExpression, fax: StringExpression, group: GroupExpression, groupBy: [String!], id: StringExpression, name: StringExpression, notes: StringExpression, phoneNumber: StringExpression, postalCode: StringExpression, province: StringExpression): Customer!
  customerId: Int
  customerIdAvg: Int
  customerIdCount: Int
  customerIdMax: Int
  customerIdMin: Int
  customerIdSum: Int

  """始发站"""
  departureStation(address: StringExpression, city: StringExpression, code: StringExpression, description: StringExpression, district: StringExpression, groupBy: [String!], id: StringExpression, name: StringExpression, notes: StringExpression, province: StringExpression, railwayBureau: RailwayBureauExpression): TrainStation!
  departureStationId: Int
  departureStationIdAvg: Int
  departureStationIdCount: Int
  departureStationIdMax: Int
  departureStationIdMin: Int
  departureStationIdSum: Int

  """所属公司"""
  group(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group
  groupId: Int
  groupIdAvg: Int
  groupIdCount: Int
  groupIdMax: Int
  groupIdMin: Int
  groupIdSum: Int

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """备注"""
  notes: String
  notesCount: Int
  notesMax: String
  notesMin: String

  """订单时间"""
  orderDate: Timestamp!
  orderDateCount: Int
  orderDateMax: Timestamp
  orderDateMin: Timestamp

  """订单号"""
  orderNumber: String!
  orderNumberCount: Int
  orderNumberMax: String
  orderNumberMin: String

  """计划到达时间"""
  plannedArrivalTime: Timestamp
  plannedArrivalTimeCount: Int
  plannedArrivalTimeMax: Timestamp
  plannedArrivalTimeMin: Timestamp

  """计划发运时间"""
  plannedDepartureTime: Timestamp
  plannedDepartureTimeCount: Int
  plannedDepartureTimeMax: Timestamp
  plannedDepartureTimeMin: Timestamp

  """项目"""
  project(arrivalStation: TrainStationExpression, businessType: BusinessTypeExpression, code: StringExpression, contract: ContractExpression, customer: CustomerExpression, departureStation: TrainStationExpression, description: StringExpression, group: GroupExpression, groupBy: [String!], id: StringExpression, manager: UserExpression, name: StringExpression, notes: StringExpression, serviceType: ServiceTypeExpression, settlementMethod: SettlementMethodExpression, transportationMode: TransportationModeExpression): Project!
  projectId: Int
  projectIdAvg: Int
  projectIdCount: Int
  projectIdMax: Int
  projectIdMin: Int
  projectIdSum: Int
  realmId: Int

  """服务类型"""
  serviceType: ServiceType!

  """发货信息"""
  shipper(address: StringExpression, description: StringExpression, groupBy: [String!], id: StringExpression, name: StringExpression, phone: StringExpression): ContactInfo
  shipperId: Int
  shipperIdAvg: Int
  shipperIdCount: Int
  shipperIdMax: Int
  shipperIdMin: Int
  shipperIdSum: Int

  """运输方式"""
  transportationMode: TransportationMode!
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type OrderConnection {
  edges: [OrderEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input OrderConnectionQueryArguments {
  after: ID
  agent: UserExpression
  agentId: IntExpression
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  before: ID
  businessType: BusinessTypeExpression
  cargoItems: CargoItemExpression
  chargeItems: ChargeItemExpression
  cond: Conditional = AND
  consignee: ContactInfoExpression
  consigneeId: IntExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  exs: [OrderExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: OrderOrderBy
  orderDate: StringExpression
  orderNumber: StringExpression
  plannedArrivalTime: StringExpression
  plannedDepartureTime: StringExpression
  project: ProjectExpression
  projectId: IntExpression
  realmId: IntExpression
  serviceType: ServiceTypeExpression
  shipper: ContactInfoExpression
  shipperId: IntExpression
  transportationMode: TransportationModeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input OrderConnectionSubscriptionArguments {
  after: ID
  agent: UserExpression
  agentId: IntExpression
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  before: ID
  businessType: BusinessTypeExpression
  cargoItems: CargoItemExpression
  chargeItems: ChargeItemExpression
  cond: Conditional = AND
  consignee: ContactInfoExpression
  consigneeId: IntExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  exs: [OrderExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: OrderOrderBy
  orderDate: StringExpression
  orderNumber: StringExpression
  plannedArrivalTime: StringExpression
  plannedDepartureTime: StringExpression
  project: ProjectExpression
  projectId: IntExpression
  realmId: IntExpression
  serviceType: ServiceTypeExpression
  shipper: ContactInfoExpression
  shipperId: IntExpression
  transportationMode: TransportationModeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type OrderEdge {
  cursor: ID
  node: Order
}

input OrderExpression {
  agent: UserExpression
  agentId: IntExpression
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  businessType: BusinessTypeExpression
  cargoItems: CargoItemExpression
  chargeItems: ChargeItemExpression
  cond: Conditional = AND
  consignee: ContactInfoExpression
  consigneeId: IntExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  exs: [OrderExpression]
  group: GroupExpression
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  notes: StringExpression
  orderDate: StringExpression
  orderNumber: StringExpression
  plannedArrivalTime: StringExpression
  plannedDepartureTime: StringExpression
  project: ProjectExpression
  projectId: IntExpression
  realmId: IntExpression
  serviceType: ServiceTypeExpression
  shipper: ContactInfoExpression
  shipperId: IntExpression
  transportationMode: TransportationModeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input OrderInput {
  agent: UserInput
  agentId: Int
  arrivalStation: TrainStationInput
  arrivalStationId: Int
  businessType: BusinessType
  cargoItems: [CargoItemInput]
  chargeItems: [ChargeItemInput]
  consignee: ContactInfoInput
  consigneeId: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  customer: CustomerInput
  customerId: Int
  departureStation: TrainStationInput
  departureStationId: Int
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  notes: String
  orderDate: Timestamp
  orderNumber: String
  plannedArrivalTime: Timestamp
  plannedDepartureTime: Timestamp
  project: ProjectInput
  projectId: Int
  realmId: Int
  serviceType: ServiceType
  shipper: ContactInfoInput
  shipperId: Int
  transportationMode: TransportationMode
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: OrderExpression
}

input OrderListMutationArguments {
  agent: UserInput
  agentId: Int
  arrivalStation: TrainStationInput
  arrivalStationId: Int
  businessType: BusinessType
  cargoItems: [CargoItemInput]
  chargeItems: [ChargeItemInput]
  consignee: ContactInfoInput
  consigneeId: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  customer: CustomerInput
  customerId: Int
  departureStation: TrainStationInput
  departureStationId: Int
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  list: [OrderInput]
  notes: String
  orderDate: Timestamp
  orderNumber: String
  plannedArrivalTime: Timestamp
  plannedDepartureTime: Timestamp
  project: ProjectInput
  projectId: Int
  realmId: Int
  serviceType: ServiceType
  shipper: ContactInfoInput
  shipperId: Int
  transportationMode: TransportationMode
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: OrderExpression
}

input OrderListQueryArguments {
  after: ID
  agent: UserExpression
  agentId: IntExpression
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  before: ID
  businessType: BusinessTypeExpression
  cargoItems: CargoItemExpression
  chargeItems: ChargeItemExpression
  cond: Conditional = AND
  consignee: ContactInfoExpression
  consigneeId: IntExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  exs: [OrderExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: OrderOrderBy
  orderDate: StringExpression
  orderNumber: StringExpression
  plannedArrivalTime: StringExpression
  plannedDepartureTime: StringExpression
  project: ProjectExpression
  projectId: IntExpression
  realmId: IntExpression
  serviceType: ServiceTypeExpression
  shipper: ContactInfoExpression
  shipperId: IntExpression
  transportationMode: TransportationModeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input OrderListSubscriptionArguments {
  after: ID
  agent: UserExpression
  agentId: IntExpression
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  before: ID
  businessType: BusinessTypeExpression
  cargoItems: CargoItemExpression
  chargeItems: ChargeItemExpression
  cond: Conditional = AND
  consignee: ContactInfoExpression
  consigneeId: IntExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  exs: [OrderExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: OrderOrderBy
  orderDate: StringExpression
  orderNumber: StringExpression
  plannedArrivalTime: StringExpression
  plannedDepartureTime: StringExpression
  project: ProjectExpression
  projectId: IntExpression
  realmId: IntExpression
  serviceType: ServiceTypeExpression
  shipper: ContactInfoExpression
  shipperId: IntExpression
  transportationMode: TransportationModeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input OrderMutationArguments {
  agent: UserInput
  agentId: Int
  arrivalStation: TrainStationInput
  arrivalStationId: Int
  businessType: BusinessType
  cargoItems: [CargoItemInput]
  chargeItems: [ChargeItemInput]
  consignee: ContactInfoInput
  consigneeId: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  customer: CustomerInput
  customerId: Int
  departureStation: TrainStationInput
  departureStationId: Int
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  notes: String
  orderDate: Timestamp
  orderNumber: String
  plannedArrivalTime: Timestamp
  plannedDepartureTime: Timestamp
  project: ProjectInput
  projectId: Int
  realmId: Int
  serviceType: ServiceType
  shipper: ContactInfoInput
  shipperId: Int
  transportationMode: TransportationMode
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: OrderExpression
}

input OrderOrderBy {
  agentId: Sort
  arrivalStationId: Sort
  businessType: Sort
  consigneeId: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  customerId: Sort
  departureStationId: Sort
  groupId: Sort
  id: Sort
  isDeprecated: Sort
  notes: Sort
  orderDate: Sort
  orderNumber: Sort
  plannedArrivalTime: Sort
  plannedDepartureTime: Sort
  projectId: Sort
  realmId: Sort
  serviceType: Sort
  shipperId: Sort
  transportationMode: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input OrderQueryArguments {
  agent: UserExpression
  agentId: IntExpression
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  businessType: BusinessTypeExpression
  cargoItems: CargoItemExpression
  chargeItems: ChargeItemExpression
  cond: Conditional = AND
  consignee: ContactInfoExpression
  consigneeId: IntExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  exs: [OrderExpression]
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  notes: StringExpression
  orderDate: StringExpression
  orderNumber: StringExpression
  plannedArrivalTime: StringExpression
  plannedDepartureTime: StringExpression
  project: ProjectExpression
  projectId: IntExpression
  realmId: IntExpression
  serviceType: ServiceTypeExpression
  shipper: ContactInfoExpression
  shipperId: IntExpression
  transportationMode: TransportationModeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input OrderSubscriptionArguments {
  agent: UserExpression
  agentId: IntExpression
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  businessType: BusinessTypeExpression
  cargoItems: CargoItemExpression
  chargeItems: ChargeItemExpression
  cond: Conditional = AND
  consignee: ContactInfoExpression
  consigneeId: IntExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  exs: [OrderExpression]
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  notes: StringExpression
  orderDate: StringExpression
  orderNumber: StringExpression
  plannedArrivalTime: StringExpression
  plannedDepartureTime: StringExpression
  project: ProjectExpression
  projectId: IntExpression
  realmId: IntExpression
  serviceType: ServiceTypeExpression
  shipper: ContactInfoExpression
  shipperId: IntExpression
  transportationMode: TransportationModeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

"""付费项目"""
type PaymentItem implements Meta & NamedStruct {
  """金额"""
  amount: Float
  amountAvg: Float
  amountCount: Int
  amountMax: Float
  amountMin: Float
  amountSum: Float
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int

  """票号"""
  invoiceNumber: String
  invoiceNumberCount: Int
  invoiceNumberMax: String
  invoiceNumberMin: String
  isDeprecated: Boolean

  """名称"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """备注"""
  notes: String
  notesCount: Int
  notesMax: String
  notesMin: String

  """付费类型"""
  paymentType: ChargeType!
  realmId: Int

  """税额"""
  taxAmount: Float
  taxAmountAvg: Float
  taxAmountCount: Int
  taxAmountMax: Float
  taxAmountMin: Float
  taxAmountSum: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int

  """运单ID"""
  waybillId: String!
  waybillIdCount: Int
  waybillIdMax: String
  waybillIdMin: String
}

type PaymentItemConnection {
  edges: [PaymentItemEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input PaymentItemConnectionQueryArguments {
  after: ID
  amount: FloatExpression
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PaymentItemExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  invoiceNumber: StringExpression
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: PaymentItemOrderBy
  paymentType: ChargeTypeExpression
  realmId: IntExpression
  taxAmount: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillId: StringExpression
}

input PaymentItemConnectionSubscriptionArguments {
  after: ID
  amount: FloatExpression
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PaymentItemExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  invoiceNumber: StringExpression
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: PaymentItemOrderBy
  paymentType: ChargeTypeExpression
  realmId: IntExpression
  taxAmount: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillId: StringExpression
}

type PaymentItemEdge {
  cursor: ID
  node: PaymentItem
}

input PaymentItemExpression {
  amount: FloatExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PaymentItemExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  invoiceNumber: StringExpression
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  paymentType: ChargeTypeExpression
  realmId: IntExpression
  taxAmount: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillId: StringExpression
}

input PaymentItemInput {
  amount: Float
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  invoiceNumber: String
  isDeprecated: Boolean
  name: String
  notes: String
  paymentType: ChargeType
  realmId: Int
  taxAmount: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int
  waybillId: String
  where: PaymentItemExpression
}

input PaymentItemListMutationArguments {
  amount: Float
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  invoiceNumber: String
  isDeprecated: Boolean
  list: [PaymentItemInput]
  name: String
  notes: String
  paymentType: ChargeType
  realmId: Int
  taxAmount: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int
  waybillId: String
  where: PaymentItemExpression
}

input PaymentItemListQueryArguments {
  after: ID
  amount: FloatExpression
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PaymentItemExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  invoiceNumber: StringExpression
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: PaymentItemOrderBy
  paymentType: ChargeTypeExpression
  realmId: IntExpression
  taxAmount: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillId: StringExpression
}

input PaymentItemListSubscriptionArguments {
  after: ID
  amount: FloatExpression
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PaymentItemExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  invoiceNumber: StringExpression
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: PaymentItemOrderBy
  paymentType: ChargeTypeExpression
  realmId: IntExpression
  taxAmount: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillId: StringExpression
}

input PaymentItemMutationArguments {
  amount: Float
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  invoiceNumber: String
  isDeprecated: Boolean
  name: String
  notes: String
  paymentType: ChargeType
  realmId: Int
  taxAmount: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int
  waybillId: String
  where: PaymentItemExpression
}

input PaymentItemOrderBy {
  amount: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  id: Sort
  invoiceNumber: Sort
  isDeprecated: Sort
  name: Sort
  notes: Sort
  paymentType: Sort
  realmId: Sort
  taxAmount: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
  waybillId: Sort
}

input PaymentItemQueryArguments {
  amount: FloatExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PaymentItemExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  invoiceNumber: StringExpression
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  paymentType: ChargeTypeExpression
  realmId: IntExpression
  taxAmount: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillId: StringExpression
}

input PaymentItemSubscriptionArguments {
  amount: FloatExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PaymentItemExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  invoiceNumber: StringExpression
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  paymentType: ChargeTypeExpression
  realmId: IntExpression
  taxAmount: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillId: StringExpression
}

"""权限"""
type Permission implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """字段"""
  field: String!
  fieldCount: Int
  fieldMax: String
  fieldMin: String
  isDeprecated: Boolean

  """名称"""
  name: ID!
  nameCount: Int
  nameMax: String
  nameMin: String

  """权限类型"""
  permissionType: PermissionType!

  """租户"""
  realm(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmId: Int
  realmIdAvg: Int
  realmIdCount: Int
  realmIdMax: Int
  realmIdMin: Int
  realmIdSum: Int
  rolePermission: [RolePermission]
  rolePermissionAggregate(first: Int, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: RolePermissionOrderBy, permissionName: StringExpression, permissionNameType: PermissionExpression, roleId: IntExpression, roleIdType: RoleExpression): RolePermission
  rolePermissionConnection(first: Int, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: RolePermissionOrderBy, permissionName: StringExpression, permissionNameType: PermissionExpression, roleId: IntExpression, roleIdType: RoleExpression): RolePermissionConnection

  """角色"""
  roles(after: ID, before: ID, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRole: GroupRoleExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleComposite: RoleCompositeExpression, rolePermission: RolePermissionExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): [Role]
  rolesAggregate(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRole: GroupRoleExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleComposite: RoleCompositeExpression, rolePermission: RolePermissionExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  rolesConnection(after: ID, before: ID, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], groupRole: GroupRoleExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleComposite: RoleCompositeExpression, rolePermission: RolePermissionExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): RoleConnection
  syncPermissionPolicy: Boolean

  """实体"""
  type: String!
  typeCount: Int
  typeMax: String
  typeMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type PermissionConnection {
  edges: [PermissionEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input PermissionConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  first: Int
  groupBy: [String!]
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: PermissionOrderBy
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  rolePermission: RolePermissionExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  first: Int
  groupBy: [String!]
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: PermissionOrderBy
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  rolePermission: RolePermissionExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type PermissionEdge {
  cursor: ID
  node: Permission
}

input PermissionExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  rolePermission: RolePermissionExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  field: String
  isDeprecated: Boolean
  name: ID
  permissionType: PermissionType
  realm: RealmInput
  realmId: Int
  rolePermission: [RolePermissionInput]
  roles: [RoleInput]
  type: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: PermissionExpression
}

input PermissionListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  field: String
  isDeprecated: Boolean
  list: [PermissionInput]
  name: ID
  permissionType: PermissionType
  realm: RealmInput
  realmId: Int
  rolePermission: [RolePermissionInput]
  roles: [RoleInput]
  type: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: PermissionExpression
}

input PermissionListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  first: Int
  groupBy: [String!]
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: PermissionOrderBy
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  rolePermission: RolePermissionExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  first: Int
  groupBy: [String!]
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: PermissionOrderBy
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  rolePermission: RolePermissionExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  field: String
  isDeprecated: Boolean
  name: ID
  permissionType: PermissionType
  realm: RealmInput
  realmId: Int
  rolePermission: [RolePermissionInput]
  roles: [RoleInput]
  type: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: PermissionExpression
}

input PermissionOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  field: Sort
  isDeprecated: Sort
  name: Sort
  permissionType: Sort
  realmId: Sort
  type: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input PermissionQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  groupBy: [String!]
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  rolePermission: RolePermissionExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  field: StringExpression
  groupBy: [String!]
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  permissionType: PermissionTypeExpression
  realm: RealmExpression
  realmId: IntExpression
  rolePermission: RolePermissionExpression
  roles: RoleExpression
  type: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

"""权限类型"""
enum PermissionType {
  """读取"""
  READ

  """写入"""
  WRITE
}

input PermissionTypeExpression {
  in: [PermissionType]
  opr: Operator = EQ
  val: PermissionType
}

"""取货"""
type PickupWaybill implements Meta {
  """货物信息"""
  cargoItems(after: ID, before: ID, description: StringExpression, exceptionCount: IntExpression, exceptionDescription: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, model: StringExpression, name: StringExpression, notes: StringExpression, offset: Int, order: OrderExpression, orderBy: CargoItemOrderBy, packaging: StringExpression, quantity: IntExpression, volume: FloatExpression, weight: FloatExpression): [CargoItem!]!
  cargoItemsAggregate(description: StringExpression, exceptionCount: IntExpression, exceptionDescription: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, model: StringExpression, name: StringExpression, notes: StringExpression, offset: Int, order: OrderExpression, orderBy: CargoItemOrderBy, packaging: StringExpression, quantity: IntExpression, volume: FloatExpression, weight: FloatExpression): CargoItem
  cargoItemsConnection(after: ID, before: ID, description: StringExpression, exceptionCount: IntExpression, exceptionDescription: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, model: StringExpression, name: StringExpression, notes: StringExpression, offset: Int, order: OrderExpression, orderBy: CargoItemOrderBy, packaging: StringExpression, quantity: IntExpression, volume: FloatExpression, weight: FloatExpression): CargoItemConnection

  """联系人"""
  contactPerson: String
  contactPersonCount: Int
  contactPersonMax: String
  contactPersonMin: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """始发站"""
  departureStation(address: StringExpression, city: StringExpression, code: StringExpression, description: StringExpression, district: StringExpression, groupBy: [String!], id: StringExpression, name: StringExpression, notes: StringExpression, province: StringExpression, railwayBureau: RailwayBureauExpression): TrainStation!
  departureStationId: Int
  departureStationIdAvg: Int
  departureStationIdCount: Int
  departureStationIdMax: Int
  departureStationIdMin: Int
  departureStationIdSum: Int

  """所属公司"""
  group(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group
  groupId: Int
  groupIdAvg: Int
  groupIdCount: Int
  groupIdMax: Int
  groupIdMin: Int
  groupIdSum: Int

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """车牌号"""
  licensePlate: String
  licensePlateCount: Int
  licensePlateMax: String
  licensePlateMin: String

  """上站时间"""
  onStationTime: Timestamp!
  onStationTimeCount: Int
  onStationTimeMax: Timestamp
  onStationTimeMin: Timestamp

  """付费信息"""
  paymentItems(after: ID, amount: FloatExpression, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, invoiceNumber: StringExpression, last: Int, name: StringExpression, notes: StringExpression, offset: Int, orderBy: PaymentItemOrderBy, paymentType: ChargeTypeExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillId: StringExpression): [PaymentItem!]
  paymentItemsAggregate(amount: FloatExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, invoiceNumber: StringExpression, last: Int, name: StringExpression, notes: StringExpression, offset: Int, orderBy: PaymentItemOrderBy, paymentType: ChargeTypeExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillId: StringExpression): PaymentItem
  paymentItemsConnection(after: ID, amount: FloatExpression, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, invoiceNumber: StringExpression, last: Int, name: StringExpression, notes: StringExpression, offset: Int, orderBy: PaymentItemOrderBy, paymentType: ChargeTypeExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillId: StringExpression): PaymentItemConnection

  """手机号"""
  phoneNumber: String
  phoneNumberCount: Int
  phoneNumberMax: String
  phoneNumberMin: String

  """取货地址"""
  pickupAddress: String!
  pickupAddressCount: Int
  pickupAddressMax: String
  pickupAddressMin: String

  """取货时间"""
  pickupTime: Timestamp!
  pickupTimeCount: Int
  pickupTimeMax: Timestamp
  pickupTimeMin: Timestamp
  realmId: Int

  """供应商"""
  supplier(address: StringExpression, city: StringExpression, code: StringExpression, contactPerson: StringExpression, description: StringExpression, district: StringExpression, email: StringExpression, fax: StringExpression, group: GroupExpression, groupBy: [String!], id: StringExpression, name: StringExpression, notes: StringExpression, phoneNumber: StringExpression, postalCode: StringExpression): Supplier
  supplierId: Int
  supplierIdAvg: Int
  supplierIdCount: Int
  supplierIdMax: Int
  supplierIdMin: Int
  supplierIdSum: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int

  """运单号"""
  waybillNumber: String!
  waybillNumberCount: Int
  waybillNumberMax: String
  waybillNumberMin: String
}

type PickupWaybillConnection {
  edges: [PickupWaybillEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input PickupWaybillConnectionQueryArguments {
  after: ID
  before: ID
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  exs: [PickupWaybillExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  licensePlate: StringExpression
  not: Boolean = false
  offset: Int
  onStationTime: StringExpression
  orderBy: PickupWaybillOrderBy
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  pickupAddress: StringExpression
  pickupTime: StringExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

input PickupWaybillConnectionSubscriptionArguments {
  after: ID
  before: ID
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  exs: [PickupWaybillExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  licensePlate: StringExpression
  not: Boolean = false
  offset: Int
  onStationTime: StringExpression
  orderBy: PickupWaybillOrderBy
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  pickupAddress: StringExpression
  pickupTime: StringExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

type PickupWaybillEdge {
  cursor: ID
  node: PickupWaybill
}

input PickupWaybillExpression {
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  exs: [PickupWaybillExpression]
  group: GroupExpression
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  licensePlate: StringExpression
  not: Boolean = false
  onStationTime: StringExpression
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  pickupAddress: StringExpression
  pickupTime: StringExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

input PickupWaybillInput {
  cargoItems: [CargoItemInput]
  contactPerson: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  departureStation: TrainStationInput
  departureStationId: Int
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  licensePlate: String
  onStationTime: Timestamp
  paymentItems: [PaymentItemInput]
  phoneNumber: String
  pickupAddress: String
  pickupTime: Timestamp
  realmId: Int
  supplier: SupplierInput
  supplierId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  waybillNumber: String
  where: PickupWaybillExpression
}

input PickupWaybillListMutationArguments {
  cargoItems: [CargoItemInput]
  contactPerson: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  departureStation: TrainStationInput
  departureStationId: Int
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  licensePlate: String
  list: [PickupWaybillInput]
  onStationTime: Timestamp
  paymentItems: [PaymentItemInput]
  phoneNumber: String
  pickupAddress: String
  pickupTime: Timestamp
  realmId: Int
  supplier: SupplierInput
  supplierId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  waybillNumber: String
  where: PickupWaybillExpression
}

input PickupWaybillListQueryArguments {
  after: ID
  before: ID
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  exs: [PickupWaybillExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  licensePlate: StringExpression
  not: Boolean = false
  offset: Int
  onStationTime: StringExpression
  orderBy: PickupWaybillOrderBy
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  pickupAddress: StringExpression
  pickupTime: StringExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

input PickupWaybillListSubscriptionArguments {
  after: ID
  before: ID
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  exs: [PickupWaybillExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  licensePlate: StringExpression
  not: Boolean = false
  offset: Int
  onStationTime: StringExpression
  orderBy: PickupWaybillOrderBy
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  pickupAddress: StringExpression
  pickupTime: StringExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

input PickupWaybillMutationArguments {
  cargoItems: [CargoItemInput]
  contactPerson: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  departureStation: TrainStationInput
  departureStationId: Int
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  licensePlate: String
  onStationTime: Timestamp
  paymentItems: [PaymentItemInput]
  phoneNumber: String
  pickupAddress: String
  pickupTime: Timestamp
  realmId: Int
  supplier: SupplierInput
  supplierId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  waybillNumber: String
  where: PickupWaybillExpression
}

input PickupWaybillOrderBy {
  contactPerson: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  departureStationId: Sort
  groupId: Sort
  id: Sort
  isDeprecated: Sort
  licensePlate: Sort
  onStationTime: Sort
  phoneNumber: Sort
  pickupAddress: Sort
  pickupTime: Sort
  realmId: Sort
  supplierId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
  waybillNumber: Sort
}

input PickupWaybillQueryArguments {
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  exs: [PickupWaybillExpression]
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  licensePlate: StringExpression
  not: Boolean = false
  onStationTime: StringExpression
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  pickupAddress: StringExpression
  pickupTime: StringExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

input PickupWaybillSubscriptionArguments {
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  exs: [PickupWaybillExpression]
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  licensePlate: StringExpression
  not: Boolean = false
  onStationTime: StringExpression
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  pickupAddress: StringExpression
  pickupTime: StringExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

type Policy {
  id: String
  ptype: String
  v0: String
  v1: String
  v2: String
  v3: String
  v4: String
  v5: String
}

"""计费单位"""
enum PricingUnit {
  """立方米"""
  CUBIC_METERS

  """千克"""
  KILOGRAMS

  """汽车数"""
  NUMBER_OF_CARS

  """车厢数"""
  NUMBER_OF_TRAIN_CARRIAGES

  """件数"""
  PIECES

  """吨"""
  TONS
}

input PricingUnitExpression {
  in: [PricingUnit]
  opr: Operator = EQ
  val: PricingUnit
}

"""项目"""
type Project implements Meta & NamedStruct {
  """到达站"""
  arrivalStation(address: StringExpression, city: StringExpression, code: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, notes: StringExpression, province: StringExpression, railwayBureau: RailwayBureauExpression, railwayBureauId: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TrainStation
  arrivalStationId: Int
  arrivalStationIdAvg: Int
  arrivalStationIdCount: Int
  arrivalStationIdMax: Int
  arrivalStationIdMin: Int
  arrivalStationIdSum: Int

  """业务类型"""
  businessType: BusinessType

  """代码"""
  code: String!
  codeCount: Int
  codeMax: String
  codeMin: String

  """合同"""
  contract(additionalContent: StringExpression, businessAffiliate: GroupExpression, businessScale: FloatExpression, businessType: BusinessTypeExpression, code: StringExpression, customer: CustomerExpression, description: StringExpression, effectiveDate: StringExpression, expirationDate: StringExpression, filingDepartment: GroupExpression, groupBy: [String!], id: StringExpression, name: StringExpression, notes: StringExpression, performanceStatus: ContractStatusExpression, pricingUnit: StringExpression, signatoryCount: IntExpression, signingCompany: GroupExpression, transportationMode: TransportationModeExpression, unitPrice: PricingUnitExpression): Contract
  contractId: Int
  contractIdAvg: Int
  contractIdCount: Int
  contractIdMax: Int
  contractIdMin: Int
  contractIdSum: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """客户"""
  customer(address: StringExpression, city: StringExpression, code: StringExpression, contactPerson: StringExpression, description: StringExpression, district: StringExpression, email: StringExpression, fax: StringExpression, group: GroupExpression, groupBy: [String!], id: StringExpression, name: StringExpression, notes: StringExpression, phoneNumber: StringExpression, postalCode: StringExpression, province: StringExpression): Customer
  customerId: Int
  customerIdAvg: Int
  customerIdCount: Int
  customerIdMax: Int
  customerIdMin: Int
  customerIdSum: Int

  """始发站"""
  departureStation(address: StringExpression, city: StringExpression, code: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, notes: StringExpression, province: StringExpression, railwayBureau: RailwayBureauExpression, railwayBureauId: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TrainStation
  departureStationId: Int
  departureStationIdAvg: Int
  departureStationIdCount: Int
  departureStationIdMax: Int
  departureStationIdMin: Int
  departureStationIdSum: Int

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """所属公司"""
  group(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group
  groupId: Int
  groupIdAvg: Int
  groupIdCount: Int
  groupIdMax: Int
  groupIdMin: Int
  groupIdSum: Int

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """负责人"""
  manager(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): User
  managerId: Int
  managerIdAvg: Int
  managerIdCount: Int
  managerIdMax: Int
  managerIdMin: Int
  managerIdSum: Int

  """名称"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """备注"""
  notes: String
  notesCount: Int
  notesMax: String
  notesMin: String
  realmId: Int

  """服务类型"""
  serviceType: ServiceType

  """结算方式"""
  settlementMethod: SettlementMethod!

  """运输方式"""
  transportationMode: TransportationMode
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type ProjectConnection {
  edges: [ProjectEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input ProjectConnectionQueryArguments {
  after: ID
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  before: ID
  businessType: BusinessTypeExpression
  code: StringExpression
  cond: Conditional = AND
  contract: ContractExpression
  contractId: IntExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  description: StringExpression
  exs: [ProjectExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  manager: UserExpression
  managerId: IntExpression
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: ProjectOrderBy
  realmId: IntExpression
  serviceType: ServiceTypeExpression
  settlementMethod: SettlementMethodExpression
  transportationMode: TransportationModeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ProjectConnectionSubscriptionArguments {
  after: ID
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  before: ID
  businessType: BusinessTypeExpression
  code: StringExpression
  cond: Conditional = AND
  contract: ContractExpression
  contractId: IntExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  description: StringExpression
  exs: [ProjectExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  manager: UserExpression
  managerId: IntExpression
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: ProjectOrderBy
  realmId: IntExpression
  serviceType: ServiceTypeExpression
  settlementMethod: SettlementMethodExpression
  transportationMode: TransportationModeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type ProjectEdge {
  cursor: ID
  node: Project
}

input ProjectExpression {
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  businessType: BusinessTypeExpression
  code: StringExpression
  cond: Conditional = AND
  contract: ContractExpression
  contractId: IntExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  description: StringExpression
  exs: [ProjectExpression]
  group: GroupExpression
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  manager: UserExpression
  managerId: IntExpression
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  realmId: IntExpression
  serviceType: ServiceTypeExpression
  settlementMethod: SettlementMethodExpression
  transportationMode: TransportationModeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ProjectInput {
  arrivalStation: TrainStationInput
  arrivalStationId: Int
  businessType: BusinessType
  code: String
  contract: ContractInput
  contractId: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  customer: CustomerInput
  customerId: Int
  departureStation: TrainStationInput
  departureStationId: Int
  description: String
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  manager: UserInput
  managerId: Int
  name: String
  notes: String
  realmId: Int
  serviceType: ServiceType
  settlementMethod: SettlementMethod
  transportationMode: TransportationMode
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: ProjectExpression
}

input ProjectListMutationArguments {
  arrivalStation: TrainStationInput
  arrivalStationId: Int
  businessType: BusinessType
  code: String
  contract: ContractInput
  contractId: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  customer: CustomerInput
  customerId: Int
  departureStation: TrainStationInput
  departureStationId: Int
  description: String
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  list: [ProjectInput]
  manager: UserInput
  managerId: Int
  name: String
  notes: String
  realmId: Int
  serviceType: ServiceType
  settlementMethod: SettlementMethod
  transportationMode: TransportationMode
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: ProjectExpression
}

input ProjectListQueryArguments {
  after: ID
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  before: ID
  businessType: BusinessTypeExpression
  code: StringExpression
  cond: Conditional = AND
  contract: ContractExpression
  contractId: IntExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  description: StringExpression
  exs: [ProjectExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  manager: UserExpression
  managerId: IntExpression
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: ProjectOrderBy
  realmId: IntExpression
  serviceType: ServiceTypeExpression
  settlementMethod: SettlementMethodExpression
  transportationMode: TransportationModeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ProjectListSubscriptionArguments {
  after: ID
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  before: ID
  businessType: BusinessTypeExpression
  code: StringExpression
  cond: Conditional = AND
  contract: ContractExpression
  contractId: IntExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  description: StringExpression
  exs: [ProjectExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  manager: UserExpression
  managerId: IntExpression
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: ProjectOrderBy
  realmId: IntExpression
  serviceType: ServiceTypeExpression
  settlementMethod: SettlementMethodExpression
  transportationMode: TransportationModeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ProjectMutationArguments {
  arrivalStation: TrainStationInput
  arrivalStationId: Int
  businessType: BusinessType
  code: String
  contract: ContractInput
  contractId: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  customer: CustomerInput
  customerId: Int
  departureStation: TrainStationInput
  departureStationId: Int
  description: String
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  manager: UserInput
  managerId: Int
  name: String
  notes: String
  realmId: Int
  serviceType: ServiceType
  settlementMethod: SettlementMethod
  transportationMode: TransportationMode
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: ProjectExpression
}

input ProjectOrderBy {
  arrivalStationId: Sort
  businessType: Sort
  code: Sort
  contractId: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  customerId: Sort
  departureStationId: Sort
  description: Sort
  groupId: Sort
  id: Sort
  isDeprecated: Sort
  managerId: Sort
  name: Sort
  notes: Sort
  realmId: Sort
  serviceType: Sort
  settlementMethod: Sort
  transportationMode: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input ProjectQueryArguments {
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  businessType: BusinessTypeExpression
  code: StringExpression
  cond: Conditional = AND
  contract: ContractExpression
  contractId: IntExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  description: StringExpression
  exs: [ProjectExpression]
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  manager: UserExpression
  managerId: IntExpression
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  realmId: IntExpression
  serviceType: ServiceTypeExpression
  settlementMethod: SettlementMethodExpression
  transportationMode: TransportationModeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ProjectSubscriptionArguments {
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  businessType: BusinessTypeExpression
  code: StringExpression
  cond: Conditional = AND
  contract: ContractExpression
  contractId: IntExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  customer: CustomerExpression
  customerId: IntExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  description: StringExpression
  exs: [ProjectExpression]
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  manager: UserExpression
  managerId: IntExpression
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  realmId: IntExpression
  serviceType: ServiceTypeExpression
  settlementMethod: SettlementMethodExpression
  transportationMode: TransportationModeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input Property {
  name: String!
  required: [String]
  validation: ValidationInput
}

enum Protocol {
  GRPC
  HTTP
  LOCAL
  RSOCKET
}

input ProtocolExpression {
  in: [Protocol]
  opr: Operator = EQ
  val: Protocol
}

type Query implements Meta {
  annualFinancialReport(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [AnnualFinancialReportExpression], grossProfit: FloatExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, netProfit: FloatExpression, not: Boolean = false, operatingExpenses: FloatExpression, pickupToStationCost: FloatExpression, pickupToStationIncome: FloatExpression, portCost: FloatExpression, railwayCost: FloatExpression, railwayIncome: FloatExpression, railwayToDeliveryCost: FloatExpression, railwayToDeliveryIncome: FloatExpression, realmId: IntExpression, storageCost: FloatExpression, totalCost: FloatExpression, totalIncome: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, year: IntExpression): AnnualFinancialReport
  annualFinancialReportConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [AnnualFinancialReportExpression], first: Int, grossProfit: FloatExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, netProfit: FloatExpression, not: Boolean = false, offset: Int, operatingExpenses: FloatExpression, orderBy: AnnualFinancialReportOrderBy, pickupToStationCost: FloatExpression, pickupToStationIncome: FloatExpression, portCost: FloatExpression, railwayCost: FloatExpression, railwayIncome: FloatExpression, railwayToDeliveryCost: FloatExpression, railwayToDeliveryIncome: FloatExpression, realmId: IntExpression, storageCost: FloatExpression, totalCost: FloatExpression, totalIncome: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, year: IntExpression): AnnualFinancialReportConnection
  annualFinancialReportList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [AnnualFinancialReportExpression], first: Int, grossProfit: FloatExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, netProfit: FloatExpression, not: Boolean = false, offset: Int, operatingExpenses: FloatExpression, orderBy: AnnualFinancialReportOrderBy, pickupToStationCost: FloatExpression, pickupToStationIncome: FloatExpression, portCost: FloatExpression, railwayCost: FloatExpression, railwayIncome: FloatExpression, railwayToDeliveryCost: FloatExpression, railwayToDeliveryIncome: FloatExpression, realmId: IntExpression, storageCost: FloatExpression, totalCost: FloatExpression, totalIncome: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, year: IntExpression): [AnnualFinancialReport]
  cargoItem(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exceptionCount: IntExpression, exceptionDescription: StringExpression, exs: [CargoItemExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, model: StringExpression, name: StringExpression, not: Boolean = false, notes: StringExpression, order: OrderExpression, orderId: IntExpression, packaging: StringExpression, quantity: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, volume: FloatExpression, weight: FloatExpression): CargoItem
  cargoItemConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exceptionCount: IntExpression, exceptionDescription: StringExpression, exs: [CargoItemExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, model: StringExpression, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, order: OrderExpression, orderBy: CargoItemOrderBy, orderId: IntExpression, packaging: StringExpression, quantity: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, volume: FloatExpression, weight: FloatExpression): CargoItemConnection
  cargoItemList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exceptionCount: IntExpression, exceptionDescription: StringExpression, exs: [CargoItemExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, model: StringExpression, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, order: OrderExpression, orderBy: CargoItemOrderBy, orderId: IntExpression, packaging: StringExpression, quantity: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, volume: FloatExpression, weight: FloatExpression): [CargoItem]
  chargeItem(amount: FloatExpression, chargeType: ChargeTypeExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [ChargeItemExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, notes: StringExpression, orderId: StringExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): ChargeItem
  chargeItemConnection(after: ID, amount: FloatExpression, before: ID, chargeType: ChargeTypeExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [ChargeItemExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: ChargeItemOrderBy, orderId: StringExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): ChargeItemConnection
  chargeItemList(after: ID, amount: FloatExpression, before: ID, chargeType: ChargeTypeExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [ChargeItemExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: ChargeItemOrderBy, orderId: StringExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [ChargeItem]
  contactInfo(address: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [ContactInfoExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, phone: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): ContactInfo
  contactInfoConnection(address: StringExpression, after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [ContactInfoExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: ContactInfoOrderBy, phone: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): ContactInfoConnection
  contactInfoList(address: StringExpression, after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [ContactInfoExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: ContactInfoOrderBy, phone: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [ContactInfo]
  contract(additionalContent: StringExpression, businessAffiliate: GroupExpression, businessAffiliateId: IntExpression, businessScale: FloatExpression, businessType: BusinessTypeExpression, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: CustomerExpression, customerId: IntExpression, description: StringExpression, effectiveDate: StringExpression, expirationDate: StringExpression, exs: [ContractExpression], filingDepartment: GroupExpression, filingDepartmentId: IntExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, notes: StringExpression, performanceStatus: ContractStatusExpression, pricingUnit: StringExpression, realmId: IntExpression, signatoryCount: IntExpression, signingCompany: GroupExpression, signingCompanyId: IntExpression, transportationMode: TransportationModeExpression, unitPrice: PricingUnitExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Contract
  contractConnection(additionalContent: StringExpression, after: ID, before: ID, businessAffiliate: GroupExpression, businessAffiliateId: IntExpression, businessScale: FloatExpression, businessType: BusinessTypeExpression, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: CustomerExpression, customerId: IntExpression, description: StringExpression, effectiveDate: StringExpression, expirationDate: StringExpression, exs: [ContractExpression], filingDepartment: GroupExpression, filingDepartmentId: IntExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: ContractOrderBy, performanceStatus: ContractStatusExpression, pricingUnit: StringExpression, realmId: IntExpression, signatoryCount: IntExpression, signingCompany: GroupExpression, signingCompanyId: IntExpression, transportationMode: TransportationModeExpression, unitPrice: PricingUnitExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): ContractConnection
  contractList(additionalContent: StringExpression, after: ID, before: ID, businessAffiliate: GroupExpression, businessAffiliateId: IntExpression, businessScale: FloatExpression, businessType: BusinessTypeExpression, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: CustomerExpression, customerId: IntExpression, description: StringExpression, effectiveDate: StringExpression, expirationDate: StringExpression, exs: [ContractExpression], filingDepartment: GroupExpression, filingDepartmentId: IntExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: ContractOrderBy, performanceStatus: ContractStatusExpression, pricingUnit: StringExpression, realmId: IntExpression, signatoryCount: IntExpression, signingCompany: GroupExpression, signingCompanyId: IntExpression, transportationMode: TransportationModeExpression, unitPrice: PricingUnitExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Contract]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  current: CurrentUser
  currentPermissionNameList(types: [String]): [String]
  currentPermissionTypeList: [String]
  customer(address: StringExpression, city: StringExpression, code: StringExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, email: StringExpression, exs: [CustomerExpression], fax: StringExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, notes: StringExpression, phoneNumber: StringExpression, postalCode: StringExpression, province: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Customer
  customerConnection(address: StringExpression, after: ID, before: ID, city: StringExpression, code: StringExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, email: StringExpression, exs: [CustomerExpression], fax: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: CustomerOrderBy, phoneNumber: StringExpression, postalCode: StringExpression, province: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): CustomerConnection
  customerList(address: StringExpression, after: ID, before: ID, city: StringExpression, code: StringExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, email: StringExpression, exs: [CustomerExpression], fax: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: CustomerOrderBy, phoneNumber: StringExpression, postalCode: StringExpression, province: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Customer]
  deliveryWaybill(arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, arrivalTime: StringExpression, cargoItems: CargoItemExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deliveryAddress: StringExpression, deliveryTime: StringExpression, exs: [DeliveryWaybillExpression], group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, licensePlate: StringExpression, not: Boolean = false, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): DeliveryWaybill
  deliveryWaybillConnection(after: ID, arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, arrivalTime: StringExpression, before: ID, cargoItems: CargoItemExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deliveryAddress: StringExpression, deliveryTime: StringExpression, exs: [DeliveryWaybillExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, licensePlate: StringExpression, not: Boolean = false, offset: Int, orderBy: DeliveryWaybillOrderBy, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): DeliveryWaybillConnection
  deliveryWaybillList(after: ID, arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, arrivalTime: StringExpression, before: ID, cargoItems: CargoItemExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deliveryAddress: StringExpression, deliveryTime: StringExpression, exs: [DeliveryWaybillExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, licensePlate: StringExpression, not: Boolean = false, offset: Int, orderBy: DeliveryWaybillOrderBy, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): [DeliveryWaybill]
  employeeProfile(address: StringExpression, birthDate: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, emergencyContact: StringExpression, emergencyContactPhone: StringExpression, employee: UserExpression, employeeId: IntExpression, exs: [EmployeeProfileExpression], gender: GenderExpression, groupBy: [String!], hireDate: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, notes: StringExpression, position: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): EmployeeProfile
  employeeProfileConnection(address: StringExpression, after: ID, before: ID, birthDate: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, emergencyContact: StringExpression, emergencyContactPhone: StringExpression, employee: UserExpression, employeeId: IntExpression, exs: [EmployeeProfileExpression], first: Int, gender: GenderExpression, groupBy: [String!], hireDate: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: EmployeeProfileOrderBy, position: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): EmployeeProfileConnection
  employeeProfileList(address: StringExpression, after: ID, before: ID, birthDate: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, emergencyContact: StringExpression, emergencyContactPhone: StringExpression, employee: UserExpression, employeeId: IntExpression, exs: [EmployeeProfileExpression], first: Int, gender: GenderExpression, groupBy: [String!], hireDate: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: EmployeeProfileOrderBy, position: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [EmployeeProfile]
  group(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, exs: [GroupExpression], groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group
  groupConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, exs: [GroupExpression], first: Int, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): GroupConnection
  groupList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, exs: [GroupExpression], first: Int, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): [Group]
  groupRole(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleExpression], groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRole
  groupRoleConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleExpression], first: Int, groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupRoleOrderBy, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleConnection
  groupRoleList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleExpression], first: Int, groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupRoleOrderBy, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [GroupRole]
  isDeprecated: Boolean
  marketingObjective(annualGrossProfitTarget: FloatExpression, annualNetProfitTarget: FloatExpression, annualRevenueTarget: FloatExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [MarketingObjectiveExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, monthlyMarketingObjectives: MonthlyMarketingObjectiveExpression, monthlyTargetId: IntExpression, not: Boolean = false, notes: StringExpression, personnel: UserExpression, personnelId: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): MarketingObjective
  marketingObjectiveConnection(after: ID, annualGrossProfitTarget: FloatExpression, annualNetProfitTarget: FloatExpression, annualRevenueTarget: FloatExpression, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [MarketingObjectiveExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, monthlyMarketingObjectives: MonthlyMarketingObjectiveExpression, monthlyTargetId: IntExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: MarketingObjectiveOrderBy, personnel: UserExpression, personnelId: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): MarketingObjectiveConnection
  marketingObjectiveList(after: ID, annualGrossProfitTarget: FloatExpression, annualNetProfitTarget: FloatExpression, annualRevenueTarget: FloatExpression, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [MarketingObjectiveExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, monthlyMarketingObjectives: MonthlyMarketingObjectiveExpression, monthlyTargetId: IntExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: MarketingObjectiveOrderBy, personnel: UserExpression, personnelId: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [MarketingObjective]
  monthlyFinancialReport(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [MonthlyFinancialReportExpression], grossProfit: FloatExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, month: IntExpression, netProfit: FloatExpression, not: Boolean = false, operatingExpenses: FloatExpression, pickupToStationCost: FloatExpression, pickupToStationIncome: FloatExpression, portCost: FloatExpression, railwayCost: FloatExpression, railwayIncome: FloatExpression, railwayToDeliveryCost: FloatExpression, railwayToDeliveryIncome: FloatExpression, realmId: IntExpression, storageCost: FloatExpression, totalCost: FloatExpression, totalIncome: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, year: IntExpression): MonthlyFinancialReport
  monthlyFinancialReportConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [MonthlyFinancialReportExpression], first: Int, grossProfit: FloatExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, month: IntExpression, netProfit: FloatExpression, not: Boolean = false, offset: Int, operatingExpenses: FloatExpression, orderBy: MonthlyFinancialReportOrderBy, pickupToStationCost: FloatExpression, pickupToStationIncome: FloatExpression, portCost: FloatExpression, railwayCost: FloatExpression, railwayIncome: FloatExpression, railwayToDeliveryCost: FloatExpression, railwayToDeliveryIncome: FloatExpression, realmId: IntExpression, storageCost: FloatExpression, totalCost: FloatExpression, totalIncome: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, year: IntExpression): MonthlyFinancialReportConnection
  monthlyFinancialReportList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [MonthlyFinancialReportExpression], first: Int, grossProfit: FloatExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, month: IntExpression, netProfit: FloatExpression, not: Boolean = false, offset: Int, operatingExpenses: FloatExpression, orderBy: MonthlyFinancialReportOrderBy, pickupToStationCost: FloatExpression, pickupToStationIncome: FloatExpression, portCost: FloatExpression, railwayCost: FloatExpression, railwayIncome: FloatExpression, railwayToDeliveryCost: FloatExpression, railwayToDeliveryIncome: FloatExpression, realmId: IntExpression, storageCost: FloatExpression, totalCost: FloatExpression, totalIncome: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, year: IntExpression): [MonthlyFinancialReport]
  monthlyMarketingObjective(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [MonthlyMarketingObjectiveExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, month: IntExpression, monthlyGrossProfitTarget: FloatExpression, monthlyNetProfitTarget: FloatExpression, monthlyRevenueTarget: FloatExpression, not: Boolean = false, notes: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): MonthlyMarketingObjective
  monthlyMarketingObjectiveConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [MonthlyMarketingObjectiveExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, month: IntExpression, monthlyGrossProfitTarget: FloatExpression, monthlyNetProfitTarget: FloatExpression, monthlyRevenueTarget: FloatExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: MonthlyMarketingObjectiveOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): MonthlyMarketingObjectiveConnection
  monthlyMarketingObjectiveList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [MonthlyMarketingObjectiveExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, month: IntExpression, monthlyGrossProfitTarget: FloatExpression, monthlyNetProfitTarget: FloatExpression, monthlyRevenueTarget: FloatExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: MonthlyMarketingObjectiveOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [MonthlyMarketingObjective]
  order(agent: UserExpression, agentId: IntExpression, arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, businessType: BusinessTypeExpression, cargoItems: CargoItemExpression, chargeItems: ChargeItemExpression, cond: Conditional = AND, consignee: ContactInfoExpression, consigneeId: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: CustomerExpression, customerId: IntExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, exs: [OrderExpression], group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, notes: StringExpression, orderDate: StringExpression, orderNumber: StringExpression, plannedArrivalTime: StringExpression, plannedDepartureTime: StringExpression, project: ProjectExpression, projectId: IntExpression, realmId: IntExpression, serviceType: ServiceTypeExpression, shipper: ContactInfoExpression, shipperId: IntExpression, transportationMode: TransportationModeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Order
  orderConnection(after: ID, agent: UserExpression, agentId: IntExpression, arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, before: ID, businessType: BusinessTypeExpression, cargoItems: CargoItemExpression, chargeItems: ChargeItemExpression, cond: Conditional = AND, consignee: ContactInfoExpression, consigneeId: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: CustomerExpression, customerId: IntExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, exs: [OrderExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: OrderOrderBy, orderDate: StringExpression, orderNumber: StringExpression, plannedArrivalTime: StringExpression, plannedDepartureTime: StringExpression, project: ProjectExpression, projectId: IntExpression, realmId: IntExpression, serviceType: ServiceTypeExpression, shipper: ContactInfoExpression, shipperId: IntExpression, transportationMode: TransportationModeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): OrderConnection
  orderList(after: ID, agent: UserExpression, agentId: IntExpression, arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, before: ID, businessType: BusinessTypeExpression, cargoItems: CargoItemExpression, chargeItems: ChargeItemExpression, cond: Conditional = AND, consignee: ContactInfoExpression, consigneeId: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: CustomerExpression, customerId: IntExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, exs: [OrderExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: OrderOrderBy, orderDate: StringExpression, orderNumber: StringExpression, plannedArrivalTime: StringExpression, plannedDepartureTime: StringExpression, project: ProjectExpression, projectId: IntExpression, realmId: IntExpression, serviceType: ServiceTypeExpression, shipper: ContactInfoExpression, shipperId: IntExpression, transportationMode: TransportationModeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Order]
  paymentItem(amount: FloatExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PaymentItemExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, invoiceNumber: StringExpression, name: StringExpression, not: Boolean = false, notes: StringExpression, paymentType: ChargeTypeExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillId: StringExpression): PaymentItem
  paymentItemConnection(after: ID, amount: FloatExpression, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PaymentItemExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, invoiceNumber: StringExpression, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: PaymentItemOrderBy, paymentType: ChargeTypeExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillId: StringExpression): PaymentItemConnection
  paymentItemList(after: ID, amount: FloatExpression, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PaymentItemExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, invoiceNumber: StringExpression, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: PaymentItemOrderBy, paymentType: ChargeTypeExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillId: StringExpression): [PaymentItem]
  permission(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], field: StringExpression, groupBy: [String!], includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, rolePermission: RolePermissionExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Permission
  permissionConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], field: StringExpression, first: Int, groupBy: [String!], includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: PermissionOrderBy, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, rolePermission: RolePermissionExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionConnection
  permissionList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], field: StringExpression, first: Int, groupBy: [String!], includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: PermissionOrderBy, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, rolePermission: RolePermissionExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Permission]
  pickupWaybill(cargoItems: CargoItemExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, exs: [PickupWaybillExpression], group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, licensePlate: StringExpression, not: Boolean = false, onStationTime: StringExpression, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, pickupAddress: StringExpression, pickupTime: StringExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): PickupWaybill
  pickupWaybillConnection(after: ID, before: ID, cargoItems: CargoItemExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, exs: [PickupWaybillExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, licensePlate: StringExpression, not: Boolean = false, offset: Int, onStationTime: StringExpression, orderBy: PickupWaybillOrderBy, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, pickupAddress: StringExpression, pickupTime: StringExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): PickupWaybillConnection
  pickupWaybillList(after: ID, before: ID, cargoItems: CargoItemExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, exs: [PickupWaybillExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, licensePlate: StringExpression, not: Boolean = false, offset: Int, onStationTime: StringExpression, orderBy: PickupWaybillOrderBy, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, pickupAddress: StringExpression, pickupTime: StringExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): [PickupWaybill]
  policyList: [Policy]
  project(arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, businessType: BusinessTypeExpression, code: StringExpression, cond: Conditional = AND, contract: ContractExpression, contractId: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: CustomerExpression, customerId: IntExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, description: StringExpression, exs: [ProjectExpression], group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, manager: UserExpression, managerId: IntExpression, name: StringExpression, not: Boolean = false, notes: StringExpression, realmId: IntExpression, serviceType: ServiceTypeExpression, settlementMethod: SettlementMethodExpression, transportationMode: TransportationModeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Project
  projectConnection(after: ID, arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, before: ID, businessType: BusinessTypeExpression, code: StringExpression, cond: Conditional = AND, contract: ContractExpression, contractId: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: CustomerExpression, customerId: IntExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, description: StringExpression, exs: [ProjectExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, manager: UserExpression, managerId: IntExpression, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: ProjectOrderBy, realmId: IntExpression, serviceType: ServiceTypeExpression, settlementMethod: SettlementMethodExpression, transportationMode: TransportationModeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): ProjectConnection
  projectList(after: ID, arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, before: ID, businessType: BusinessTypeExpression, code: StringExpression, cond: Conditional = AND, contract: ContractExpression, contractId: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: CustomerExpression, customerId: IntExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, description: StringExpression, exs: [ProjectExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, manager: UserExpression, managerId: IntExpression, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: ProjectOrderBy, realmId: IntExpression, serviceType: ServiceTypeExpression, settlementMethod: SettlementMethodExpression, transportationMode: TransportationModeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Project]
  railwayBureau(code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RailwayBureauExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, notes: StringExpression, province: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayBureau
  railwayBureauConnection(after: ID, before: ID, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RailwayBureauExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: RailwayBureauOrderBy, province: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayBureauConnection
  railwayBureauList(after: ID, before: ID, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RailwayBureauExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: RailwayBureauOrderBy, province: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RailwayBureau]
  railwayWaybill(arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, arrivalTime: StringExpression, cargoItems: CargoItemExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, departureTime: StringExpression, exs: [RailwayWaybillExpression], group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, railwayWaybillTicketNumbers: RailwayWaybillTicketNumbersExpression, railwayWaybillTrainNumbers: RailwayWaybillTrainNumbersExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, ticketNumbers: StringExpression, trainCount: IntExpression, trainNumbers: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): RailwayWaybill
  railwayWaybillConnection(after: ID, arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, arrivalTime: StringExpression, before: ID, cargoItems: CargoItemExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, departureTime: StringExpression, exs: [RailwayWaybillExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayWaybillOrderBy, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, railwayWaybillTicketNumbers: RailwayWaybillTicketNumbersExpression, railwayWaybillTrainNumbers: RailwayWaybillTrainNumbersExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, ticketNumbers: StringExpression, trainCount: IntExpression, trainNumbers: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): RailwayWaybillConnection
  railwayWaybillList(after: ID, arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, arrivalTime: StringExpression, before: ID, cargoItems: CargoItemExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, departureTime: StringExpression, exs: [RailwayWaybillExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayWaybillOrderBy, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, railwayWaybillTicketNumbers: RailwayWaybillTicketNumbersExpression, railwayWaybillTrainNumbers: RailwayWaybillTrainNumbersExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, ticketNumbers: StringExpression, trainCount: IntExpression, trainNumbers: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): [RailwayWaybill]
  railwayWaybillTicketNumbers(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayWaybillTicketNumbersExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, ticketNumber: StringExpression, ticketNumberId: IntExpression, ticketNumberIdType: RailwayWaybillExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayWaybillTicketNumbers
  railwayWaybillTicketNumbersConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayWaybillTicketNumbersExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayWaybillTicketNumbersOrderBy, realmId: IntExpression, ticketNumber: StringExpression, ticketNumberId: IntExpression, ticketNumberIdType: RailwayWaybillExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayWaybillTicketNumbersConnection
  railwayWaybillTicketNumbersList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayWaybillTicketNumbersExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayWaybillTicketNumbersOrderBy, realmId: IntExpression, ticketNumber: StringExpression, ticketNumberId: IntExpression, ticketNumberIdType: RailwayWaybillExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RailwayWaybillTicketNumbers]
  railwayWaybillTrainNumbers(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayWaybillTrainNumbersExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, railwayWaybillId: IntExpression, railwayWaybillIdType: RailwayWaybillExpression, realmId: IntExpression, trainNumber: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayWaybillTrainNumbers
  railwayWaybillTrainNumbersConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayWaybillTrainNumbersExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayWaybillTrainNumbersOrderBy, railwayWaybillId: IntExpression, railwayWaybillIdType: RailwayWaybillExpression, realmId: IntExpression, trainNumber: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayWaybillTrainNumbersConnection
  railwayWaybillTrainNumbersList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayWaybillTrainNumbersExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayWaybillTrainNumbersOrderBy, railwayWaybillId: IntExpression, railwayWaybillIdType: RailwayWaybillExpression, realmId: IntExpression, trainNumber: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RailwayWaybillTrainNumbers]
  realm(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RealmExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RealmExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RealmOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RealmConnection
  realmId: Int
  realmList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RealmExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RealmOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Realm]
  role(composites: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], groupBy: [String!], groupRole: GroupRoleExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleComposite: RoleCompositeExpression, rolePermission: RolePermissionExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  roleComposite(compositeId: IntExpression, compositeIdType: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleComposite
  roleCompositeConnection(after: ID, before: ID, compositeId: IntExpression, compositeIdType: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleCompositeOrderBy, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleCompositeConnection
  roleCompositeList(after: ID, before: ID, compositeId: IntExpression, compositeIdType: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleCompositeOrderBy, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RoleComposite]
  roleConnection(after: ID, before: ID, composites: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], first: Int, groupBy: [String!], groupRole: GroupRoleExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleComposite: RoleCompositeExpression, rolePermission: RolePermissionExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): RoleConnection
  roleList(after: ID, before: ID, composites: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], first: Int, groupBy: [String!], groupRole: GroupRoleExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleComposite: RoleCompositeExpression, rolePermission: RolePermissionExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): [Role]
  rolePermission(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RolePermissionExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, permissionName: StringExpression, permissionNameType: PermissionExpression, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RolePermission
  rolePermissionConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RolePermissionExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RolePermissionOrderBy, permissionName: StringExpression, permissionNameType: PermissionExpression, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RolePermissionConnection
  rolePermissionList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RolePermissionExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RolePermissionOrderBy, permissionName: StringExpression, permissionNameType: PermissionExpression, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RolePermission]
  salaryCalculation(basicSalary: FloatExpression, bonuses: FloatExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deductions: FloatExpression, employee: UserExpression, employeeId: IntExpression, exs: [SalaryCalculationExpression], grossSalary: FloatExpression, groupBy: [String!], housingFund: FloatExpression, id: StringExpression, includeDeprecated: Boolean = false, month: IntExpression, netSalary: FloatExpression, not: Boolean = false, notes: StringExpression, otherAllowances: FloatExpression, overtimePay: FloatExpression, realmId: IntExpression, socialSecurity: FloatExpression, tax: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, year: IntExpression): SalaryCalculation
  salaryCalculationConnection(after: ID, basicSalary: FloatExpression, before: ID, bonuses: FloatExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deductions: FloatExpression, employee: UserExpression, employeeId: IntExpression, exs: [SalaryCalculationExpression], first: Int, grossSalary: FloatExpression, groupBy: [String!], housingFund: FloatExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, month: IntExpression, netSalary: FloatExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: SalaryCalculationOrderBy, otherAllowances: FloatExpression, overtimePay: FloatExpression, realmId: IntExpression, socialSecurity: FloatExpression, tax: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, year: IntExpression): SalaryCalculationConnection
  salaryCalculationList(after: ID, basicSalary: FloatExpression, before: ID, bonuses: FloatExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deductions: FloatExpression, employee: UserExpression, employeeId: IntExpression, exs: [SalaryCalculationExpression], first: Int, grossSalary: FloatExpression, groupBy: [String!], housingFund: FloatExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, month: IntExpression, netSalary: FloatExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: SalaryCalculationOrderBy, otherAllowances: FloatExpression, overtimePay: FloatExpression, realmId: IntExpression, socialSecurity: FloatExpression, tax: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, year: IntExpression): [SalaryCalculation]
  supplier(address: StringExpression, city: StringExpression, code: StringExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, email: StringExpression, exs: [SupplierExpression], fax: StringExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, notes: StringExpression, phoneNumber: StringExpression, postalCode: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Supplier
  supplierConnection(address: StringExpression, after: ID, before: ID, city: StringExpression, code: StringExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, email: StringExpression, exs: [SupplierExpression], fax: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: SupplierOrderBy, phoneNumber: StringExpression, postalCode: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): SupplierConnection
  supplierList(address: StringExpression, after: ID, before: ID, city: StringExpression, code: StringExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, email: StringExpression, exs: [SupplierExpression], fax: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: SupplierOrderBy, phoneNumber: StringExpression, postalCode: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Supplier]
  targetCustomer(challenges: StringExpression, cond: Conditional = AND, connectableResources: StringExpression, contactInformation: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, creditInvestigation: StringExpression, decisionMaker: StringExpression, description: StringExpression, exs: [TargetCustomerExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, logisticsMatching: StringExpression, name: StringExpression, needsAnalysis: StringExpression, not: Boolean = false, notes: StringExpression, otherInfluencingFactors: StringExpression, productMatching: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TargetCustomer
  targetCustomerConnection(after: ID, before: ID, challenges: StringExpression, cond: Conditional = AND, connectableResources: StringExpression, contactInformation: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, creditInvestigation: StringExpression, decisionMaker: StringExpression, description: StringExpression, exs: [TargetCustomerExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, logisticsMatching: StringExpression, name: StringExpression, needsAnalysis: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: TargetCustomerOrderBy, otherInfluencingFactors: StringExpression, productMatching: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TargetCustomerConnection
  targetCustomerList(after: ID, before: ID, challenges: StringExpression, cond: Conditional = AND, connectableResources: StringExpression, contactInformation: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, creditInvestigation: StringExpression, decisionMaker: StringExpression, description: StringExpression, exs: [TargetCustomerExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, logisticsMatching: StringExpression, name: StringExpression, needsAnalysis: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: TargetCustomerOrderBy, otherInfluencingFactors: StringExpression, productMatching: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [TargetCustomer]
  trainStation(address: StringExpression, city: StringExpression, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, exs: [TrainStationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, notes: StringExpression, province: StringExpression, railwayBureau: RailwayBureauExpression, railwayBureauId: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TrainStation
  trainStationConnection(address: StringExpression, after: ID, before: ID, city: StringExpression, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, exs: [TrainStationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: TrainStationOrderBy, province: StringExpression, railwayBureau: RailwayBureauExpression, railwayBureauId: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TrainStationConnection
  trainStationList(address: StringExpression, after: ID, before: ID, city: StringExpression, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, exs: [TrainStationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: TrainStationOrderBy, province: StringExpression, railwayBureau: RailwayBureauExpression, railwayBureauId: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [TrainStation]
  updateTime: Timestamp
  updateUserId: String
  user(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, not: Boolean = false, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): User
  userConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, not: Boolean = false, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): UserConnection
  userGroup(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserGroupExpression], groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, userIdType: UserExpression, version: IntExpression): UserGroup
  userGroupConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserGroupExpression], first: Int, groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserGroupOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, userIdType: UserExpression, version: IntExpression): UserGroupConnection
  userGroupList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserGroupExpression], first: Int, groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserGroupOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, userIdType: UserExpression, version: IntExpression): [UserGroup]
  userList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, not: Boolean = false, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): [User]
  userPhones(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, phone: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, userIdType: UserExpression, version: IntExpression): UserPhones
  userPhonesConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserPhonesOrderBy, phone: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, userIdType: UserExpression, version: IntExpression): UserPhonesConnection
  userPhonesList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserPhonesOrderBy, phone: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, userIdType: UserExpression, version: IntExpression): [UserPhones]
  userRole(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserRoleExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, userIdType: UserExpression, version: IntExpression): UserRole
  userRoleConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserRoleExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserRoleOrderBy, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, userIdType: UserExpression, version: IntExpression): UserRoleConnection
  userRoleList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserRoleExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserRoleOrderBy, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, userIdType: UserExpression, version: IntExpression): [UserRole]
  version: Int
}

input Query_currentPermissionNameList_Arguments {
  types: [String]
}

"""铁路局"""
type RailwayBureau implements Meta & NamedStruct {
  """代码"""
  code: String!
  codeCount: Int
  codeMax: String
  codeMin: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """名称"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """备注"""
  notes: String
  notesCount: Int
  notesMax: String
  notesMin: String

  """省"""
  province: String
  provinceCount: Int
  provinceMax: String
  provinceMin: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type RailwayBureauConnection {
  edges: [RailwayBureauEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RailwayBureauConnectionQueryArguments {
  after: ID
  before: ID
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RailwayBureauExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: RailwayBureauOrderBy
  province: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayBureauConnectionSubscriptionArguments {
  after: ID
  before: ID
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RailwayBureauExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: RailwayBureauOrderBy
  province: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RailwayBureauEdge {
  cursor: ID
  node: RailwayBureau
}

input RailwayBureauExpression {
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RailwayBureauExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  province: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayBureauInput {
  code: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  name: String
  notes: String
  province: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RailwayBureauExpression
}

input RailwayBureauListMutationArguments {
  code: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  list: [RailwayBureauInput]
  name: String
  notes: String
  province: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RailwayBureauExpression
}

input RailwayBureauListQueryArguments {
  after: ID
  before: ID
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RailwayBureauExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: RailwayBureauOrderBy
  province: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayBureauListSubscriptionArguments {
  after: ID
  before: ID
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RailwayBureauExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: RailwayBureauOrderBy
  province: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayBureauMutationArguments {
  code: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  name: String
  notes: String
  province: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RailwayBureauExpression
}

input RailwayBureauOrderBy {
  code: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  notes: Sort
  province: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RailwayBureauQueryArguments {
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RailwayBureauExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  province: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayBureauSubscriptionArguments {
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RailwayBureauExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  province: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

"""发运"""
type RailwayWaybill implements Meta {
  """到达站"""
  arrivalStation(address: StringExpression, city: StringExpression, code: StringExpression, description: StringExpression, district: StringExpression, groupBy: [String!], id: StringExpression, name: StringExpression, notes: StringExpression, province: StringExpression, railwayBureau: RailwayBureauExpression): TrainStation!
  arrivalStationId: Int
  arrivalStationIdAvg: Int
  arrivalStationIdCount: Int
  arrivalStationIdMax: Int
  arrivalStationIdMin: Int
  arrivalStationIdSum: Int

  """到站时间"""
  arrivalTime: Timestamp!
  arrivalTimeCount: Int
  arrivalTimeMax: Timestamp
  arrivalTimeMin: Timestamp

  """货物信息"""
  cargoItems(after: ID, before: ID, description: StringExpression, exceptionCount: IntExpression, exceptionDescription: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, model: StringExpression, name: StringExpression, notes: StringExpression, offset: Int, order: OrderExpression, orderBy: CargoItemOrderBy, packaging: StringExpression, quantity: IntExpression, volume: FloatExpression, weight: FloatExpression): [CargoItem!]!
  cargoItemsAggregate(description: StringExpression, exceptionCount: IntExpression, exceptionDescription: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, model: StringExpression, name: StringExpression, notes: StringExpression, offset: Int, order: OrderExpression, orderBy: CargoItemOrderBy, packaging: StringExpression, quantity: IntExpression, volume: FloatExpression, weight: FloatExpression): CargoItem
  cargoItemsConnection(after: ID, before: ID, description: StringExpression, exceptionCount: IntExpression, exceptionDescription: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, model: StringExpression, name: StringExpression, notes: StringExpression, offset: Int, order: OrderExpression, orderBy: CargoItemOrderBy, packaging: StringExpression, quantity: IntExpression, volume: FloatExpression, weight: FloatExpression): CargoItemConnection

  """联系人"""
  contactPerson: String
  contactPersonCount: Int
  contactPersonMax: String
  contactPersonMin: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """始发站"""
  departureStation(address: StringExpression, city: StringExpression, code: StringExpression, description: StringExpression, district: StringExpression, groupBy: [String!], id: StringExpression, name: StringExpression, notes: StringExpression, province: StringExpression, railwayBureau: RailwayBureauExpression): TrainStation!
  departureStationId: Int
  departureStationIdAvg: Int
  departureStationIdCount: Int
  departureStationIdMax: Int
  departureStationIdMin: Int
  departureStationIdSum: Int

  """发车时间"""
  departureTime: Timestamp!
  departureTimeCount: Int
  departureTimeMax: Timestamp
  departureTimeMin: Timestamp

  """所属公司"""
  group(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group
  groupId: Int
  groupIdAvg: Int
  groupIdCount: Int
  groupIdMax: Int
  groupIdMin: Int
  groupIdSum: Int

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """付费信息"""
  paymentItems(after: ID, amount: FloatExpression, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, invoiceNumber: StringExpression, last: Int, name: StringExpression, notes: StringExpression, offset: Int, orderBy: PaymentItemOrderBy, paymentType: ChargeTypeExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillId: StringExpression): [PaymentItem!]
  paymentItemsAggregate(amount: FloatExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, invoiceNumber: StringExpression, last: Int, name: StringExpression, notes: StringExpression, offset: Int, orderBy: PaymentItemOrderBy, paymentType: ChargeTypeExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillId: StringExpression): PaymentItem
  paymentItemsConnection(after: ID, amount: FloatExpression, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, invoiceNumber: StringExpression, last: Int, name: StringExpression, notes: StringExpression, offset: Int, orderBy: PaymentItemOrderBy, paymentType: ChargeTypeExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillId: StringExpression): PaymentItemConnection

  """手机号"""
  phoneNumber: String
  phoneNumberCount: Int
  phoneNumberMax: String
  phoneNumberMin: String
  railwayWaybillTicketNumbers: [RailwayWaybillTicketNumbers]
  railwayWaybillTicketNumbersAggregate(first: Int, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: RailwayWaybillTicketNumbersOrderBy, ticketNumber: StringExpression, ticketNumberId: IntExpression, ticketNumberIdType: RailwayWaybillExpression): RailwayWaybillTicketNumbers
  railwayWaybillTicketNumbersConnection(first: Int, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: RailwayWaybillTicketNumbersOrderBy, ticketNumber: StringExpression, ticketNumberId: IntExpression, ticketNumberIdType: RailwayWaybillExpression): RailwayWaybillTicketNumbersConnection
  railwayWaybillTrainNumbers: [RailwayWaybillTrainNumbers]
  railwayWaybillTrainNumbersAggregate(first: Int, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: RailwayWaybillTrainNumbersOrderBy, railwayWaybillId: IntExpression, railwayWaybillIdType: RailwayWaybillExpression, trainNumber: StringExpression): RailwayWaybillTrainNumbers
  railwayWaybillTrainNumbersConnection(first: Int, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: RailwayWaybillTrainNumbersOrderBy, railwayWaybillId: IntExpression, railwayWaybillIdType: RailwayWaybillExpression, trainNumber: StringExpression): RailwayWaybillTrainNumbersConnection
  realmId: Int

  """供应商"""
  supplier(address: StringExpression, city: StringExpression, code: StringExpression, contactPerson: StringExpression, description: StringExpression, district: StringExpression, email: StringExpression, fax: StringExpression, group: GroupExpression, groupBy: [String!], id: StringExpression, name: StringExpression, notes: StringExpression, phoneNumber: StringExpression, postalCode: StringExpression): Supplier
  supplierId: Int
  supplierIdAvg: Int
  supplierIdCount: Int
  supplierIdMax: Int
  supplierIdMin: Int
  supplierIdSum: Int

  """铁路大票号"""
  ticketNumbers(first: Int, in: [String], last: Int, offset: Int, opr: Operator = EQ, sort: Sort, val: String): [String!]

  """车皮数"""
  trainCount: Int
  trainCountAvg: Int
  trainCountCount: Int
  trainCountMax: Int
  trainCountMin: Int
  trainCountSum: Int

  """车皮号"""
  trainNumbers(first: Int, in: [String], last: Int, offset: Int, opr: Operator = EQ, sort: Sort, val: String): [String!]
  updateTime: Timestamp
  updateUserId: String
  version: Int

  """运单号"""
  waybillNumber: String!
  waybillNumberCount: Int
  waybillNumberMax: String
  waybillNumberMin: String
}

type RailwayWaybillConnection {
  edges: [RailwayWaybillEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RailwayWaybillConnectionQueryArguments {
  after: ID
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  arrivalTime: StringExpression
  before: ID
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  departureTime: StringExpression
  exs: [RailwayWaybillExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayWaybillOrderBy
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  railwayWaybillTicketNumbers: RailwayWaybillTicketNumbersExpression
  railwayWaybillTrainNumbers: RailwayWaybillTrainNumbersExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  ticketNumbers: StringExpression
  trainCount: IntExpression
  trainNumbers: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

input RailwayWaybillConnectionSubscriptionArguments {
  after: ID
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  arrivalTime: StringExpression
  before: ID
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  departureTime: StringExpression
  exs: [RailwayWaybillExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayWaybillOrderBy
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  railwayWaybillTicketNumbers: RailwayWaybillTicketNumbersExpression
  railwayWaybillTrainNumbers: RailwayWaybillTrainNumbersExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  ticketNumbers: StringExpression
  trainCount: IntExpression
  trainNumbers: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

type RailwayWaybillEdge {
  cursor: ID
  node: RailwayWaybill
}

input RailwayWaybillExpression {
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  arrivalTime: StringExpression
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  departureTime: StringExpression
  exs: [RailwayWaybillExpression]
  group: GroupExpression
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  railwayWaybillTicketNumbers: RailwayWaybillTicketNumbersExpression
  railwayWaybillTrainNumbers: RailwayWaybillTrainNumbersExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  ticketNumbers: StringExpression
  trainCount: IntExpression
  trainNumbers: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

input RailwayWaybillInput {
  arrivalStation: TrainStationInput
  arrivalStationId: Int
  arrivalTime: Timestamp
  cargoItems: [CargoItemInput]
  contactPerson: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  departureStation: TrainStationInput
  departureStationId: Int
  departureTime: Timestamp
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  paymentItems: [PaymentItemInput]
  phoneNumber: String
  railwayWaybillTicketNumbers: [RailwayWaybillTicketNumbersInput]
  railwayWaybillTrainNumbers: [RailwayWaybillTrainNumbersInput]
  realmId: Int
  supplier: SupplierInput
  supplierId: Int
  ticketNumbers: [String]
  trainCount: Int
  trainNumbers: [String]
  updateTime: Timestamp
  updateUserId: String
  version: Int
  waybillNumber: String
  where: RailwayWaybillExpression
}

input RailwayWaybillListMutationArguments {
  arrivalStation: TrainStationInput
  arrivalStationId: Int
  arrivalTime: Timestamp
  cargoItems: [CargoItemInput]
  contactPerson: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  departureStation: TrainStationInput
  departureStationId: Int
  departureTime: Timestamp
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  list: [RailwayWaybillInput]
  paymentItems: [PaymentItemInput]
  phoneNumber: String
  railwayWaybillTicketNumbers: [RailwayWaybillTicketNumbersInput]
  railwayWaybillTrainNumbers: [RailwayWaybillTrainNumbersInput]
  realmId: Int
  supplier: SupplierInput
  supplierId: Int
  ticketNumbers: [String]
  trainCount: Int
  trainNumbers: [String]
  updateTime: Timestamp
  updateUserId: String
  version: Int
  waybillNumber: String
  where: RailwayWaybillExpression
}

input RailwayWaybillListQueryArguments {
  after: ID
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  arrivalTime: StringExpression
  before: ID
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  departureTime: StringExpression
  exs: [RailwayWaybillExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayWaybillOrderBy
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  railwayWaybillTicketNumbers: RailwayWaybillTicketNumbersExpression
  railwayWaybillTrainNumbers: RailwayWaybillTrainNumbersExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  ticketNumbers: StringExpression
  trainCount: IntExpression
  trainNumbers: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

input RailwayWaybillListSubscriptionArguments {
  after: ID
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  arrivalTime: StringExpression
  before: ID
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  departureTime: StringExpression
  exs: [RailwayWaybillExpression]
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayWaybillOrderBy
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  railwayWaybillTicketNumbers: RailwayWaybillTicketNumbersExpression
  railwayWaybillTrainNumbers: RailwayWaybillTrainNumbersExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  ticketNumbers: StringExpression
  trainCount: IntExpression
  trainNumbers: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

input RailwayWaybillMutationArguments {
  arrivalStation: TrainStationInput
  arrivalStationId: Int
  arrivalTime: Timestamp
  cargoItems: [CargoItemInput]
  contactPerson: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  departureStation: TrainStationInput
  departureStationId: Int
  departureTime: Timestamp
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  paymentItems: [PaymentItemInput]
  phoneNumber: String
  railwayWaybillTicketNumbers: [RailwayWaybillTicketNumbersInput]
  railwayWaybillTrainNumbers: [RailwayWaybillTrainNumbersInput]
  realmId: Int
  supplier: SupplierInput
  supplierId: Int
  ticketNumbers: [String]
  trainCount: Int
  trainNumbers: [String]
  updateTime: Timestamp
  updateUserId: String
  version: Int
  waybillNumber: String
  where: RailwayWaybillExpression
}

input RailwayWaybillOrderBy {
  arrivalStationId: Sort
  arrivalTime: Sort
  contactPerson: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  departureStationId: Sort
  departureTime: Sort
  groupId: Sort
  id: Sort
  isDeprecated: Sort
  phoneNumber: Sort
  realmId: Sort
  supplierId: Sort
  trainCount: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
  waybillNumber: Sort
}

input RailwayWaybillQueryArguments {
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  arrivalTime: StringExpression
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  departureTime: StringExpression
  exs: [RailwayWaybillExpression]
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  railwayWaybillTicketNumbers: RailwayWaybillTicketNumbersExpression
  railwayWaybillTrainNumbers: RailwayWaybillTrainNumbersExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  ticketNumbers: StringExpression
  trainCount: IntExpression
  trainNumbers: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

input RailwayWaybillSubscriptionArguments {
  arrivalStation: TrainStationExpression
  arrivalStationId: IntExpression
  arrivalTime: StringExpression
  cargoItems: CargoItemExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  departureStation: TrainStationExpression
  departureStationId: IntExpression
  departureTime: StringExpression
  exs: [RailwayWaybillExpression]
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  paymentItems: PaymentItemExpression
  phoneNumber: StringExpression
  railwayWaybillTicketNumbers: RailwayWaybillTicketNumbersExpression
  railwayWaybillTrainNumbers: RailwayWaybillTrainNumbersExpression
  realmId: IntExpression
  supplier: SupplierExpression
  supplierId: IntExpression
  ticketNumbers: StringExpression
  trainCount: IntExpression
  trainNumbers: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  waybillNumber: StringExpression
}

type RailwayWaybillTicketNumbers implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  ticketNumber: String
  ticketNumberCount: Int
  ticketNumberId: Int
  ticketNumberIdAvg: Int
  ticketNumberIdCount: Int
  ticketNumberIdMax: Int
  ticketNumberIdMin: Int
  ticketNumberIdSum: Int
  ticketNumberIdType(arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, arrivalTime: StringExpression, cargoItems: CargoItemExpression, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, departureTime: StringExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, railwayWaybillTicketNumbers: RailwayWaybillTicketNumbersExpression, railwayWaybillTrainNumbers: RailwayWaybillTrainNumbersExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, ticketNumbers: StringExpression, trainCount: IntExpression, trainNumbers: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): RailwayWaybill
  ticketNumberMax: String
  ticketNumberMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type RailwayWaybillTicketNumbersConnection {
  edges: [RailwayWaybillTicketNumbersEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RailwayWaybillTicketNumbersConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayWaybillTicketNumbersExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayWaybillTicketNumbersOrderBy
  realmId: IntExpression
  ticketNumber: StringExpression
  ticketNumberId: IntExpression
  ticketNumberIdType: RailwayWaybillExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayWaybillTicketNumbersConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayWaybillTicketNumbersExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayWaybillTicketNumbersOrderBy
  realmId: IntExpression
  ticketNumber: StringExpression
  ticketNumberId: IntExpression
  ticketNumberIdType: RailwayWaybillExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RailwayWaybillTicketNumbersEdge {
  cursor: ID
  node: RailwayWaybillTicketNumbers
}

input RailwayWaybillTicketNumbersExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayWaybillTicketNumbersExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  ticketNumber: StringExpression
  ticketNumberId: IntExpression
  ticketNumberIdType: RailwayWaybillExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayWaybillTicketNumbersInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  realmId: Int
  ticketNumber: String
  ticketNumberId: Int
  ticketNumberIdType: RailwayWaybillInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RailwayWaybillTicketNumbersExpression
}

input RailwayWaybillTicketNumbersListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  list: [RailwayWaybillTicketNumbersInput]
  realmId: Int
  ticketNumber: String
  ticketNumberId: Int
  ticketNumberIdType: RailwayWaybillInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RailwayWaybillTicketNumbersExpression
}

input RailwayWaybillTicketNumbersListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayWaybillTicketNumbersExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayWaybillTicketNumbersOrderBy
  realmId: IntExpression
  ticketNumber: StringExpression
  ticketNumberId: IntExpression
  ticketNumberIdType: RailwayWaybillExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayWaybillTicketNumbersListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayWaybillTicketNumbersExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayWaybillTicketNumbersOrderBy
  realmId: IntExpression
  ticketNumber: StringExpression
  ticketNumberId: IntExpression
  ticketNumberIdType: RailwayWaybillExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayWaybillTicketNumbersMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  realmId: Int
  ticketNumber: String
  ticketNumberId: Int
  ticketNumberIdType: RailwayWaybillInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RailwayWaybillTicketNumbersExpression
}

input RailwayWaybillTicketNumbersOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  ticketNumber: Sort
  ticketNumberId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RailwayWaybillTicketNumbersQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayWaybillTicketNumbersExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  ticketNumber: StringExpression
  ticketNumberId: IntExpression
  ticketNumberIdType: RailwayWaybillExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayWaybillTicketNumbersSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayWaybillTicketNumbersExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  ticketNumber: StringExpression
  ticketNumberId: IntExpression
  ticketNumberIdType: RailwayWaybillExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RailwayWaybillTrainNumbers implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  railwayWaybillId: Int
  railwayWaybillIdAvg: Int
  railwayWaybillIdCount: Int
  railwayWaybillIdMax: Int
  railwayWaybillIdMin: Int
  railwayWaybillIdSum: Int
  railwayWaybillIdType(arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, arrivalTime: StringExpression, cargoItems: CargoItemExpression, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, departureTime: StringExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, railwayWaybillTicketNumbers: RailwayWaybillTicketNumbersExpression, railwayWaybillTrainNumbers: RailwayWaybillTrainNumbersExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, ticketNumbers: StringExpression, trainCount: IntExpression, trainNumbers: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): RailwayWaybill
  realmId: Int
  trainNumber: String
  trainNumberCount: Int
  trainNumberMax: String
  trainNumberMin: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type RailwayWaybillTrainNumbersConnection {
  edges: [RailwayWaybillTrainNumbersEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RailwayWaybillTrainNumbersConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayWaybillTrainNumbersExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayWaybillTrainNumbersOrderBy
  railwayWaybillId: IntExpression
  railwayWaybillIdType: RailwayWaybillExpression
  realmId: IntExpression
  trainNumber: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayWaybillTrainNumbersConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayWaybillTrainNumbersExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayWaybillTrainNumbersOrderBy
  railwayWaybillId: IntExpression
  railwayWaybillIdType: RailwayWaybillExpression
  realmId: IntExpression
  trainNumber: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RailwayWaybillTrainNumbersEdge {
  cursor: ID
  node: RailwayWaybillTrainNumbers
}

input RailwayWaybillTrainNumbersExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayWaybillTrainNumbersExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  railwayWaybillId: IntExpression
  railwayWaybillIdType: RailwayWaybillExpression
  realmId: IntExpression
  trainNumber: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayWaybillTrainNumbersInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  railwayWaybillId: Int
  railwayWaybillIdType: RailwayWaybillInput
  realmId: Int
  trainNumber: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RailwayWaybillTrainNumbersExpression
}

input RailwayWaybillTrainNumbersListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  list: [RailwayWaybillTrainNumbersInput]
  railwayWaybillId: Int
  railwayWaybillIdType: RailwayWaybillInput
  realmId: Int
  trainNumber: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RailwayWaybillTrainNumbersExpression
}

input RailwayWaybillTrainNumbersListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayWaybillTrainNumbersExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayWaybillTrainNumbersOrderBy
  railwayWaybillId: IntExpression
  railwayWaybillIdType: RailwayWaybillExpression
  realmId: IntExpression
  trainNumber: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayWaybillTrainNumbersListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayWaybillTrainNumbersExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RailwayWaybillTrainNumbersOrderBy
  railwayWaybillId: IntExpression
  railwayWaybillIdType: RailwayWaybillExpression
  realmId: IntExpression
  trainNumber: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayWaybillTrainNumbersMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  railwayWaybillId: Int
  railwayWaybillIdType: RailwayWaybillInput
  realmId: Int
  trainNumber: String
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RailwayWaybillTrainNumbersExpression
}

input RailwayWaybillTrainNumbersOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  railwayWaybillId: Sort
  realmId: Sort
  trainNumber: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RailwayWaybillTrainNumbersQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayWaybillTrainNumbersExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  railwayWaybillId: IntExpression
  railwayWaybillIdType: RailwayWaybillExpression
  realmId: IntExpression
  trainNumber: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RailwayWaybillTrainNumbersSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RailwayWaybillTrainNumbersExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  railwayWaybillId: IntExpression
  railwayWaybillIdType: RailwayWaybillExpression
  realmId: IntExpression
  trainNumber: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

"""租户"""
type Realm implements Meta & NamedStruct {
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """名称"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type RealmConnection {
  edges: [RealmEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RealmConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RealmOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RealmConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RealmOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RealmEdge {
  cursor: ID
  node: Realm
}

input RealmExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RealmInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  name: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RealmExpression
}

input RealmListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  list: [RealmInput]
  name: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RealmExpression
}

input RealmListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RealmOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RealmListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RealmOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RealmMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  name: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RealmExpression
}

input RealmOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RealmQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RealmSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RealmExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

"""角色"""
type Role implements Meta & NamedStruct {
  """组合"""
  composites(after: ID, before: ID, composites: RoleExpression, description: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, users: UserExpression): [Role]
  compositesAggregate(composites: RoleExpression, description: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, users: UserExpression): Role
  compositesConnection(after: ID, before: ID, composites: RoleExpression, description: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, users: UserExpression): RoleConnection
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String
  groupRole: [GroupRole]
  groupRoleAggregate(first: Int, groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, last: Int, offset: Int, orderBy: GroupRoleOrderBy, roleId: IntExpression, roleIdType: RoleExpression): GroupRole
  groupRoleConnection(first: Int, groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, last: Int, offset: Int, orderBy: GroupRoleOrderBy, roleId: IntExpression, roleIdType: RoleExpression): GroupRoleConnection

  """组"""
  groups(after: ID, before: ID, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, roles: RoleExpression, subGroups: GroupExpression, users: UserExpression): [Group]
  groupsAggregate(deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, roles: RoleExpression, subGroups: GroupExpression, users: UserExpression): Group
  groupsConnection(after: ID, before: ID, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, roles: RoleExpression, subGroups: GroupExpression, users: UserExpression): GroupConnection

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """名称"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """权限"""
  permissions(after: ID, before: ID, description: StringExpression, field: StringExpression, first: Int, groupBy: [String!], last: Int, name: StringExpression, offset: Int, orderBy: PermissionOrderBy, permissionType: PermissionTypeExpression, realm: RealmExpression, roles: RoleExpression, type: StringExpression): [Permission]
  permissionsAggregate(description: StringExpression, field: StringExpression, first: Int, groupBy: [String!], last: Int, name: StringExpression, offset: Int, orderBy: PermissionOrderBy, permissionType: PermissionTypeExpression, realm: RealmExpression, roles: RoleExpression, type: StringExpression): Permission
  permissionsConnection(after: ID, before: ID, description: StringExpression, field: StringExpression, first: Int, groupBy: [String!], last: Int, name: StringExpression, offset: Int, orderBy: PermissionOrderBy, permissionType: PermissionTypeExpression, realm: RealmExpression, roles: RoleExpression, type: StringExpression): PermissionConnection

  """租户"""
  realm(description: StringExpression, groupBy: [String!], id: StringExpression, name: StringExpression): Realm
  realmId: Int
  realmIdAvg: Int
  realmIdCount: Int
  realmIdMax: Int
  realmIdMin: Int
  realmIdSum: Int
  roleComposite: [RoleComposite]
  roleCompositeAggregate(compositeId: IntExpression, compositeIdType: RoleExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: RoleCompositeOrderBy, roleId: IntExpression, roleIdType: RoleExpression): RoleComposite
  roleCompositeConnection(compositeId: IntExpression, compositeIdType: RoleExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: RoleCompositeOrderBy, roleId: IntExpression, roleIdType: RoleExpression): RoleCompositeConnection
  rolePermission: [RolePermission]
  rolePermissionAggregate(first: Int, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: RolePermissionOrderBy, permissionName: StringExpression, permissionNameType: PermissionExpression, roleId: IntExpression, roleIdType: RoleExpression): RolePermission
  rolePermissionConnection(first: Int, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: RolePermissionOrderBy, permissionName: StringExpression, permissionNameType: PermissionExpression, roleId: IntExpression, roleIdType: RoleExpression): RolePermissionConnection
  syncRolePolicy: Boolean
  updateTime: Timestamp
  updateUserId: String
  userRole: [UserRole]
  userRoleAggregate(first: Int, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: UserRoleOrderBy, roleId: IntExpression, roleIdType: RoleExpression, userId: IntExpression, userIdType: UserExpression): UserRole
  userRoleConnection(first: Int, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: UserRoleOrderBy, roleId: IntExpression, roleIdType: RoleExpression, userId: IntExpression, userIdType: UserExpression): UserRoleConnection

  """用户"""
  users(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): [User]
  usersAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): User
  usersConnection(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): UserConnection
  version: Int
}

type RoleComposite implements Meta {
  compositeId: Int
  compositeIdAvg: Int
  compositeIdCount: Int
  compositeIdMax: Int
  compositeIdMin: Int
  compositeIdSum: Int
  compositeIdType(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], groupRole: GroupRoleExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleComposite: RoleCompositeExpression, rolePermission: RolePermissionExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  roleIdAvg: Int
  roleIdCount: Int
  roleIdMax: Int
  roleIdMin: Int
  roleIdSum: Int
  roleIdType(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], groupRole: GroupRoleExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleComposite: RoleCompositeExpression, rolePermission: RolePermissionExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type RoleCompositeConnection {
  edges: [RoleCompositeEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RoleCompositeConnectionQueryArguments {
  after: ID
  before: ID
  compositeId: IntExpression
  compositeIdType: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleCompositeOrderBy
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleCompositeConnectionSubscriptionArguments {
  after: ID
  before: ID
  compositeId: IntExpression
  compositeIdType: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleCompositeOrderBy
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RoleCompositeEdge {
  cursor: ID
  node: RoleComposite
}

input RoleCompositeExpression {
  compositeId: IntExpression
  compositeIdType: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleCompositeInput {
  compositeId: Int
  compositeIdType: RoleInput
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  roleIdType: RoleInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RoleCompositeExpression
}

input RoleCompositeListMutationArguments {
  compositeId: Int
  compositeIdType: RoleInput
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  list: [RoleCompositeInput]
  realmId: Int
  roleId: Int
  roleIdType: RoleInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RoleCompositeExpression
}

input RoleCompositeListQueryArguments {
  after: ID
  before: ID
  compositeId: IntExpression
  compositeIdType: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleCompositeOrderBy
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleCompositeListSubscriptionArguments {
  after: ID
  before: ID
  compositeId: IntExpression
  compositeIdType: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RoleCompositeOrderBy
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleCompositeMutationArguments {
  compositeId: Int
  compositeIdType: RoleInput
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  roleIdType: RoleInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RoleCompositeExpression
}

input RoleCompositeOrderBy {
  compositeId: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  roleId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RoleCompositeQueryArguments {
  compositeId: IntExpression
  compositeIdType: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleCompositeSubscriptionArguments {
  compositeId: IntExpression
  compositeIdType: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RoleConnection {
  edges: [RoleEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RoleConnectionQueryArguments {
  after: ID
  before: ID
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  first: Int
  groupBy: [String!]
  groupRole: GroupRoleExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RoleOrderBy
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleComposite: RoleCompositeExpression
  rolePermission: RolePermissionExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userRole: UserRoleExpression
  users: UserExpression
  version: IntExpression
}

input RoleConnectionSubscriptionArguments {
  after: ID
  before: ID
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  first: Int
  groupBy: [String!]
  groupRole: GroupRoleExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RoleOrderBy
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleComposite: RoleCompositeExpression
  rolePermission: RolePermissionExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userRole: UserRoleExpression
  users: UserExpression
  version: IntExpression
}

type RoleEdge {
  cursor: ID
  node: Role
}

input RoleExpression {
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  groupRole: GroupRoleExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleComposite: RoleCompositeExpression
  rolePermission: RolePermissionExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userRole: UserRoleExpression
  users: UserExpression
  version: IntExpression
}

input RoleInput {
  composites: [RoleInput]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  groupRole: [GroupRoleInput]
  groups: [GroupInput]
  id: ID
  isDeprecated: Boolean
  name: String
  permissions: [PermissionInput]
  realm: RealmInput
  realmId: Int
  roleComposite: [RoleCompositeInput]
  rolePermission: [RolePermissionInput]
  updateTime: Timestamp
  updateUserId: String
  userRole: [UserRoleInput]
  users: [UserInput]
  version: Int
  where: RoleExpression
}

input RoleListMutationArguments {
  composites: [RoleInput]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  groupRole: [GroupRoleInput]
  groups: [GroupInput]
  id: ID
  isDeprecated: Boolean
  list: [RoleInput]
  name: String
  permissions: [PermissionInput]
  realm: RealmInput
  realmId: Int
  roleComposite: [RoleCompositeInput]
  rolePermission: [RolePermissionInput]
  updateTime: Timestamp
  updateUserId: String
  userRole: [UserRoleInput]
  users: [UserInput]
  version: Int
  where: RoleExpression
}

input RoleListQueryArguments {
  after: ID
  before: ID
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  first: Int
  groupBy: [String!]
  groupRole: GroupRoleExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RoleOrderBy
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleComposite: RoleCompositeExpression
  rolePermission: RolePermissionExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userRole: UserRoleExpression
  users: UserExpression
  version: IntExpression
}

input RoleListSubscriptionArguments {
  after: ID
  before: ID
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  first: Int
  groupBy: [String!]
  groupRole: GroupRoleExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: RoleOrderBy
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleComposite: RoleCompositeExpression
  rolePermission: RolePermissionExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userRole: UserRoleExpression
  users: UserExpression
  version: IntExpression
}

input RoleMutationArguments {
  composites: [RoleInput]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  groupRole: [GroupRoleInput]
  groups: [GroupInput]
  id: ID
  isDeprecated: Boolean
  name: String
  permissions: [PermissionInput]
  realm: RealmInput
  realmId: Int
  roleComposite: [RoleCompositeInput]
  rolePermission: [RolePermissionInput]
  updateTime: Timestamp
  updateUserId: String
  userRole: [UserRoleInput]
  users: [UserInput]
  version: Int
  where: RoleExpression
}

input RoleOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

type RolePermission implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  permissionName: String
  permissionNameCount: Int
  permissionNameMax: String
  permissionNameMin: String
  permissionNameType(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, field: StringExpression, groupBy: [String!], includeDeprecated: Boolean = false, name: StringExpression, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, rolePermission: RolePermissionExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Permission
  realmId: Int
  roleId: Int
  roleIdAvg: Int
  roleIdCount: Int
  roleIdMax: Int
  roleIdMin: Int
  roleIdSum: Int
  roleIdType(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], groupRole: GroupRoleExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleComposite: RoleCompositeExpression, rolePermission: RolePermissionExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type RolePermissionConnection {
  edges: [RolePermissionEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RolePermissionConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RolePermissionExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RolePermissionOrderBy
  permissionName: StringExpression
  permissionNameType: PermissionExpression
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RolePermissionConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RolePermissionExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RolePermissionOrderBy
  permissionName: StringExpression
  permissionNameType: PermissionExpression
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RolePermissionEdge {
  cursor: ID
  node: RolePermission
}

input RolePermissionExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RolePermissionExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  permissionName: StringExpression
  permissionNameType: PermissionExpression
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RolePermissionInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  permissionName: String
  permissionNameType: PermissionInput
  realmId: Int
  roleId: Int
  roleIdType: RoleInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RolePermissionExpression
}

input RolePermissionListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  list: [RolePermissionInput]
  permissionName: String
  permissionNameType: PermissionInput
  realmId: Int
  roleId: Int
  roleIdType: RoleInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RolePermissionExpression
}

input RolePermissionListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RolePermissionExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RolePermissionOrderBy
  permissionName: StringExpression
  permissionNameType: PermissionExpression
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RolePermissionListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RolePermissionExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: RolePermissionOrderBy
  permissionName: StringExpression
  permissionNameType: PermissionExpression
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RolePermissionMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  permissionName: String
  permissionNameType: PermissionInput
  realmId: Int
  roleId: Int
  roleIdType: RoleInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RolePermissionExpression
}

input RolePermissionOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  permissionName: Sort
  realmId: Sort
  roleId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RolePermissionQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RolePermissionExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  permissionName: StringExpression
  permissionNameType: PermissionExpression
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RolePermissionSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RolePermissionExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  permissionName: StringExpression
  permissionNameType: PermissionExpression
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleQueryArguments {
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  groupBy: [String!]
  groupRole: GroupRoleExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleComposite: RoleCompositeExpression
  rolePermission: RolePermissionExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userRole: UserRoleExpression
  users: UserExpression
  version: IntExpression
}

input RoleSubscriptionArguments {
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  groupBy: [String!]
  groupRole: GroupRoleExpression
  groups: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleComposite: RoleCompositeExpression
  rolePermission: RolePermissionExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userRole: UserRoleExpression
  users: UserExpression
  version: IntExpression
}

"""工资核算"""
type SalaryCalculation implements Meta {
  """基本工资"""
  basicSalary: Float
  basicSalaryAvg: Float
  basicSalaryCount: Int
  basicSalaryMax: Float
  basicSalaryMin: Float
  basicSalarySum: Float

  """奖金"""
  bonuses: Float
  bonusesAvg: Float
  bonusesCount: Int
  bonusesMax: Float
  bonusesMin: Float
  bonusesSum: Float
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """扣款"""
  deductions: Float
  deductionsAvg: Float
  deductionsCount: Int
  deductionsMax: Float
  deductionsMin: Float
  deductionsSum: Float

  """员工"""
  employee(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): User!
  employeeId: Int
  employeeIdAvg: Int
  employeeIdCount: Int
  employeeIdMax: Int
  employeeIdMin: Int
  employeeIdSum: Int

  """总工资"""
  grossSalary: Float
  grossSalaryAvg: Float
  grossSalaryCount: Int
  grossSalaryMax: Float
  grossSalaryMin: Float
  grossSalarySum: Float

  """公积金"""
  housingFund: Float
  housingFundAvg: Float
  housingFundCount: Int
  housingFundMax: Float
  housingFundMin: Float
  housingFundSum: Float

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """计算月份"""
  month: Int!
  monthAvg: Int
  monthCount: Int
  monthMax: Int
  monthMin: Int
  monthSum: Int

  """实发工资"""
  netSalary: Float
  netSalaryAvg: Float
  netSalaryCount: Int
  netSalaryMax: Float
  netSalaryMin: Float
  netSalarySum: Float

  """备注"""
  notes: String
  notesCount: Int
  notesMax: String
  notesMin: String

  """其他津贴"""
  otherAllowances: Float
  otherAllowancesAvg: Float
  otherAllowancesCount: Int
  otherAllowancesMax: Float
  otherAllowancesMin: Float
  otherAllowancesSum: Float

  """加班工资"""
  overtimePay: Float
  overtimePayAvg: Float
  overtimePayCount: Int
  overtimePayMax: Float
  overtimePayMin: Float
  overtimePaySum: Float
  realmId: Int

  """社会保险"""
  socialSecurity: Float
  socialSecurityAvg: Float
  socialSecurityCount: Int
  socialSecurityMax: Float
  socialSecurityMin: Float
  socialSecuritySum: Float

  """税收"""
  tax: Float
  taxAvg: Float
  taxCount: Int
  taxMax: Float
  taxMin: Float
  taxSum: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int

  """计算月份"""
  year: Int!
  yearAvg: Int
  yearCount: Int
  yearMax: Int
  yearMin: Int
  yearSum: Int
}

type SalaryCalculationConnection {
  edges: [SalaryCalculationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input SalaryCalculationConnectionQueryArguments {
  after: ID
  basicSalary: FloatExpression
  before: ID
  bonuses: FloatExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deductions: FloatExpression
  employee: UserExpression
  employeeId: IntExpression
  exs: [SalaryCalculationExpression]
  first: Int
  grossSalary: FloatExpression
  groupBy: [String!]
  housingFund: FloatExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  month: IntExpression
  netSalary: FloatExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: SalaryCalculationOrderBy
  otherAllowances: FloatExpression
  overtimePay: FloatExpression
  realmId: IntExpression
  socialSecurity: FloatExpression
  tax: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

input SalaryCalculationConnectionSubscriptionArguments {
  after: ID
  basicSalary: FloatExpression
  before: ID
  bonuses: FloatExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deductions: FloatExpression
  employee: UserExpression
  employeeId: IntExpression
  exs: [SalaryCalculationExpression]
  first: Int
  grossSalary: FloatExpression
  groupBy: [String!]
  housingFund: FloatExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  month: IntExpression
  netSalary: FloatExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: SalaryCalculationOrderBy
  otherAllowances: FloatExpression
  overtimePay: FloatExpression
  realmId: IntExpression
  socialSecurity: FloatExpression
  tax: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

type SalaryCalculationEdge {
  cursor: ID
  node: SalaryCalculation
}

input SalaryCalculationExpression {
  basicSalary: FloatExpression
  bonuses: FloatExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deductions: FloatExpression
  employee: UserExpression
  employeeId: IntExpression
  exs: [SalaryCalculationExpression]
  grossSalary: FloatExpression
  housingFund: FloatExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  month: IntExpression
  netSalary: FloatExpression
  not: Boolean = false
  notes: StringExpression
  otherAllowances: FloatExpression
  overtimePay: FloatExpression
  realmId: IntExpression
  socialSecurity: FloatExpression
  tax: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

input SalaryCalculationInput {
  basicSalary: Float
  bonuses: Float
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  deductions: Float
  employee: UserInput
  employeeId: Int
  grossSalary: Float
  housingFund: Float
  id: ID
  isDeprecated: Boolean
  month: Int
  netSalary: Float
  notes: String
  otherAllowances: Float
  overtimePay: Float
  realmId: Int
  socialSecurity: Float
  tax: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: SalaryCalculationExpression
  year: Int
}

input SalaryCalculationListMutationArguments {
  basicSalary: Float
  bonuses: Float
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  deductions: Float
  employee: UserInput
  employeeId: Int
  grossSalary: Float
  housingFund: Float
  id: ID
  isDeprecated: Boolean
  list: [SalaryCalculationInput]
  month: Int
  netSalary: Float
  notes: String
  otherAllowances: Float
  overtimePay: Float
  realmId: Int
  socialSecurity: Float
  tax: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: SalaryCalculationExpression
  year: Int
}

input SalaryCalculationListQueryArguments {
  after: ID
  basicSalary: FloatExpression
  before: ID
  bonuses: FloatExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deductions: FloatExpression
  employee: UserExpression
  employeeId: IntExpression
  exs: [SalaryCalculationExpression]
  first: Int
  grossSalary: FloatExpression
  groupBy: [String!]
  housingFund: FloatExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  month: IntExpression
  netSalary: FloatExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: SalaryCalculationOrderBy
  otherAllowances: FloatExpression
  overtimePay: FloatExpression
  realmId: IntExpression
  socialSecurity: FloatExpression
  tax: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

input SalaryCalculationListSubscriptionArguments {
  after: ID
  basicSalary: FloatExpression
  before: ID
  bonuses: FloatExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deductions: FloatExpression
  employee: UserExpression
  employeeId: IntExpression
  exs: [SalaryCalculationExpression]
  first: Int
  grossSalary: FloatExpression
  groupBy: [String!]
  housingFund: FloatExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  month: IntExpression
  netSalary: FloatExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: SalaryCalculationOrderBy
  otherAllowances: FloatExpression
  overtimePay: FloatExpression
  realmId: IntExpression
  socialSecurity: FloatExpression
  tax: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

input SalaryCalculationMutationArguments {
  basicSalary: Float
  bonuses: Float
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  deductions: Float
  employee: UserInput
  employeeId: Int
  grossSalary: Float
  housingFund: Float
  id: ID
  isDeprecated: Boolean
  month: Int
  netSalary: Float
  notes: String
  otherAllowances: Float
  overtimePay: Float
  realmId: Int
  socialSecurity: Float
  tax: Float
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: SalaryCalculationExpression
  year: Int
}

input SalaryCalculationOrderBy {
  basicSalary: Sort
  bonuses: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  deductions: Sort
  employeeId: Sort
  grossSalary: Sort
  housingFund: Sort
  id: Sort
  isDeprecated: Sort
  month: Sort
  netSalary: Sort
  notes: Sort
  otherAllowances: Sort
  overtimePay: Sort
  realmId: Sort
  socialSecurity: Sort
  tax: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
  year: Sort
}

input SalaryCalculationQueryArguments {
  basicSalary: FloatExpression
  bonuses: FloatExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deductions: FloatExpression
  employee: UserExpression
  employeeId: IntExpression
  exs: [SalaryCalculationExpression]
  grossSalary: FloatExpression
  groupBy: [String!]
  housingFund: FloatExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  month: IntExpression
  netSalary: FloatExpression
  not: Boolean = false
  notes: StringExpression
  otherAllowances: FloatExpression
  overtimePay: FloatExpression
  realmId: IntExpression
  socialSecurity: FloatExpression
  tax: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

input SalaryCalculationSubscriptionArguments {
  basicSalary: FloatExpression
  bonuses: FloatExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  deductions: FloatExpression
  employee: UserExpression
  employeeId: IntExpression
  exs: [SalaryCalculationExpression]
  grossSalary: FloatExpression
  groupBy: [String!]
  housingFund: FloatExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  month: IntExpression
  netSalary: FloatExpression
  not: Boolean = false
  notes: StringExpression
  otherAllowances: FloatExpression
  overtimePay: FloatExpression
  realmId: IntExpression
  socialSecurity: FloatExpression
  tax: FloatExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
  year: IntExpression
}

"""服务类型"""
enum ServiceType {
  """代理服务"""
  AGENCY

  """运输服务"""
  TRANSPORTATION

  """仓配服务"""
  WAREHOUSING
}

input ServiceTypeExpression {
  in: [ServiceType]
  opr: Operator = EQ
  val: ServiceType
}

"""结算方式"""
enum SettlementMethod {
  """到付"""
  COLLECT_ON_DELIVERY

  """月结"""
  MONTHLY_SETTLEMENT

  """其他"""
  OTHER

  """预付"""
  PREPAID
}

input SettlementMethodExpression {
  in: [SettlementMethod]
  opr: Operator = EQ
  val: SettlementMethod
}

enum Sort {
  ASC
  DESC
}

input SortExpression {
  in: [Sort]
  opr: Operator = EQ
  val: Sort
}

input StringExpression {
  in: [String]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: String
}

type Subscription implements Meta {
  annualFinancialReport(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [AnnualFinancialReportExpression], grossProfit: FloatExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, netProfit: FloatExpression, not: Boolean = false, operatingExpenses: FloatExpression, pickupToStationCost: FloatExpression, pickupToStationIncome: FloatExpression, portCost: FloatExpression, railwayCost: FloatExpression, railwayIncome: FloatExpression, railwayToDeliveryCost: FloatExpression, railwayToDeliveryIncome: FloatExpression, realmId: IntExpression, storageCost: FloatExpression, totalCost: FloatExpression, totalIncome: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, year: IntExpression): AnnualFinancialReport
  annualFinancialReportConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [AnnualFinancialReportExpression], first: Int, grossProfit: FloatExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, netProfit: FloatExpression, not: Boolean = false, offset: Int, operatingExpenses: FloatExpression, orderBy: AnnualFinancialReportOrderBy, pickupToStationCost: FloatExpression, pickupToStationIncome: FloatExpression, portCost: FloatExpression, railwayCost: FloatExpression, railwayIncome: FloatExpression, railwayToDeliveryCost: FloatExpression, railwayToDeliveryIncome: FloatExpression, realmId: IntExpression, storageCost: FloatExpression, totalCost: FloatExpression, totalIncome: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, year: IntExpression): AnnualFinancialReportConnection
  annualFinancialReportList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [AnnualFinancialReportExpression], first: Int, grossProfit: FloatExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, netProfit: FloatExpression, not: Boolean = false, offset: Int, operatingExpenses: FloatExpression, orderBy: AnnualFinancialReportOrderBy, pickupToStationCost: FloatExpression, pickupToStationIncome: FloatExpression, portCost: FloatExpression, railwayCost: FloatExpression, railwayIncome: FloatExpression, railwayToDeliveryCost: FloatExpression, railwayToDeliveryIncome: FloatExpression, realmId: IntExpression, storageCost: FloatExpression, totalCost: FloatExpression, totalIncome: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, year: IntExpression): [AnnualFinancialReport]
  cargoItem(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exceptionCount: IntExpression, exceptionDescription: StringExpression, exs: [CargoItemExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, model: StringExpression, name: StringExpression, not: Boolean = false, notes: StringExpression, order: OrderExpression, orderId: IntExpression, packaging: StringExpression, quantity: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, volume: FloatExpression, weight: FloatExpression): CargoItem
  cargoItemConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exceptionCount: IntExpression, exceptionDescription: StringExpression, exs: [CargoItemExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, model: StringExpression, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, order: OrderExpression, orderBy: CargoItemOrderBy, orderId: IntExpression, packaging: StringExpression, quantity: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, volume: FloatExpression, weight: FloatExpression): CargoItemConnection
  cargoItemList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exceptionCount: IntExpression, exceptionDescription: StringExpression, exs: [CargoItemExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, model: StringExpression, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, order: OrderExpression, orderBy: CargoItemOrderBy, orderId: IntExpression, packaging: StringExpression, quantity: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, volume: FloatExpression, weight: FloatExpression): [CargoItem]
  chargeItem(amount: FloatExpression, chargeType: ChargeTypeExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [ChargeItemExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, notes: StringExpression, orderId: StringExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): ChargeItem
  chargeItemConnection(after: ID, amount: FloatExpression, before: ID, chargeType: ChargeTypeExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [ChargeItemExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: ChargeItemOrderBy, orderId: StringExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): ChargeItemConnection
  chargeItemList(after: ID, amount: FloatExpression, before: ID, chargeType: ChargeTypeExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [ChargeItemExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: ChargeItemOrderBy, orderId: StringExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [ChargeItem]
  contactInfo(address: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [ContactInfoExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, phone: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): ContactInfo
  contactInfoConnection(address: StringExpression, after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [ContactInfoExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: ContactInfoOrderBy, phone: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): ContactInfoConnection
  contactInfoList(address: StringExpression, after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [ContactInfoExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: ContactInfoOrderBy, phone: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [ContactInfo]
  contract(additionalContent: StringExpression, businessAffiliate: GroupExpression, businessAffiliateId: IntExpression, businessScale: FloatExpression, businessType: BusinessTypeExpression, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: CustomerExpression, customerId: IntExpression, description: StringExpression, effectiveDate: StringExpression, expirationDate: StringExpression, exs: [ContractExpression], filingDepartment: GroupExpression, filingDepartmentId: IntExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, notes: StringExpression, performanceStatus: ContractStatusExpression, pricingUnit: StringExpression, realmId: IntExpression, signatoryCount: IntExpression, signingCompany: GroupExpression, signingCompanyId: IntExpression, transportationMode: TransportationModeExpression, unitPrice: PricingUnitExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Contract
  contractConnection(additionalContent: StringExpression, after: ID, before: ID, businessAffiliate: GroupExpression, businessAffiliateId: IntExpression, businessScale: FloatExpression, businessType: BusinessTypeExpression, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: CustomerExpression, customerId: IntExpression, description: StringExpression, effectiveDate: StringExpression, expirationDate: StringExpression, exs: [ContractExpression], filingDepartment: GroupExpression, filingDepartmentId: IntExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: ContractOrderBy, performanceStatus: ContractStatusExpression, pricingUnit: StringExpression, realmId: IntExpression, signatoryCount: IntExpression, signingCompany: GroupExpression, signingCompanyId: IntExpression, transportationMode: TransportationModeExpression, unitPrice: PricingUnitExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): ContractConnection
  contractList(additionalContent: StringExpression, after: ID, before: ID, businessAffiliate: GroupExpression, businessAffiliateId: IntExpression, businessScale: FloatExpression, businessType: BusinessTypeExpression, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: CustomerExpression, customerId: IntExpression, description: StringExpression, effectiveDate: StringExpression, expirationDate: StringExpression, exs: [ContractExpression], filingDepartment: GroupExpression, filingDepartmentId: IntExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: ContractOrderBy, performanceStatus: ContractStatusExpression, pricingUnit: StringExpression, realmId: IntExpression, signatoryCount: IntExpression, signingCompany: GroupExpression, signingCompanyId: IntExpression, transportationMode: TransportationModeExpression, unitPrice: PricingUnitExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Contract]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  customer(address: StringExpression, city: StringExpression, code: StringExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, email: StringExpression, exs: [CustomerExpression], fax: StringExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, notes: StringExpression, phoneNumber: StringExpression, postalCode: StringExpression, province: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Customer
  customerConnection(address: StringExpression, after: ID, before: ID, city: StringExpression, code: StringExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, email: StringExpression, exs: [CustomerExpression], fax: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: CustomerOrderBy, phoneNumber: StringExpression, postalCode: StringExpression, province: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): CustomerConnection
  customerList(address: StringExpression, after: ID, before: ID, city: StringExpression, code: StringExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, email: StringExpression, exs: [CustomerExpression], fax: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: CustomerOrderBy, phoneNumber: StringExpression, postalCode: StringExpression, province: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Customer]
  deliveryWaybill(arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, arrivalTime: StringExpression, cargoItems: CargoItemExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deliveryAddress: StringExpression, deliveryTime: StringExpression, exs: [DeliveryWaybillExpression], group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, licensePlate: StringExpression, not: Boolean = false, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): DeliveryWaybill
  deliveryWaybillConnection(after: ID, arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, arrivalTime: StringExpression, before: ID, cargoItems: CargoItemExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deliveryAddress: StringExpression, deliveryTime: StringExpression, exs: [DeliveryWaybillExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, licensePlate: StringExpression, not: Boolean = false, offset: Int, orderBy: DeliveryWaybillOrderBy, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): DeliveryWaybillConnection
  deliveryWaybillList(after: ID, arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, arrivalTime: StringExpression, before: ID, cargoItems: CargoItemExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deliveryAddress: StringExpression, deliveryTime: StringExpression, exs: [DeliveryWaybillExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, licensePlate: StringExpression, not: Boolean = false, offset: Int, orderBy: DeliveryWaybillOrderBy, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): [DeliveryWaybill]
  employeeProfile(address: StringExpression, birthDate: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, emergencyContact: StringExpression, emergencyContactPhone: StringExpression, employee: UserExpression, employeeId: IntExpression, exs: [EmployeeProfileExpression], gender: GenderExpression, groupBy: [String!], hireDate: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, notes: StringExpression, position: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): EmployeeProfile
  employeeProfileConnection(address: StringExpression, after: ID, before: ID, birthDate: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, emergencyContact: StringExpression, emergencyContactPhone: StringExpression, employee: UserExpression, employeeId: IntExpression, exs: [EmployeeProfileExpression], first: Int, gender: GenderExpression, groupBy: [String!], hireDate: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: EmployeeProfileOrderBy, position: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): EmployeeProfileConnection
  employeeProfileList(address: StringExpression, after: ID, before: ID, birthDate: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, emergencyContact: StringExpression, emergencyContactPhone: StringExpression, employee: UserExpression, employeeId: IntExpression, exs: [EmployeeProfileExpression], first: Int, gender: GenderExpression, groupBy: [String!], hireDate: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: EmployeeProfileOrderBy, position: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [EmployeeProfile]
  group(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, exs: [GroupExpression], groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group
  groupConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, exs: [GroupExpression], first: Int, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): GroupConnection
  groupList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, exs: [GroupExpression], first: Int, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): [Group]
  groupRole(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleExpression], groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRole
  groupRoleConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleExpression], first: Int, groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupRoleOrderBy, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleConnection
  groupRoleList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleExpression], first: Int, groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: GroupRoleOrderBy, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [GroupRole]
  isDeprecated: Boolean
  marketingObjective(annualGrossProfitTarget: FloatExpression, annualNetProfitTarget: FloatExpression, annualRevenueTarget: FloatExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [MarketingObjectiveExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, monthlyMarketingObjectives: MonthlyMarketingObjectiveExpression, monthlyTargetId: IntExpression, not: Boolean = false, notes: StringExpression, personnel: UserExpression, personnelId: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): MarketingObjective
  marketingObjectiveConnection(after: ID, annualGrossProfitTarget: FloatExpression, annualNetProfitTarget: FloatExpression, annualRevenueTarget: FloatExpression, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [MarketingObjectiveExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, monthlyMarketingObjectives: MonthlyMarketingObjectiveExpression, monthlyTargetId: IntExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: MarketingObjectiveOrderBy, personnel: UserExpression, personnelId: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): MarketingObjectiveConnection
  marketingObjectiveList(after: ID, annualGrossProfitTarget: FloatExpression, annualNetProfitTarget: FloatExpression, annualRevenueTarget: FloatExpression, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [MarketingObjectiveExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, monthlyMarketingObjectives: MonthlyMarketingObjectiveExpression, monthlyTargetId: IntExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: MarketingObjectiveOrderBy, personnel: UserExpression, personnelId: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [MarketingObjective]
  monthlyFinancialReport(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [MonthlyFinancialReportExpression], grossProfit: FloatExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, month: IntExpression, netProfit: FloatExpression, not: Boolean = false, operatingExpenses: FloatExpression, pickupToStationCost: FloatExpression, pickupToStationIncome: FloatExpression, portCost: FloatExpression, railwayCost: FloatExpression, railwayIncome: FloatExpression, railwayToDeliveryCost: FloatExpression, railwayToDeliveryIncome: FloatExpression, realmId: IntExpression, storageCost: FloatExpression, totalCost: FloatExpression, totalIncome: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, year: IntExpression): MonthlyFinancialReport
  monthlyFinancialReportConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [MonthlyFinancialReportExpression], first: Int, grossProfit: FloatExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, month: IntExpression, netProfit: FloatExpression, not: Boolean = false, offset: Int, operatingExpenses: FloatExpression, orderBy: MonthlyFinancialReportOrderBy, pickupToStationCost: FloatExpression, pickupToStationIncome: FloatExpression, portCost: FloatExpression, railwayCost: FloatExpression, railwayIncome: FloatExpression, railwayToDeliveryCost: FloatExpression, railwayToDeliveryIncome: FloatExpression, realmId: IntExpression, storageCost: FloatExpression, totalCost: FloatExpression, totalIncome: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, year: IntExpression): MonthlyFinancialReportConnection
  monthlyFinancialReportList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [MonthlyFinancialReportExpression], first: Int, grossProfit: FloatExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, month: IntExpression, netProfit: FloatExpression, not: Boolean = false, offset: Int, operatingExpenses: FloatExpression, orderBy: MonthlyFinancialReportOrderBy, pickupToStationCost: FloatExpression, pickupToStationIncome: FloatExpression, portCost: FloatExpression, railwayCost: FloatExpression, railwayIncome: FloatExpression, railwayToDeliveryCost: FloatExpression, railwayToDeliveryIncome: FloatExpression, realmId: IntExpression, storageCost: FloatExpression, totalCost: FloatExpression, totalIncome: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, year: IntExpression): [MonthlyFinancialReport]
  monthlyMarketingObjective(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [MonthlyMarketingObjectiveExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, month: IntExpression, monthlyGrossProfitTarget: FloatExpression, monthlyNetProfitTarget: FloatExpression, monthlyRevenueTarget: FloatExpression, not: Boolean = false, notes: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): MonthlyMarketingObjective
  monthlyMarketingObjectiveConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [MonthlyMarketingObjectiveExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, month: IntExpression, monthlyGrossProfitTarget: FloatExpression, monthlyNetProfitTarget: FloatExpression, monthlyRevenueTarget: FloatExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: MonthlyMarketingObjectiveOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): MonthlyMarketingObjectiveConnection
  monthlyMarketingObjectiveList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [MonthlyMarketingObjectiveExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, month: IntExpression, monthlyGrossProfitTarget: FloatExpression, monthlyNetProfitTarget: FloatExpression, monthlyRevenueTarget: FloatExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: MonthlyMarketingObjectiveOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [MonthlyMarketingObjective]
  order(agent: UserExpression, agentId: IntExpression, arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, businessType: BusinessTypeExpression, cargoItems: CargoItemExpression, chargeItems: ChargeItemExpression, cond: Conditional = AND, consignee: ContactInfoExpression, consigneeId: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: CustomerExpression, customerId: IntExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, exs: [OrderExpression], group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, notes: StringExpression, orderDate: StringExpression, orderNumber: StringExpression, plannedArrivalTime: StringExpression, plannedDepartureTime: StringExpression, project: ProjectExpression, projectId: IntExpression, realmId: IntExpression, serviceType: ServiceTypeExpression, shipper: ContactInfoExpression, shipperId: IntExpression, transportationMode: TransportationModeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Order
  orderConnection(after: ID, agent: UserExpression, agentId: IntExpression, arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, before: ID, businessType: BusinessTypeExpression, cargoItems: CargoItemExpression, chargeItems: ChargeItemExpression, cond: Conditional = AND, consignee: ContactInfoExpression, consigneeId: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: CustomerExpression, customerId: IntExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, exs: [OrderExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: OrderOrderBy, orderDate: StringExpression, orderNumber: StringExpression, plannedArrivalTime: StringExpression, plannedDepartureTime: StringExpression, project: ProjectExpression, projectId: IntExpression, realmId: IntExpression, serviceType: ServiceTypeExpression, shipper: ContactInfoExpression, shipperId: IntExpression, transportationMode: TransportationModeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): OrderConnection
  orderList(after: ID, agent: UserExpression, agentId: IntExpression, arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, before: ID, businessType: BusinessTypeExpression, cargoItems: CargoItemExpression, chargeItems: ChargeItemExpression, cond: Conditional = AND, consignee: ContactInfoExpression, consigneeId: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: CustomerExpression, customerId: IntExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, exs: [OrderExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: OrderOrderBy, orderDate: StringExpression, orderNumber: StringExpression, plannedArrivalTime: StringExpression, plannedDepartureTime: StringExpression, project: ProjectExpression, projectId: IntExpression, realmId: IntExpression, serviceType: ServiceTypeExpression, shipper: ContactInfoExpression, shipperId: IntExpression, transportationMode: TransportationModeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Order]
  paymentItem(amount: FloatExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PaymentItemExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, invoiceNumber: StringExpression, name: StringExpression, not: Boolean = false, notes: StringExpression, paymentType: ChargeTypeExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillId: StringExpression): PaymentItem
  paymentItemConnection(after: ID, amount: FloatExpression, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PaymentItemExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, invoiceNumber: StringExpression, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: PaymentItemOrderBy, paymentType: ChargeTypeExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillId: StringExpression): PaymentItemConnection
  paymentItemList(after: ID, amount: FloatExpression, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PaymentItemExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, invoiceNumber: StringExpression, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: PaymentItemOrderBy, paymentType: ChargeTypeExpression, realmId: IntExpression, taxAmount: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillId: StringExpression): [PaymentItem]
  permission(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], field: StringExpression, groupBy: [String!], includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, rolePermission: RolePermissionExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Permission
  permissionConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], field: StringExpression, first: Int, groupBy: [String!], includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: PermissionOrderBy, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, rolePermission: RolePermissionExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionConnection
  permissionList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], field: StringExpression, first: Int, groupBy: [String!], includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: PermissionOrderBy, permissionType: PermissionTypeExpression, realm: RealmExpression, realmId: IntExpression, rolePermission: RolePermissionExpression, roles: RoleExpression, type: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Permission]
  pickupWaybill(cargoItems: CargoItemExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, exs: [PickupWaybillExpression], group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, licensePlate: StringExpression, not: Boolean = false, onStationTime: StringExpression, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, pickupAddress: StringExpression, pickupTime: StringExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): PickupWaybill
  pickupWaybillConnection(after: ID, before: ID, cargoItems: CargoItemExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, exs: [PickupWaybillExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, licensePlate: StringExpression, not: Boolean = false, offset: Int, onStationTime: StringExpression, orderBy: PickupWaybillOrderBy, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, pickupAddress: StringExpression, pickupTime: StringExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): PickupWaybillConnection
  pickupWaybillList(after: ID, before: ID, cargoItems: CargoItemExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, exs: [PickupWaybillExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, licensePlate: StringExpression, not: Boolean = false, offset: Int, onStationTime: StringExpression, orderBy: PickupWaybillOrderBy, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, pickupAddress: StringExpression, pickupTime: StringExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): [PickupWaybill]
  project(arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, businessType: BusinessTypeExpression, code: StringExpression, cond: Conditional = AND, contract: ContractExpression, contractId: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: CustomerExpression, customerId: IntExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, description: StringExpression, exs: [ProjectExpression], group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, manager: UserExpression, managerId: IntExpression, name: StringExpression, not: Boolean = false, notes: StringExpression, realmId: IntExpression, serviceType: ServiceTypeExpression, settlementMethod: SettlementMethodExpression, transportationMode: TransportationModeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Project
  projectConnection(after: ID, arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, before: ID, businessType: BusinessTypeExpression, code: StringExpression, cond: Conditional = AND, contract: ContractExpression, contractId: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: CustomerExpression, customerId: IntExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, description: StringExpression, exs: [ProjectExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, manager: UserExpression, managerId: IntExpression, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: ProjectOrderBy, realmId: IntExpression, serviceType: ServiceTypeExpression, settlementMethod: SettlementMethodExpression, transportationMode: TransportationModeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): ProjectConnection
  projectList(after: ID, arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, before: ID, businessType: BusinessTypeExpression, code: StringExpression, cond: Conditional = AND, contract: ContractExpression, contractId: IntExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, customer: CustomerExpression, customerId: IntExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, description: StringExpression, exs: [ProjectExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, manager: UserExpression, managerId: IntExpression, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: ProjectOrderBy, realmId: IntExpression, serviceType: ServiceTypeExpression, settlementMethod: SettlementMethodExpression, transportationMode: TransportationModeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Project]
  railwayBureau(code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RailwayBureauExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, notes: StringExpression, province: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayBureau
  railwayBureauConnection(after: ID, before: ID, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RailwayBureauExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: RailwayBureauOrderBy, province: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayBureauConnection
  railwayBureauList(after: ID, before: ID, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RailwayBureauExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: RailwayBureauOrderBy, province: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RailwayBureau]
  railwayWaybill(arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, arrivalTime: StringExpression, cargoItems: CargoItemExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, departureTime: StringExpression, exs: [RailwayWaybillExpression], group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, railwayWaybillTicketNumbers: RailwayWaybillTicketNumbersExpression, railwayWaybillTrainNumbers: RailwayWaybillTrainNumbersExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, ticketNumbers: StringExpression, trainCount: IntExpression, trainNumbers: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): RailwayWaybill
  railwayWaybillConnection(after: ID, arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, arrivalTime: StringExpression, before: ID, cargoItems: CargoItemExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, departureTime: StringExpression, exs: [RailwayWaybillExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayWaybillOrderBy, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, railwayWaybillTicketNumbers: RailwayWaybillTicketNumbersExpression, railwayWaybillTrainNumbers: RailwayWaybillTrainNumbersExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, ticketNumbers: StringExpression, trainCount: IntExpression, trainNumbers: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): RailwayWaybillConnection
  railwayWaybillList(after: ID, arrivalStation: TrainStationExpression, arrivalStationId: IntExpression, arrivalTime: StringExpression, before: ID, cargoItems: CargoItemExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, departureStation: TrainStationExpression, departureStationId: IntExpression, departureTime: StringExpression, exs: [RailwayWaybillExpression], first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayWaybillOrderBy, paymentItems: PaymentItemExpression, phoneNumber: StringExpression, railwayWaybillTicketNumbers: RailwayWaybillTicketNumbersExpression, railwayWaybillTrainNumbers: RailwayWaybillTrainNumbersExpression, realmId: IntExpression, supplier: SupplierExpression, supplierId: IntExpression, ticketNumbers: StringExpression, trainCount: IntExpression, trainNumbers: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, waybillNumber: StringExpression): [RailwayWaybill]
  railwayWaybillTicketNumbers(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayWaybillTicketNumbersExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, ticketNumber: StringExpression, ticketNumberId: IntExpression, ticketNumberIdType: RailwayWaybillExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayWaybillTicketNumbers
  railwayWaybillTicketNumbersConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayWaybillTicketNumbersExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayWaybillTicketNumbersOrderBy, realmId: IntExpression, ticketNumber: StringExpression, ticketNumberId: IntExpression, ticketNumberIdType: RailwayWaybillExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayWaybillTicketNumbersConnection
  railwayWaybillTicketNumbersList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayWaybillTicketNumbersExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayWaybillTicketNumbersOrderBy, realmId: IntExpression, ticketNumber: StringExpression, ticketNumberId: IntExpression, ticketNumberIdType: RailwayWaybillExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RailwayWaybillTicketNumbers]
  railwayWaybillTrainNumbers(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayWaybillTrainNumbersExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, railwayWaybillId: IntExpression, railwayWaybillIdType: RailwayWaybillExpression, realmId: IntExpression, trainNumber: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayWaybillTrainNumbers
  railwayWaybillTrainNumbersConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayWaybillTrainNumbersExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayWaybillTrainNumbersOrderBy, railwayWaybillId: IntExpression, railwayWaybillIdType: RailwayWaybillExpression, realmId: IntExpression, trainNumber: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RailwayWaybillTrainNumbersConnection
  railwayWaybillTrainNumbersList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RailwayWaybillTrainNumbersExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RailwayWaybillTrainNumbersOrderBy, railwayWaybillId: IntExpression, railwayWaybillIdType: RailwayWaybillExpression, realmId: IntExpression, trainNumber: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RailwayWaybillTrainNumbers]
  realm(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RealmExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RealmExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RealmOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RealmConnection
  realmId: Int
  realmList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RealmExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RealmOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Realm]
  role(composites: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], groupBy: [String!], groupRole: GroupRoleExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleComposite: RoleCompositeExpression, rolePermission: RolePermissionExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  roleComposite(compositeId: IntExpression, compositeIdType: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleComposite
  roleCompositeConnection(after: ID, before: ID, compositeId: IntExpression, compositeIdType: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleCompositeOrderBy, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleCompositeConnection
  roleCompositeList(after: ID, before: ID, compositeId: IntExpression, compositeIdType: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RoleCompositeOrderBy, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RoleComposite]
  roleConnection(after: ID, before: ID, composites: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], first: Int, groupBy: [String!], groupRole: GroupRoleExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleComposite: RoleCompositeExpression, rolePermission: RolePermissionExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): RoleConnection
  roleList(after: ID, before: ID, composites: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], first: Int, groupBy: [String!], groupRole: GroupRoleExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleComposite: RoleCompositeExpression, rolePermission: RolePermissionExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): [Role]
  rolePermission(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RolePermissionExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, permissionName: StringExpression, permissionNameType: PermissionExpression, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RolePermission
  rolePermissionConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RolePermissionExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RolePermissionOrderBy, permissionName: StringExpression, permissionNameType: PermissionExpression, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RolePermissionConnection
  rolePermissionList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RolePermissionExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: RolePermissionOrderBy, permissionName: StringExpression, permissionNameType: PermissionExpression, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RolePermission]
  salaryCalculation(basicSalary: FloatExpression, bonuses: FloatExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deductions: FloatExpression, employee: UserExpression, employeeId: IntExpression, exs: [SalaryCalculationExpression], grossSalary: FloatExpression, groupBy: [String!], housingFund: FloatExpression, id: StringExpression, includeDeprecated: Boolean = false, month: IntExpression, netSalary: FloatExpression, not: Boolean = false, notes: StringExpression, otherAllowances: FloatExpression, overtimePay: FloatExpression, realmId: IntExpression, socialSecurity: FloatExpression, tax: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, year: IntExpression): SalaryCalculation
  salaryCalculationConnection(after: ID, basicSalary: FloatExpression, before: ID, bonuses: FloatExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deductions: FloatExpression, employee: UserExpression, employeeId: IntExpression, exs: [SalaryCalculationExpression], first: Int, grossSalary: FloatExpression, groupBy: [String!], housingFund: FloatExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, month: IntExpression, netSalary: FloatExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: SalaryCalculationOrderBy, otherAllowances: FloatExpression, overtimePay: FloatExpression, realmId: IntExpression, socialSecurity: FloatExpression, tax: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, year: IntExpression): SalaryCalculationConnection
  salaryCalculationList(after: ID, basicSalary: FloatExpression, before: ID, bonuses: FloatExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deductions: FloatExpression, employee: UserExpression, employeeId: IntExpression, exs: [SalaryCalculationExpression], first: Int, grossSalary: FloatExpression, groupBy: [String!], housingFund: FloatExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, month: IntExpression, netSalary: FloatExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: SalaryCalculationOrderBy, otherAllowances: FloatExpression, overtimePay: FloatExpression, realmId: IntExpression, socialSecurity: FloatExpression, tax: FloatExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression, year: IntExpression): [SalaryCalculation]
  supplier(address: StringExpression, city: StringExpression, code: StringExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, email: StringExpression, exs: [SupplierExpression], fax: StringExpression, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, notes: StringExpression, phoneNumber: StringExpression, postalCode: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Supplier
  supplierConnection(address: StringExpression, after: ID, before: ID, city: StringExpression, code: StringExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, email: StringExpression, exs: [SupplierExpression], fax: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: SupplierOrderBy, phoneNumber: StringExpression, postalCode: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): SupplierConnection
  supplierList(address: StringExpression, after: ID, before: ID, city: StringExpression, code: StringExpression, cond: Conditional = AND, contactPerson: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, email: StringExpression, exs: [SupplierExpression], fax: StringExpression, first: Int, group: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: SupplierOrderBy, phoneNumber: StringExpression, postalCode: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Supplier]
  targetCustomer(challenges: StringExpression, cond: Conditional = AND, connectableResources: StringExpression, contactInformation: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, creditInvestigation: StringExpression, decisionMaker: StringExpression, description: StringExpression, exs: [TargetCustomerExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, logisticsMatching: StringExpression, name: StringExpression, needsAnalysis: StringExpression, not: Boolean = false, notes: StringExpression, otherInfluencingFactors: StringExpression, productMatching: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TargetCustomer
  targetCustomerConnection(after: ID, before: ID, challenges: StringExpression, cond: Conditional = AND, connectableResources: StringExpression, contactInformation: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, creditInvestigation: StringExpression, decisionMaker: StringExpression, description: StringExpression, exs: [TargetCustomerExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, logisticsMatching: StringExpression, name: StringExpression, needsAnalysis: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: TargetCustomerOrderBy, otherInfluencingFactors: StringExpression, productMatching: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TargetCustomerConnection
  targetCustomerList(after: ID, before: ID, challenges: StringExpression, cond: Conditional = AND, connectableResources: StringExpression, contactInformation: StringExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, creditInvestigation: StringExpression, decisionMaker: StringExpression, description: StringExpression, exs: [TargetCustomerExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, logisticsMatching: StringExpression, name: StringExpression, needsAnalysis: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: TargetCustomerOrderBy, otherInfluencingFactors: StringExpression, productMatching: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [TargetCustomer]
  trainStation(address: StringExpression, city: StringExpression, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, exs: [TrainStationExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, not: Boolean = false, notes: StringExpression, province: StringExpression, railwayBureau: RailwayBureauExpression, railwayBureauId: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TrainStation
  trainStationConnection(address: StringExpression, after: ID, before: ID, city: StringExpression, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, exs: [TrainStationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: TrainStationOrderBy, province: StringExpression, railwayBureau: RailwayBureauExpression, railwayBureauId: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): TrainStationConnection
  trainStationList(address: StringExpression, after: ID, before: ID, city: StringExpression, code: StringExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, district: StringExpression, exs: [TrainStationExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, not: Boolean = false, notes: StringExpression, offset: Int, orderBy: TrainStationOrderBy, province: StringExpression, railwayBureau: RailwayBureauExpression, railwayBureauId: IntExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [TrainStation]
  updateTime: Timestamp
  updateUserId: String
  user(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, not: Boolean = false, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): User
  userConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, not: Boolean = false, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): UserConnection
  userGroup(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserGroupExpression], groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, userIdType: UserExpression, version: IntExpression): UserGroup
  userGroupConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserGroupExpression], first: Int, groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserGroupOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, userIdType: UserExpression, version: IntExpression): UserGroupConnection
  userGroupList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserGroupExpression], first: Int, groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserGroupOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, userIdType: UserExpression, version: IntExpression): [UserGroup]
  userList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, not: Boolean = false, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): [User]
  userPhones(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, phone: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, userIdType: UserExpression, version: IntExpression): UserPhones
  userPhonesConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserPhonesOrderBy, phone: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, userIdType: UserExpression, version: IntExpression): UserPhonesConnection
  userPhonesList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserPhonesOrderBy, phone: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, userIdType: UserExpression, version: IntExpression): [UserPhones]
  userRole(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserRoleExpression], groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, not: Boolean = false, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, userIdType: UserExpression, version: IntExpression): UserRole
  userRoleConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserRoleExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserRoleOrderBy, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, userIdType: UserExpression, version: IntExpression): UserRoleConnection
  userRoleList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserRoleExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, not: Boolean = false, offset: Int, orderBy: UserRoleOrderBy, realmId: IntExpression, roleId: IntExpression, roleIdType: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, userIdType: UserExpression, version: IntExpression): [UserRole]
  version: Int
}

"""供应商"""
type Supplier implements Meta & NamedStruct {
  """地址"""
  address: String
  addressCount: Int
  addressMax: String
  addressMin: String

  """市"""
  city: String
  cityCount: Int
  cityMax: String
  cityMin: String

  """代码"""
  code: String!
  codeCount: Int
  codeMax: String
  codeMin: String

  """联系人"""
  contactPerson: String
  contactPersonCount: Int
  contactPersonMax: String
  contactPersonMin: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """区县"""
  district: String
  districtCount: Int
  districtMax: String
  districtMin: String

  """邮箱"""
  email: String
  emailCount: Int
  emailMax: String
  emailMin: String

  """传真"""
  fax: String
  faxCount: Int
  faxMax: String
  faxMin: String

  """所属公司"""
  group(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group
  groupId: Int
  groupIdAvg: Int
  groupIdCount: Int
  groupIdMax: Int
  groupIdMin: Int
  groupIdSum: Int

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """名称"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """备注"""
  notes: String
  notesCount: Int
  notesMax: String
  notesMin: String

  """手机号码"""
  phoneNumber: String
  phoneNumberCount: Int
  phoneNumberMax: String
  phoneNumberMin: String

  """邮编"""
  postalCode: String
  postalCodeCount: Int
  postalCodeMax: String
  postalCodeMin: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type SupplierConnection {
  edges: [SupplierEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input SupplierConnectionQueryArguments {
  address: StringExpression
  after: ID
  before: ID
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  email: StringExpression
  exs: [SupplierExpression]
  fax: StringExpression
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: SupplierOrderBy
  phoneNumber: StringExpression
  postalCode: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input SupplierConnectionSubscriptionArguments {
  address: StringExpression
  after: ID
  before: ID
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  email: StringExpression
  exs: [SupplierExpression]
  fax: StringExpression
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: SupplierOrderBy
  phoneNumber: StringExpression
  postalCode: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type SupplierEdge {
  cursor: ID
  node: Supplier
}

input SupplierExpression {
  address: StringExpression
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  email: StringExpression
  exs: [SupplierExpression]
  fax: StringExpression
  group: GroupExpression
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  phoneNumber: StringExpression
  postalCode: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input SupplierInput {
  address: String
  city: String
  code: String
  contactPerson: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  district: String
  email: String
  fax: String
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  name: String
  notes: String
  phoneNumber: String
  postalCode: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: SupplierExpression
}

input SupplierListMutationArguments {
  address: String
  city: String
  code: String
  contactPerson: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  district: String
  email: String
  fax: String
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  list: [SupplierInput]
  name: String
  notes: String
  phoneNumber: String
  postalCode: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: SupplierExpression
}

input SupplierListQueryArguments {
  address: StringExpression
  after: ID
  before: ID
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  email: StringExpression
  exs: [SupplierExpression]
  fax: StringExpression
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: SupplierOrderBy
  phoneNumber: StringExpression
  postalCode: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input SupplierListSubscriptionArguments {
  address: StringExpression
  after: ID
  before: ID
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  email: StringExpression
  exs: [SupplierExpression]
  fax: StringExpression
  first: Int
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: SupplierOrderBy
  phoneNumber: StringExpression
  postalCode: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input SupplierMutationArguments {
  address: String
  city: String
  code: String
  contactPerson: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  district: String
  email: String
  fax: String
  group: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  name: String
  notes: String
  phoneNumber: String
  postalCode: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: SupplierExpression
}

input SupplierOrderBy {
  address: Sort
  city: Sort
  code: Sort
  contactPerson: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  district: Sort
  email: Sort
  fax: Sort
  groupId: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  notes: Sort
  phoneNumber: Sort
  postalCode: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input SupplierQueryArguments {
  address: StringExpression
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  email: StringExpression
  exs: [SupplierExpression]
  fax: StringExpression
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  phoneNumber: StringExpression
  postalCode: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input SupplierSubscriptionArguments {
  address: StringExpression
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  contactPerson: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  email: StringExpression
  exs: [SupplierExpression]
  fax: StringExpression
  group: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  phoneNumber: StringExpression
  postalCode: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

"""目标客户"""
type TargetCustomer implements Meta & NamedStruct {
  """难点"""
  challenges: String
  challengesCount: Int
  challengesMax: String
  challengesMin: String

  """可对接资源"""
  connectableResources: String
  connectableResourcesCount: Int
  connectableResourcesMax: String
  connectableResourcesMin: String

  """联系方式"""
  contactInformation: String
  contactInformationCount: Int
  contactInformationMax: String
  contactInformationMin: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """信用调查"""
  creditInvestigation: String
  creditInvestigationCount: Int
  creditInvestigationMax: String
  creditInvestigationMin: String

  """购买决策者"""
  decisionMaker: String
  decisionMakerCount: Int
  decisionMakerMax: String
  decisionMakerMin: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """物流匹配情况"""
  logisticsMatching: String
  logisticsMatchingCount: Int
  logisticsMatchingMax: String
  logisticsMatchingMin: String

  """名称"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """需求分析"""
  needsAnalysis: String
  needsAnalysisCount: Int
  needsAnalysisMax: String
  needsAnalysisMin: String

  """备注"""
  notes: String
  notesCount: Int
  notesMax: String
  notesMin: String

  """其他影响因素"""
  otherInfluencingFactors: String
  otherInfluencingFactorsCount: Int
  otherInfluencingFactorsMax: String
  otherInfluencingFactorsMin: String

  """产品匹配情况"""
  productMatching: String
  productMatchingCount: Int
  productMatchingMax: String
  productMatchingMin: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type TargetCustomerConnection {
  edges: [TargetCustomerEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input TargetCustomerConnectionQueryArguments {
  after: ID
  before: ID
  challenges: StringExpression
  cond: Conditional = AND
  connectableResources: StringExpression
  contactInformation: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  creditInvestigation: StringExpression
  decisionMaker: StringExpression
  description: StringExpression
  exs: [TargetCustomerExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  logisticsMatching: StringExpression
  name: StringExpression
  needsAnalysis: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: TargetCustomerOrderBy
  otherInfluencingFactors: StringExpression
  productMatching: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TargetCustomerConnectionSubscriptionArguments {
  after: ID
  before: ID
  challenges: StringExpression
  cond: Conditional = AND
  connectableResources: StringExpression
  contactInformation: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  creditInvestigation: StringExpression
  decisionMaker: StringExpression
  description: StringExpression
  exs: [TargetCustomerExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  logisticsMatching: StringExpression
  name: StringExpression
  needsAnalysis: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: TargetCustomerOrderBy
  otherInfluencingFactors: StringExpression
  productMatching: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type TargetCustomerEdge {
  cursor: ID
  node: TargetCustomer
}

input TargetCustomerExpression {
  challenges: StringExpression
  cond: Conditional = AND
  connectableResources: StringExpression
  contactInformation: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  creditInvestigation: StringExpression
  decisionMaker: StringExpression
  description: StringExpression
  exs: [TargetCustomerExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  logisticsMatching: StringExpression
  name: StringExpression
  needsAnalysis: StringExpression
  not: Boolean = false
  notes: StringExpression
  otherInfluencingFactors: StringExpression
  productMatching: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TargetCustomerInput {
  challenges: String
  connectableResources: String
  contactInformation: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  creditInvestigation: String
  decisionMaker: String
  description: String
  id: ID
  isDeprecated: Boolean
  logisticsMatching: String
  name: String
  needsAnalysis: String
  notes: String
  otherInfluencingFactors: String
  productMatching: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: TargetCustomerExpression
}

input TargetCustomerListMutationArguments {
  challenges: String
  connectableResources: String
  contactInformation: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  creditInvestigation: String
  decisionMaker: String
  description: String
  id: ID
  isDeprecated: Boolean
  list: [TargetCustomerInput]
  logisticsMatching: String
  name: String
  needsAnalysis: String
  notes: String
  otherInfluencingFactors: String
  productMatching: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: TargetCustomerExpression
}

input TargetCustomerListQueryArguments {
  after: ID
  before: ID
  challenges: StringExpression
  cond: Conditional = AND
  connectableResources: StringExpression
  contactInformation: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  creditInvestigation: StringExpression
  decisionMaker: StringExpression
  description: StringExpression
  exs: [TargetCustomerExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  logisticsMatching: StringExpression
  name: StringExpression
  needsAnalysis: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: TargetCustomerOrderBy
  otherInfluencingFactors: StringExpression
  productMatching: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TargetCustomerListSubscriptionArguments {
  after: ID
  before: ID
  challenges: StringExpression
  cond: Conditional = AND
  connectableResources: StringExpression
  contactInformation: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  creditInvestigation: StringExpression
  decisionMaker: StringExpression
  description: StringExpression
  exs: [TargetCustomerExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  logisticsMatching: StringExpression
  name: StringExpression
  needsAnalysis: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: TargetCustomerOrderBy
  otherInfluencingFactors: StringExpression
  productMatching: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TargetCustomerMutationArguments {
  challenges: String
  connectableResources: String
  contactInformation: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  creditInvestigation: String
  decisionMaker: String
  description: String
  id: ID
  isDeprecated: Boolean
  logisticsMatching: String
  name: String
  needsAnalysis: String
  notes: String
  otherInfluencingFactors: String
  productMatching: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: TargetCustomerExpression
}

input TargetCustomerOrderBy {
  challenges: Sort
  connectableResources: Sort
  contactInformation: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  creditInvestigation: Sort
  decisionMaker: Sort
  description: Sort
  id: Sort
  isDeprecated: Sort
  logisticsMatching: Sort
  name: Sort
  needsAnalysis: Sort
  notes: Sort
  otherInfluencingFactors: Sort
  productMatching: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input TargetCustomerQueryArguments {
  challenges: StringExpression
  cond: Conditional = AND
  connectableResources: StringExpression
  contactInformation: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  creditInvestigation: StringExpression
  decisionMaker: StringExpression
  description: StringExpression
  exs: [TargetCustomerExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  logisticsMatching: StringExpression
  name: StringExpression
  needsAnalysis: StringExpression
  not: Boolean = false
  notes: StringExpression
  otherInfluencingFactors: StringExpression
  productMatching: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TargetCustomerSubscriptionArguments {
  challenges: StringExpression
  cond: Conditional = AND
  connectableResources: StringExpression
  contactInformation: StringExpression
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  creditInvestigation: StringExpression
  decisionMaker: StringExpression
  description: StringExpression
  exs: [TargetCustomerExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  logisticsMatching: StringExpression
  name: StringExpression
  needsAnalysis: StringExpression
  not: Boolean = false
  notes: StringExpression
  otherInfluencingFactors: StringExpression
  productMatching: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

scalar Time

scalar Timestamp

"""火车站"""
type TrainStation implements Meta & NamedStruct {
  """地址"""
  address: String
  addressCount: Int
  addressMax: String
  addressMin: String

  """市"""
  city: String
  cityCount: Int
  cityMax: String
  cityMin: String

  """代码"""
  code: String!
  codeCount: Int
  codeMax: String
  codeMin: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """区县"""
  district: String
  districtCount: Int
  districtMax: String
  districtMin: String

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """车站名"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """备注"""
  notes: String
  notesCount: Int
  notesMax: String
  notesMin: String

  """省"""
  province: String
  provinceCount: Int
  provinceMax: String
  provinceMin: String

  """铁路局"""
  railwayBureau(code: StringExpression, description: StringExpression, groupBy: [String!], id: StringExpression, name: StringExpression, notes: StringExpression, province: StringExpression): RailwayBureau!
  railwayBureauId: Int
  railwayBureauIdAvg: Int
  railwayBureauIdCount: Int
  railwayBureauIdMax: Int
  railwayBureauIdMin: Int
  railwayBureauIdSum: Int
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type TrainStationConnection {
  edges: [TrainStationEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input TrainStationConnectionQueryArguments {
  address: StringExpression
  after: ID
  before: ID
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  exs: [TrainStationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: TrainStationOrderBy
  province: StringExpression
  railwayBureau: RailwayBureauExpression
  railwayBureauId: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TrainStationConnectionSubscriptionArguments {
  address: StringExpression
  after: ID
  before: ID
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  exs: [TrainStationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: TrainStationOrderBy
  province: StringExpression
  railwayBureau: RailwayBureauExpression
  railwayBureauId: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type TrainStationEdge {
  cursor: ID
  node: TrainStation
}

input TrainStationExpression {
  address: StringExpression
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  exs: [TrainStationExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  province: StringExpression
  railwayBureau: RailwayBureauExpression
  railwayBureauId: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TrainStationInput {
  address: String
  city: String
  code: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  district: String
  id: ID
  isDeprecated: Boolean
  name: String
  notes: String
  province: String
  railwayBureau: RailwayBureauInput
  railwayBureauId: Int
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: TrainStationExpression
}

input TrainStationListMutationArguments {
  address: String
  city: String
  code: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  district: String
  id: ID
  isDeprecated: Boolean
  list: [TrainStationInput]
  name: String
  notes: String
  province: String
  railwayBureau: RailwayBureauInput
  railwayBureauId: Int
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: TrainStationExpression
}

input TrainStationListQueryArguments {
  address: StringExpression
  after: ID
  before: ID
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  exs: [TrainStationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: TrainStationOrderBy
  province: StringExpression
  railwayBureau: RailwayBureauExpression
  railwayBureauId: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TrainStationListSubscriptionArguments {
  address: StringExpression
  after: ID
  before: ID
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  exs: [TrainStationExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  offset: Int
  orderBy: TrainStationOrderBy
  province: StringExpression
  railwayBureau: RailwayBureauExpression
  railwayBureauId: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TrainStationMutationArguments {
  address: String
  city: String
  code: String
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  district: String
  id: ID
  isDeprecated: Boolean
  name: String
  notes: String
  province: String
  railwayBureau: RailwayBureauInput
  railwayBureauId: Int
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: TrainStationExpression
}

input TrainStationOrderBy {
  address: Sort
  city: Sort
  code: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  district: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  notes: Sort
  province: Sort
  railwayBureauId: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input TrainStationQueryArguments {
  address: StringExpression
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  exs: [TrainStationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  province: StringExpression
  railwayBureau: RailwayBureauExpression
  railwayBureauId: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input TrainStationSubscriptionArguments {
  address: StringExpression
  city: StringExpression
  code: StringExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  district: StringExpression
  exs: [TrainStationExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  not: Boolean = false
  notes: StringExpression
  province: StringExpression
  railwayBureau: RailwayBureauExpression
  railwayBureauId: IntExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

"""运输类型"""
enum TransportationMode {
  """集装箱"""
  CONTAINER

  """整车"""
  FULL_TRUCK

  """零担"""
  LESS_THAN_TRUCKLOAD

  """站到站"""
  RAILWAY

  """班列"""
  ROAD_TRANSPORT
}

input TransportationModeExpression {
  in: [TransportationMode]
  opr: Operator = EQ
  val: TransportationMode
}

interface TreeStruct {
  deep: Int
  name: String
  parentId: String
  path: String
}

input TreeStructExpression {
  deep: IntExpression
  name: StringExpression
  parentId: StringExpression
  path: StringExpression
}

input TreeStructInput {
  deep: Int
  name: String
  parentId: String
  path: String
}

"""用户"""
type User implements Meta & NamedStruct {
  createGroupId: String
  createTime: Timestamp
  createUserId: String

  """描述"""
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String

  """禁用"""
  disable: Boolean

  """邮箱"""
  email: String
  emailCount: Int
  emailMax: String
  emailMin: String

  """组"""
  groups(after: ID, before: ID, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, roles: RoleExpression, subGroups: GroupExpression, users: UserExpression): [Group]
  groupsAggregate(deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, roles: RoleExpression, subGroups: GroupExpression, users: UserExpression): Group
  groupsConnection(after: ID, before: ID, deep: IntExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, roles: RoleExpression, subGroups: GroupExpression, users: UserExpression): GroupConnection

  """哈希"""
  hash: String
  hashCount: Int
  hashMax: String
  hashMin: String

  """ID"""
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean

  """姓氏"""
  lastName: String
  lastNameCount: Int
  lastNameMax: String
  lastNameMin: String

  """账号"""
  login: String!
  loginCount: Int
  loginMax: String
  loginMin: String

  """姓名"""
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String

  """手机号"""
  phones(first: Int, in: [String], last: Int, offset: Int, opr: Operator = EQ, sort: Sort, val: String): [String]

  """租户"""
  realm(description: StringExpression, groupBy: [String!], id: StringExpression, name: StringExpression): Realm
  realmId: Int
  realmIdAvg: Int
  realmIdCount: Int
  realmIdMax: Int
  realmIdMin: Int
  realmIdSum: Int

  """角色"""
  roles(after: ID, before: ID, composites: RoleExpression, description: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, users: UserExpression): [Role]
  rolesAggregate(composites: RoleExpression, description: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, users: UserExpression): Role
  rolesConnection(after: ID, before: ID, composites: RoleExpression, description: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, users: UserExpression): RoleConnection

  """盐"""
  salt: String
  saltCount: Int
  saltMax: String
  saltMin: String
  syncUserPolicy: Boolean
  updateTime: Timestamp
  updateUserId: String
  userGroup: [UserGroup]
  userGroupAggregate(first: Int, groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, last: Int, offset: Int, orderBy: UserGroupOrderBy, userId: IntExpression, userIdType: UserExpression): UserGroup
  userGroupConnection(first: Int, groupBy: [String!], groupId: IntExpression, groupIdType: GroupExpression, id: StringExpression, last: Int, offset: Int, orderBy: UserGroupOrderBy, userId: IntExpression, userIdType: UserExpression): UserGroupConnection
  userPhones: [UserPhones]
  userPhonesAggregate(first: Int, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: UserPhonesOrderBy, phone: StringExpression, userId: IntExpression, userIdType: UserExpression): UserPhones
  userPhonesConnection(first: Int, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: UserPhonesOrderBy, phone: StringExpression, userId: IntExpression, userIdType: UserExpression): UserPhonesConnection
  userRole: [UserRole]
  userRoleAggregate(first: Int, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: UserRoleOrderBy, roleId: IntExpression, roleIdType: RoleExpression, userId: IntExpression, userIdType: UserExpression): UserRole
  userRoleConnection(first: Int, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: UserRoleOrderBy, roleId: IntExpression, roleIdType: RoleExpression, userId: IntExpression, userIdType: UserExpression): UserRoleConnection
  version: Int
}

type UserConnection {
  edges: [UserEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input UserConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  first: Int
  groupBy: [String!]
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: UserOrderBy
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  userPhones: UserPhonesExpression
  userRole: UserRoleExpression
  version: IntExpression
}

input UserConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  first: Int
  groupBy: [String!]
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: UserOrderBy
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  userPhones: UserPhonesExpression
  userRole: UserRoleExpression
  version: IntExpression
}

type UserEdge {
  cursor: ID
  node: User
}

input UserExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  userPhones: UserPhonesExpression
  userRole: UserRoleExpression
  version: IntExpression
}

type UserGroup implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  groupId: Int
  groupIdAvg: Int
  groupIdCount: Int
  groupIdMax: Int
  groupIdMin: Int
  groupIdSum: Int
  groupIdType(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, deep: IntExpression, description: StringExpression, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: StringExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  userIdAvg: Int
  userIdCount: Int
  userIdMax: Int
  userIdMin: Int
  userIdSum: Int
  userIdType(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): User
  version: Int
}

type UserGroupConnection {
  edges: [UserGroupEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input UserGroupConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserGroupExpression]
  first: Int
  groupBy: [String!]
  groupId: IntExpression
  groupIdType: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserGroupOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

input UserGroupConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserGroupExpression]
  first: Int
  groupBy: [String!]
  groupId: IntExpression
  groupIdType: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserGroupOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

type UserGroupEdge {
  cursor: ID
  node: UserGroup
}

input UserGroupExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserGroupExpression]
  groupId: IntExpression
  groupIdType: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

input UserGroupInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  groupId: Int
  groupIdType: GroupInput
  id: ID
  isDeprecated: Boolean
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  userIdType: UserInput
  version: Int
  where: UserGroupExpression
}

input UserGroupListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  groupId: Int
  groupIdType: GroupInput
  id: ID
  isDeprecated: Boolean
  list: [UserGroupInput]
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  userIdType: UserInput
  version: Int
  where: UserGroupExpression
}

input UserGroupListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserGroupExpression]
  first: Int
  groupBy: [String!]
  groupId: IntExpression
  groupIdType: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserGroupOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

input UserGroupListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserGroupExpression]
  first: Int
  groupBy: [String!]
  groupId: IntExpression
  groupIdType: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserGroupOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

input UserGroupMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  groupId: Int
  groupIdType: GroupInput
  id: ID
  isDeprecated: Boolean
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  userIdType: UserInput
  version: Int
  where: UserGroupExpression
}

input UserGroupOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  groupId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  userId: Sort
  version: Sort
}

input UserGroupQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserGroupExpression]
  groupBy: [String!]
  groupId: IntExpression
  groupIdType: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

input UserGroupSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserGroupExpression]
  groupBy: [String!]
  groupId: IntExpression
  groupIdType: GroupExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

input UserInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  disable: Boolean
  email: String
  groups: [GroupInput]
  hash: String
  id: ID
  isDeprecated: Boolean
  lastName: String
  login: String
  name: String
  phones: [String]
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  salt: String
  updateTime: Timestamp
  updateUserId: String
  userGroup: [UserGroupInput]
  userPhones: [UserPhonesInput]
  userRole: [UserRoleInput]
  version: Int
  where: UserExpression
}

input UserListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  disable: Boolean
  email: String
  groups: [GroupInput]
  hash: String
  id: ID
  isDeprecated: Boolean
  lastName: String
  list: [UserInput]
  login: String
  name: String
  phones: [String]
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  salt: String
  updateTime: Timestamp
  updateUserId: String
  userGroup: [UserGroupInput]
  userPhones: [UserPhonesInput]
  userRole: [UserRoleInput]
  version: Int
  where: UserExpression
}

input UserListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  first: Int
  groupBy: [String!]
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: UserOrderBy
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  userPhones: UserPhonesExpression
  userRole: UserRoleExpression
  version: IntExpression
}

input UserListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  first: Int
  groupBy: [String!]
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  offset: Int
  orderBy: UserOrderBy
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  userPhones: UserPhonesExpression
  userRole: UserRoleExpression
  version: IntExpression
}

input UserMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  disable: Boolean
  email: String
  groups: [GroupInput]
  hash: String
  id: ID
  isDeprecated: Boolean
  lastName: String
  login: String
  name: String
  phones: [String]
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  salt: String
  updateTime: Timestamp
  updateUserId: String
  userGroup: [UserGroupInput]
  userPhones: [UserPhonesInput]
  userRole: [UserRoleInput]
  version: Int
  where: UserExpression
}

input UserOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  disable: Sort
  email: Sort
  hash: Sort
  id: Sort
  isDeprecated: Sort
  lastName: Sort
  login: Sort
  name: Sort
  realmId: Sort
  salt: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

type UserPhones implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  phone: String
  phoneCount: Int
  phoneMax: String
  phoneMin: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  userIdAvg: Int
  userIdCount: Int
  userIdMax: Int
  userIdMin: Int
  userIdSum: Int
  userIdType(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): User
  version: Int
}

type UserPhonesConnection {
  edges: [UserPhonesEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input UserPhonesConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserPhonesOrderBy
  phone: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

input UserPhonesConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserPhonesOrderBy
  phone: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

type UserPhonesEdge {
  cursor: ID
  node: UserPhones
}

input UserPhonesExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  phone: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

input UserPhonesInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  phone: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  userIdType: UserInput
  version: Int
  where: UserPhonesExpression
}

input UserPhonesListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  list: [UserPhonesInput]
  phone: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  userIdType: UserInput
  version: Int
  where: UserPhonesExpression
}

input UserPhonesListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserPhonesOrderBy
  phone: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

input UserPhonesListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserPhonesOrderBy
  phone: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

input UserPhonesMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  phone: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  userIdType: UserInput
  version: Int
  where: UserPhonesExpression
}

input UserPhonesOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  phone: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  userId: Sort
  version: Sort
}

input UserPhonesQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  phone: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

input UserPhonesSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  phone: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

input UserQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  groupBy: [String!]
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  userPhones: UserPhonesExpression
  userRole: UserRoleExpression
  version: IntExpression
}

type UserRole implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  roleIdAvg: Int
  roleIdCount: Int
  roleIdMax: Int
  roleIdMin: Int
  roleIdSum: Int
  roleIdType(composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, groupBy: [String!], groupRole: GroupRoleExpression, groups: GroupExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleComposite: RoleCompositeExpression, rolePermission: RolePermissionExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  userIdAvg: Int
  userIdCount: Int
  userIdMax: Int
  userIdMin: Int
  userIdSum: Int
  userIdType(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, disable: BooleanExpression, email: StringExpression, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): User
  version: Int
}

type UserRoleConnection {
  edges: [UserRoleEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input UserRoleConnectionQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserRoleExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserRoleOrderBy
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

input UserRoleConnectionSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserRoleExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserRoleOrderBy
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

type UserRoleEdge {
  cursor: ID
  node: UserRole
}

input UserRoleExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserRoleExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

input UserRoleInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  roleIdType: RoleInput
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  userIdType: UserInput
  version: Int
  where: UserRoleExpression
}

input UserRoleListMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  list: [UserRoleInput]
  realmId: Int
  roleId: Int
  roleIdType: RoleInput
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  userIdType: UserInput
  version: Int
  where: UserRoleExpression
}

input UserRoleListQueryArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserRoleExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserRoleOrderBy
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

input UserRoleListSubscriptionArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserRoleExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  not: Boolean = false
  offset: Int
  orderBy: UserRoleOrderBy
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

input UserRoleMutationArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  roleIdType: RoleInput
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  userIdType: UserInput
  version: Int
  where: UserRoleExpression
}

input UserRoleOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  roleId: Sort
  updateTime: Sort
  updateUserId: Sort
  userId: Sort
  version: Sort
}

input UserRoleQueryArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserRoleExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

input UserRoleSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserRoleExpression]
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  not: Boolean = false
  realmId: IntExpression
  roleId: IntExpression
  roleIdType: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  userIdType: UserExpression
  version: IntExpression
}

input UserSubscriptionArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  groupBy: [String!]
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  not: Boolean = false
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  userPhones: UserPhonesExpression
  userRole: UserRoleExpression
  version: IntExpression
}

input ValidationInput {
  allOf: [ValidationInput]
  anyOf: [ValidationInput]
  const: String
  contentEncoding: String
  contentMediaType: String
  dependentRequired: [Property]
  else: ValidationInput
  enum: [String]
  exclusiveMaximum: Float
  exclusiveMinimum: Float
  format: String
  if: ValidationInput
  items: ValidationInput
  maxItems: Int
  maxLength: Int
  maximum: Float
  minItems: Int
  minLength: Int
  minimum: Float
  multipleOf: Float
  not: ValidationInput
  oneOf: [ValidationInput]
  pattern: String
  properties: [Property]
  then: ValidationInput
  uniqueItems: Boolean
}

input With {
  from: String
  to: String
  type: String
}
