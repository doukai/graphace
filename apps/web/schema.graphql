schema {
  query: QueryType
  mutation: MutationType
  subscription: SubscriptionType
}

directive @classInfo(annotationName: String, className: String!, exists: Boolean, grpcClassName: String) on OBJECT

directive @connection(agg: String, field: String) on FIELD_DEFINITION

directive @containerType on OBJECT

directive @cursor on FIELD_DEFINITION

directive @dataType(autoIncrement: Boolean, decimals: Int, default: String, length: Int, type: String) on FIELD_DEFINITION

directive @delete(if: Boolean = false) on FIELD

directive @denyAll on FIELD | OBJECT

directive @fetch(anchor: Boolean, from: String!, protocol: Protocol, to: String, with: MapWith) on FIELD_DEFINITION

directive @format(locale: String, value: String) on FIELD | FIELD_DEFINITION

directive @func(field: String, name: Function) on FIELD_DEFINITION

directive @invoke(className: String, methodName: String, parameters: [InvokeParameter], returnClassName: String) on FIELD_DEFINITION | INPUT_OBJECT | MUTATION | QUERY | SUBSCRIPTION

directive @invokes(list: [Invoke]) on FIELD_DEFINITION | INPUT_OBJECT | MUTATION | QUERY | SUBSCRIPTION

directive @map(anchor: Boolean, from: String!, to: String, with: MapWith) on FIELD_DEFINITION

directive @mergeToList(arguments: [String]) on FIELD

directive @packageInfo(grpcPackageName: String, packageName: String!) on FIELD_DEFINITION | MUTATION | OBJECT | QUERY | SUBSCRIPTION

directive @permitAll on FIELD | OBJECT

directive @rolesAllowed(roles: [String]) on FIELD | OBJECT

directive @table(engine: String) on OBJECT

directive @update(if: Boolean = false) on FIELD

directive @validation(allOf: [ValidationInput], anyOf: [ValidationInput], const: String, contentEncoding: String, contentMediaType: String, dependentRequired: [Property], else: ValidationInput, enum: [String], exclusiveMaximum: Float, exclusiveMinimum: Float, format: String, if: ValidationInput, items: ValidationInput, maxItems: Int, maxLength: Int, maximum: Float, minItems: Int, minLength: Int, minimum: Float, multipleOf: Float, not: ValidationInput, oneOf: [ValidationInput], pattern: String, properties: [Property], then: ValidationInput, uniqueItems: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | OBJECT

type Api implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String
  realm(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmId: Int
  realmIdAvg: Int
  realmIdCount: Int
  realmIdMax: Int
  realmIdMin: Int
  realmIdSum: Int
  role(apis: ApiExpression, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, menus: MenuExpression, name: StringExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleApi: RoleApiExpression, roleComposite: RoleCompositeExpression, roleMenu: RoleMenuExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  roleId: Int
  roleIdAvg: Int
  roleIdCount: Int
  roleIdMax: Int
  roleIdMin: Int
  roleIdSum: Int
  type: ApiType
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type ApiConnection {
  edges: [ApiEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input ApiConnectionQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [ApiExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  offset: Int
  orderBy: ApiOrderBy
  realm: RealmExpression
  realmId: IntExpression
  role: RoleExpression
  roleId: IntExpression
  type: ApiTypeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type ApiEdge {
  cursor: ID
  node: Api
}

input ApiExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [ApiExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  role: RoleExpression
  roleId: IntExpression
  type: ApiTypeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ApiInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  name: String!
  realm: RealmInput
  realmId: Int
  role: RoleInput
  roleId: Int
  type: ApiType
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

input ApiListMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  list: [ApiInput]
  name: String
  realm: RealmInput
  realmId: Int
  role: RoleInput
  roleId: Int
  type: ApiType
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: ApiExpression
}

input ApiListQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [ApiExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  offset: Int
  orderBy: ApiOrderBy
  realm: RealmExpression
  realmId: IntExpression
  role: RoleExpression
  roleId: IntExpression
  type: ApiTypeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input ApiMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  name: String
  realm: RealmInput
  realmId: Int
  role: RoleInput
  roleId: Int
  type: ApiType
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: ApiExpression
}

input ApiOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  realmId: Sort
  roleId: Sort
  type: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input ApiQueryTypeArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [ApiExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  role: RoleExpression
  roleId: IntExpression
  type: ApiTypeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

enum ApiType {
  MUTATION
  QUERY
  SUBSCRIPTION
}

input ApiTypeExpression {
  in: [ApiType]
  opr: Operator = EQ
  val: ApiType
}

scalar BigDecimal

scalar BigInteger

input BooleanExpression {
  in: [Boolean]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: Boolean
}

enum Conditional {
  AND
  OR
}

input ConditionalExpression {
  in: [Conditional]
  opr: Operator = EQ
  val: Conditional
}

type CurrentUser {
  groups: [String]
  lastName: String
  login: String
  name: String
  realmId: String
  roles: [String]
}

scalar Date

scalar DateTime

input FloatExpression {
  in: [Float]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: Float
}

enum Function {
  AVG
  COUNT
  MAX
  MIN
  SUM
}

input FunctionExpression {
  in: [Function]
  opr: Operator = EQ
  val: Function
}

type Group implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  groupRole: [GroupRole]
  groupRoleAggregate(first: Int, from: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, last: Int, offset: Int, orderBy: GroupRoleOrderBy, roleId: IntExpression, to: RoleExpression): GroupRole
  groupRoleConnection(first: Int, from: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, last: Int, offset: Int, orderBy: GroupRoleOrderBy, roleId: IntExpression, to: RoleExpression): GroupRoleConnection
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String
  parent(id: StringExpression, name: StringExpression, parent: GroupExpression, realm: RealmExpression, roles: RoleExpression, subGroups: GroupExpression, users: UserExpression): Group
  parentId: Int
  parentIdAvg: Int
  parentIdCount: Int
  parentIdMax: Int
  parentIdMin: Int
  parentIdSum: Int
  realm(id: StringExpression, name: StringExpression): Realm
  realmId: Int
  realmIdAvg: Int
  realmIdCount: Int
  realmIdMax: Int
  realmIdMin: Int
  realmIdSum: Int
  roles(after: ID, apis: ApiExpression, before: ID, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, menus: MenuExpression, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleApi: RoleApiExpression, roleComposite: RoleCompositeExpression, roleMenu: RoleMenuExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): [Role]
  rolesAggregate(apis: ApiExpression, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, menus: MenuExpression, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleApi: RoleApiExpression, roleComposite: RoleCompositeExpression, roleMenu: RoleMenuExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  rolesConnection(apis: ApiExpression, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, menus: MenuExpression, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleApi: RoleApiExpression, roleComposite: RoleCompositeExpression, roleMenu: RoleMenuExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): RoleConnection
  subGroups(after: ID, before: ID, first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, realm: RealmExpression, roles: RoleExpression, subGroups: GroupExpression, users: UserExpression): [Group]
  subGroupsAggregate(first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, realm: RealmExpression, roles: RoleExpression, subGroups: GroupExpression, users: UserExpression): Group
  subGroupsConnection(first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, realm: RealmExpression, roles: RoleExpression, subGroups: GroupExpression, users: UserExpression): GroupConnection
  updateTime: Timestamp
  updateUserId: String
  userGroup: [UserGroup]
  userGroupAggregate(first: Int, from: UserExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, last: Int, offset: Int, orderBy: UserGroupOrderBy, to: GroupExpression, userId: IntExpression): UserGroup
  userGroupConnection(first: Int, from: UserExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, last: Int, offset: Int, orderBy: UserGroupOrderBy, to: GroupExpression, userId: IntExpression): UserGroupConnection
  users(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): [User]
  usersAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): User
  usersConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): UserConnection
  version: Int
}

type GroupConnection {
  edges: [GroupEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input GroupConnectionQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupExpression]
  first: Int
  groupBy: [String!]
  groupRole: GroupRoleExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  offset: Int
  orderBy: GroupOrderBy
  parent: GroupExpression
  parentId: IntExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  users: UserExpression
  version: IntExpression
}

type GroupEdge {
  cursor: ID
  node: Group
}

input GroupExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupExpression]
  groupRole: GroupRoleExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  parent: GroupExpression
  parentId: IntExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  users: UserExpression
  version: IntExpression
}

input GroupInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  groupRole: [GroupRoleInput]
  id: ID
  isDeprecated: Boolean
  name: String!
  parent: GroupInput
  parentId: Int
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  subGroups: [GroupInput]
  updateTime: Timestamp
  updateUserId: String
  userGroup: [UserGroupInput]
  users: [UserInput]
  version: Int
}

input GroupListMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  groupRole: [GroupRoleInput]
  id: ID
  isDeprecated: Boolean
  list: [GroupInput]
  name: String
  parent: GroupInput
  parentId: Int
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  subGroups: [GroupInput]
  updateTime: Timestamp
  updateUserId: String
  userGroup: [UserGroupInput]
  users: [UserInput]
  version: Int
  where: GroupExpression
}

input GroupListQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupExpression]
  first: Int
  groupBy: [String!]
  groupRole: GroupRoleExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  offset: Int
  orderBy: GroupOrderBy
  parent: GroupExpression
  parentId: IntExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  users: UserExpression
  version: IntExpression
}

input GroupMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  groupRole: [GroupRoleInput]
  id: ID
  isDeprecated: Boolean
  name: String
  parent: GroupInput
  parentId: Int
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  subGroups: [GroupInput]
  updateTime: Timestamp
  updateUserId: String
  userGroup: [UserGroupInput]
  users: [UserInput]
  version: Int
  where: GroupExpression
}

input GroupOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  parentId: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input GroupQueryTypeArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupExpression]
  groupRole: GroupRoleExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  parent: GroupExpression
  parentId: IntExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  subGroups: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  users: UserExpression
  version: IntExpression
}

type GroupRole implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: IntExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group
  groupId: Int
  groupIdAvg: Int
  groupIdCount: Int
  groupIdMax: Int
  groupIdMin: Int
  groupIdSum: Int
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  roleIdAvg: Int
  roleIdCount: Int
  roleIdMax: Int
  roleIdMin: Int
  roleIdSum: Int
  to(apis: ApiExpression, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, menus: MenuExpression, name: StringExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleApi: RoleApiExpression, roleComposite: RoleCompositeExpression, roleMenu: RoleMenuExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type GroupRoleConnection {
  edges: [GroupRoleEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input GroupRoleConnectionQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleExpression]
  first: Int
  from: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  offset: Int
  orderBy: GroupRoleOrderBy
  realmId: IntExpression
  roleId: IntExpression
  to: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type GroupRoleEdge {
  cursor: ID
  node: GroupRole
}

input GroupRoleExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleExpression]
  from: GroupExpression
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  realmId: IntExpression
  roleId: IntExpression
  to: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupRoleInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  to: RoleInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

input GroupRoleListMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  list: [GroupRoleInput]
  realmId: Int
  roleId: Int
  to: RoleInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: GroupRoleExpression
}

input GroupRoleListQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleExpression]
  first: Int
  from: GroupExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  offset: Int
  orderBy: GroupRoleOrderBy
  realmId: IntExpression
  roleId: IntExpression
  to: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input GroupRoleMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: GroupInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  to: RoleInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: GroupRoleExpression
}

input GroupRoleOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  groupId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  roleId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input GroupRoleQueryTypeArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [GroupRoleExpression]
  from: GroupExpression
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  realmId: IntExpression
  roleId: IntExpression
  to: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input IDExpression {
  in: [ID]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: ID
}

input IntExpression {
  in: [Int]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: Int
}

input Invoke {
  className: String
  methodName: String
  parameters: [InvokeParameter]
  returnClassName: String
}

input InvokeParameter {
  className: String
  name: String
}

input MapWith {
  from: String
  to: String
  type: String
}

type Menu implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String
  folder(description: StringExpression, folder: MenuExpression, icon: StringExpression, id: StringExpression, name: StringExpression, path: StringExpression, realm: RealmExpression, role: RoleExpression, type: MenuTypeExpression): Menu
  icon: String
  iconCount: Int
  iconMax: String
  iconMin: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String
  parentId: Int
  parentIdAvg: Int
  parentIdCount: Int
  parentIdMax: Int
  parentIdMin: Int
  parentIdSum: Int
  path: String
  pathCount: Int
  pathMax: String
  pathMin: String
  realm(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmId: Int
  realmIdAvg: Int
  realmIdCount: Int
  realmIdMax: Int
  realmIdMin: Int
  realmIdSum: Int
  role(apis: ApiExpression, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, menus: MenuExpression, name: StringExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleApi: RoleApiExpression, roleComposite: RoleCompositeExpression, roleMenu: RoleMenuExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  roleId: Int
  roleIdAvg: Int
  roleIdCount: Int
  roleIdMax: Int
  roleIdMin: Int
  roleIdSum: Int
  type: MenuType!
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type MenuConnection {
  edges: [MenuEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input MenuConnectionQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [MenuExpression]
  first: Int
  folder: MenuExpression
  groupBy: [String!]
  icon: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  offset: Int
  orderBy: MenuOrderBy
  parentId: IntExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  role: RoleExpression
  roleId: IntExpression
  type: MenuTypeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type MenuEdge {
  cursor: ID
  node: Menu
}

input MenuExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [MenuExpression]
  folder: MenuExpression
  icon: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  parentId: IntExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  role: RoleExpression
  roleId: IntExpression
  type: MenuTypeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input MenuInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  folder: MenuInput
  icon: String
  id: ID
  isDeprecated: Boolean
  name: String!
  parentId: Int
  path: String
  realm: RealmInput
  realmId: Int
  role: RoleInput
  roleId: Int
  type: MenuType!
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

input MenuListMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  folder: MenuInput
  icon: String
  id: ID
  isDeprecated: Boolean
  list: [MenuInput]
  name: String
  parentId: Int
  path: String
  realm: RealmInput
  realmId: Int
  role: RoleInput
  roleId: Int
  type: MenuType
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: MenuExpression
}

input MenuListQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [MenuExpression]
  first: Int
  folder: MenuExpression
  groupBy: [String!]
  icon: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  offset: Int
  orderBy: MenuOrderBy
  parentId: IntExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  role: RoleExpression
  roleId: IntExpression
  type: MenuTypeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input MenuMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  folder: MenuInput
  icon: String
  id: ID
  isDeprecated: Boolean
  name: String
  parentId: Int
  path: String
  realm: RealmInput
  realmId: Int
  role: RoleInput
  roleId: Int
  type: MenuType
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: MenuExpression
}

input MenuOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  icon: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  parentId: Sort
  path: Sort
  realmId: Sort
  roleId: Sort
  type: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input MenuQueryTypeArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [MenuExpression]
  folder: MenuExpression
  icon: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  parentId: IntExpression
  path: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  role: RoleExpression
  roleId: IntExpression
  type: MenuTypeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

enum MenuType {
  FOLDER
  PAGE
}

input MenuTypeExpression {
  in: [MenuType]
  opr: Operator = EQ
  val: MenuType
}

interface Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  isDeprecated: Boolean
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type MutationType implements Meta {
  api(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, isDeprecated: Boolean, name: String, realm: RealmInput, realmId: Int, role: RoleInput, roleId: Int, type: ApiType, updateTime: Timestamp, updateUserId: String, version: Int, where: ApiExpression): Api
  apiList(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, isDeprecated: Boolean, list: [ApiInput], name: String, realm: RealmInput, realmId: Int, role: RoleInput, roleId: Int, type: ApiType, updateTime: Timestamp, updateUserId: String, version: Int, where: ApiExpression): [Api]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  group(createGroupId: String, createTime: Timestamp, createUserId: String, groupRole: [GroupRoleInput], id: ID, isDeprecated: Boolean, name: String, parent: GroupInput, parentId: Int, realm: RealmInput, realmId: Int, roles: [RoleInput], subGroups: [GroupInput], updateTime: Timestamp, updateUserId: String, userGroup: [UserGroupInput], users: [UserInput], version: Int, where: GroupExpression): Group
  groupList(createGroupId: String, createTime: Timestamp, createUserId: String, groupRole: [GroupRoleInput], id: ID, isDeprecated: Boolean, list: [GroupInput], name: String, parent: GroupInput, parentId: Int, realm: RealmInput, realmId: Int, roles: [RoleInput], subGroups: [GroupInput], updateTime: Timestamp, updateUserId: String, userGroup: [UserGroupInput], users: [UserInput], version: Int, where: GroupExpression): [Group]
  groupRole(createGroupId: String, createTime: Timestamp, createUserId: String, from: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, realmId: Int, roleId: Int, to: RoleInput, updateTime: Timestamp, updateUserId: String, version: Int, where: GroupRoleExpression): GroupRole
  groupRoleList(createGroupId: String, createTime: Timestamp, createUserId: String, from: GroupInput, groupId: Int, id: ID, isDeprecated: Boolean, list: [GroupRoleInput], realmId: Int, roleId: Int, to: RoleInput, updateTime: Timestamp, updateUserId: String, version: Int, where: GroupRoleExpression): [GroupRole]
  isDeprecated: Boolean
  login(login: String!, password: String!): String
  menu(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, folder: MenuInput, icon: String, id: ID, isDeprecated: Boolean, name: String, parentId: Int, path: String, realm: RealmInput, realmId: Int, role: RoleInput, roleId: Int, type: MenuType, updateTime: Timestamp, updateUserId: String, version: Int, where: MenuExpression): Menu
  menuList(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, folder: MenuInput, icon: String, id: ID, isDeprecated: Boolean, list: [MenuInput], name: String, parentId: Int, path: String, realm: RealmInput, realmId: Int, role: RoleInput, roleId: Int, type: MenuType, updateTime: Timestamp, updateUserId: String, version: Int, where: MenuExpression): [Menu]
  permission(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, isDeprecated: Boolean, level: PermissionLevel, name: String, realm: RealmInput, realmId: Int, role: RoleInput, roleId: Int, type: PermissionType, updateTime: Timestamp, updateUserId: String, version: Int, where: PermissionExpression): Permission
  permissionList(createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, isDeprecated: Boolean, level: PermissionLevel, list: [PermissionInput], name: String, realm: RealmInput, realmId: Int, role: RoleInput, roleId: Int, type: PermissionType, updateTime: Timestamp, updateUserId: String, version: Int, where: PermissionExpression): [Permission]
  realm(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, name: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: RealmExpression): Realm
  realmId: Int
  realmList(createGroupId: String, createTime: Timestamp, createUserId: String, id: ID, isDeprecated: Boolean, list: [RealmInput], name: String, realmId: Int, updateTime: Timestamp, updateUserId: String, version: Int, where: RealmExpression): [Realm]
  role(apis: [ApiInput], composites: [RoleInput], createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, isDeprecated: Boolean, menus: [MenuInput], name: String, permissions: [PermissionInput], realm: RealmInput, realmId: Int, roleApi: [RoleApiInput], roleComposite: [RoleCompositeInput], roleMenu: [RoleMenuInput], updateTime: Timestamp, updateUserId: String, userRole: [UserRoleInput], users: [UserInput], version: Int, where: RoleExpression): Role
  roleApi(apiId: Int, createGroupId: String, createTime: Timestamp, createUserId: String, from: RoleInput, id: ID, isDeprecated: Boolean, realmId: Int, roleId: Int, to: ApiInput, updateTime: Timestamp, updateUserId: String, version: Int, where: RoleApiExpression): RoleApi
  roleApiList(apiId: Int, createGroupId: String, createTime: Timestamp, createUserId: String, from: RoleInput, id: ID, isDeprecated: Boolean, list: [RoleApiInput], realmId: Int, roleId: Int, to: ApiInput, updateTime: Timestamp, updateUserId: String, version: Int, where: RoleApiExpression): [RoleApi]
  roleComposite(compositeId: Int, createGroupId: String, createTime: Timestamp, createUserId: String, from: RoleInput, id: ID, isDeprecated: Boolean, realmId: Int, roleId: Int, to: RoleInput, updateTime: Timestamp, updateUserId: String, version: Int, where: RoleCompositeExpression): RoleComposite
  roleCompositeList(compositeId: Int, createGroupId: String, createTime: Timestamp, createUserId: String, from: RoleInput, id: ID, isDeprecated: Boolean, list: [RoleCompositeInput], realmId: Int, roleId: Int, to: RoleInput, updateTime: Timestamp, updateUserId: String, version: Int, where: RoleCompositeExpression): [RoleComposite]
  roleList(apis: [ApiInput], composites: [RoleInput], createGroupId: String, createTime: Timestamp, createUserId: String, description: String, id: ID, isDeprecated: Boolean, list: [RoleInput], menus: [MenuInput], name: String, permissions: [PermissionInput], realm: RealmInput, realmId: Int, roleApi: [RoleApiInput], roleComposite: [RoleCompositeInput], roleMenu: [RoleMenuInput], updateTime: Timestamp, updateUserId: String, userRole: [UserRoleInput], users: [UserInput], version: Int, where: RoleExpression): [Role]
  roleMenu(createGroupId: String, createTime: Timestamp, createUserId: String, from: RoleInput, id: ID, isDeprecated: Boolean, menuId: Int, realmId: Int, roleId: Int, to: MenuInput, updateTime: Timestamp, updateUserId: String, version: Int, where: RoleMenuExpression): RoleMenu
  roleMenuList(createGroupId: String, createTime: Timestamp, createUserId: String, from: RoleInput, id: ID, isDeprecated: Boolean, list: [RoleMenuInput], menuId: Int, realmId: Int, roleId: Int, to: MenuInput, updateTime: Timestamp, updateUserId: String, version: Int, where: RoleMenuExpression): [RoleMenu]
  updateTime: Timestamp
  updateUserId: String
  user(createGroupId: String, createTime: Timestamp, createUserId: String, disable: Boolean, email: String, groups: [GroupInput], hash: String, id: ID, isDeprecated: Boolean, lastName: String, login: String, name: String, phones: [String], realm: RealmInput, realmId: Int, roles: [RoleInput], salt: String, updateTime: Timestamp, updateUserId: String, userGroup: [UserGroupInput], userPhones: [UserPhonesInput], userRole: [UserRoleInput], version: Int, where: UserExpression): User
  userGroup(createGroupId: String, createTime: Timestamp, createUserId: String, from: UserInput, groupId: Int, id: ID, isDeprecated: Boolean, realmId: Int, to: GroupInput, updateTime: Timestamp, updateUserId: String, userId: Int, version: Int, where: UserGroupExpression): UserGroup
  userGroupList(createGroupId: String, createTime: Timestamp, createUserId: String, from: UserInput, groupId: Int, id: ID, isDeprecated: Boolean, list: [UserGroupInput], realmId: Int, to: GroupInput, updateTime: Timestamp, updateUserId: String, userId: Int, version: Int, where: UserGroupExpression): [UserGroup]
  userList(createGroupId: String, createTime: Timestamp, createUserId: String, disable: Boolean, email: String, groups: [GroupInput], hash: String, id: ID, isDeprecated: Boolean, lastName: String, list: [UserInput], login: String, name: String, phones: [String], realm: RealmInput, realmId: Int, roles: [RoleInput], salt: String, updateTime: Timestamp, updateUserId: String, userGroup: [UserGroupInput], userPhones: [UserPhonesInput], userRole: [UserRoleInput], version: Int, where: UserExpression): [User]
  userPhones(createGroupId: String, createTime: Timestamp, createUserId: String, from: UserInput, id: ID, isDeprecated: Boolean, phone: String, realmId: Int, updateTime: Timestamp, updateUserId: String, userId: Int, version: Int, where: UserPhonesExpression): UserPhones
  userPhonesList(createGroupId: String, createTime: Timestamp, createUserId: String, from: UserInput, id: ID, isDeprecated: Boolean, list: [UserPhonesInput], phone: String, realmId: Int, updateTime: Timestamp, updateUserId: String, userId: Int, version: Int, where: UserPhonesExpression): [UserPhones]
  userRole(createGroupId: String, createTime: Timestamp, createUserId: String, from: UserInput, id: ID, isDeprecated: Boolean, realmId: Int, roleId: Int, to: RoleInput, updateTime: Timestamp, updateUserId: String, userId: Int, version: Int, where: UserRoleExpression): UserRole
  userRoleList(createGroupId: String, createTime: Timestamp, createUserId: String, from: UserInput, id: ID, isDeprecated: Boolean, list: [UserRoleInput], realmId: Int, roleId: Int, to: RoleInput, updateTime: Timestamp, updateUserId: String, userId: Int, version: Int, where: UserRoleExpression): [UserRole]
  version: Int
}

enum Operator {
  BT
  EQ
  GT
  GTE
  IN
  LK
  LT
  LTE
  NBT
  NEQ
  NGT
  NGTE
  NIL
  NIN
  NLK
  NLT
  NLTE
  NNIL
}

input OperatorExpression {
  in: [Operator]
  opr: Operator = EQ
  val: Operator
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

type Permission implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  level: PermissionLevel
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String
  realm(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmId: Int
  realmIdAvg: Int
  realmIdCount: Int
  realmIdMax: Int
  realmIdMin: Int
  realmIdSum: Int
  role(apis: ApiExpression, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, menus: MenuExpression, name: StringExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleApi: RoleApiExpression, roleComposite: RoleCompositeExpression, roleMenu: RoleMenuExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  roleId: Int
  roleIdAvg: Int
  roleIdCount: Int
  roleIdMax: Int
  roleIdMin: Int
  roleIdSum: Int
  type: PermissionType
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type PermissionConnection {
  edges: [PermissionEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input PermissionConnectionQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  level: PermissionLevelExpression
  name: StringExpression
  offset: Int
  orderBy: PermissionOrderBy
  realm: RealmExpression
  realmId: IntExpression
  role: RoleExpression
  roleId: IntExpression
  type: PermissionTypeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type PermissionEdge {
  cursor: ID
  node: Permission
}

input PermissionExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  level: PermissionLevelExpression
  name: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  role: RoleExpression
  roleId: IntExpression
  type: PermissionTypeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  level: PermissionLevel
  name: String!
  realm: RealmInput
  realmId: Int
  role: RoleInput
  roleId: Int
  type: PermissionType
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

enum PermissionLevel {
  ALL
  GROUP
  REALM
  SUB_GROUP
  USER
}

input PermissionLevelExpression {
  in: [PermissionLevel]
  opr: Operator = EQ
  val: PermissionLevel
}

input PermissionListMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  level: PermissionLevel
  list: [PermissionInput]
  name: String
  realm: RealmInput
  realmId: Int
  role: RoleInput
  roleId: Int
  type: PermissionType
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: PermissionExpression
}

input PermissionListQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  level: PermissionLevelExpression
  name: StringExpression
  offset: Int
  orderBy: PermissionOrderBy
  realm: RealmExpression
  realmId: IntExpression
  role: RoleExpression
  roleId: IntExpression
  type: PermissionTypeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input PermissionMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  level: PermissionLevel
  name: String
  realm: RealmInput
  realmId: Int
  role: RoleInput
  roleId: Int
  type: PermissionType
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: PermissionExpression
}

input PermissionOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  id: Sort
  isDeprecated: Sort
  level: Sort
  name: Sort
  realmId: Sort
  roleId: Sort
  type: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input PermissionQueryTypeArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [PermissionExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  level: PermissionLevelExpression
  name: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  role: RoleExpression
  roleId: IntExpression
  type: PermissionTypeExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

enum PermissionType {
  READ
  WRITE
}

input PermissionTypeExpression {
  in: [PermissionType]
  opr: Operator = EQ
  val: PermissionType
}

input Property {
  name: String!
  required: [String]
  validation: ValidationInput
}

enum Protocol {
  GRPC
  HTTP
  LOCAL
  RSOCKET
}

input ProtocolExpression {
  in: [Protocol]
  opr: Operator = EQ
  val: Protocol
}

type QueryType implements Meta {
  api(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [ApiExpression], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: ApiTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Api
  apiConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [ApiExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: ApiOrderBy, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: ApiTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): ApiConnection
  apiList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [ApiExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: ApiOrderBy, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: ApiTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Api]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  current: CurrentUser
  group(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupExpression], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: IntExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group
  groupConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupExpression], first: Int, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: IntExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): GroupConnection
  groupList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupExpression], first: Int, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: IntExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): [Group]
  groupRole(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleExpression], from: GroupExpression, groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, realmId: IntExpression, roleId: IntExpression, to: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRole
  groupRoleConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleExpression], first: Int, from: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupRoleOrderBy, realmId: IntExpression, roleId: IntExpression, to: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleConnection
  groupRoleList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleExpression], first: Int, from: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupRoleOrderBy, realmId: IntExpression, roleId: IntExpression, to: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [GroupRole]
  isDeprecated: Boolean
  menu(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [MenuExpression], folder: MenuExpression, icon: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parentId: IntExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: MenuTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Menu
  menuConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [MenuExpression], first: Int, folder: MenuExpression, groupBy: [String!], icon: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: MenuOrderBy, parentId: IntExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: MenuTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): MenuConnection
  menuList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [MenuExpression], first: Int, folder: MenuExpression, groupBy: [String!], icon: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: MenuOrderBy, parentId: IntExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: MenuTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Menu]
  permission(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], id: StringExpression, includeDeprecated: Boolean = false, level: PermissionLevelExpression, name: StringExpression, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: PermissionTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Permission
  permissionConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, level: PermissionLevelExpression, name: StringExpression, offset: Int, orderBy: PermissionOrderBy, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: PermissionTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionConnection
  permissionList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, level: PermissionLevelExpression, name: StringExpression, offset: Int, orderBy: PermissionOrderBy, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: PermissionTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Permission]
  realm(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RealmExpression], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RealmExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RealmOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RealmConnection
  realmId: Int
  realmList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RealmExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RealmOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Realm]
  role(apis: ApiExpression, composites: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], id: StringExpression, includeDeprecated: Boolean = false, menus: MenuExpression, name: StringExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleApi: RoleApiExpression, roleComposite: RoleCompositeExpression, roleMenu: RoleMenuExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  roleApi(apiId: IntExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleApiExpression], from: RoleExpression, id: StringExpression, includeDeprecated: Boolean = false, realmId: IntExpression, roleId: IntExpression, to: ApiExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleApi
  roleApiConnection(after: ID, apiId: IntExpression, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleApiExpression], first: Int, from: RoleExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleApiOrderBy, realmId: IntExpression, roleId: IntExpression, to: ApiExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleApiConnection
  roleApiList(after: ID, apiId: IntExpression, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleApiExpression], first: Int, from: RoleExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleApiOrderBy, realmId: IntExpression, roleId: IntExpression, to: ApiExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RoleApi]
  roleComposite(compositeId: IntExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeExpression], from: RoleExpression, id: StringExpression, includeDeprecated: Boolean = false, realmId: IntExpression, roleId: IntExpression, to: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleComposite
  roleCompositeConnection(after: ID, before: ID, compositeId: IntExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeExpression], first: Int, from: RoleExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleCompositeOrderBy, realmId: IntExpression, roleId: IntExpression, to: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleCompositeConnection
  roleCompositeList(after: ID, before: ID, compositeId: IntExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeExpression], first: Int, from: RoleExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleCompositeOrderBy, realmId: IntExpression, roleId: IntExpression, to: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RoleComposite]
  roleConnection(after: ID, apis: ApiExpression, before: ID, composites: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, menus: MenuExpression, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleApi: RoleApiExpression, roleComposite: RoleCompositeExpression, roleMenu: RoleMenuExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): RoleConnection
  roleList(after: ID, apis: ApiExpression, before: ID, composites: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, menus: MenuExpression, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleApi: RoleApiExpression, roleComposite: RoleCompositeExpression, roleMenu: RoleMenuExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): [Role]
  roleMenu(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleMenuExpression], from: RoleExpression, id: StringExpression, includeDeprecated: Boolean = false, menuId: IntExpression, realmId: IntExpression, roleId: IntExpression, to: MenuExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleMenu
  roleMenuConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleMenuExpression], first: Int, from: RoleExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, menuId: IntExpression, offset: Int, orderBy: RoleMenuOrderBy, realmId: IntExpression, roleId: IntExpression, to: MenuExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleMenuConnection
  roleMenuList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleMenuExpression], first: Int, from: RoleExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, menuId: IntExpression, offset: Int, orderBy: RoleMenuOrderBy, realmId: IntExpression, roleId: IntExpression, to: MenuExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RoleMenu]
  updateTime: Timestamp
  updateUserId: String
  user(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): User
  userConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): UserConnection
  userGroup(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserGroupExpression], from: UserExpression, groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, realmId: IntExpression, to: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserGroup
  userGroupConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserGroupExpression], first: Int, from: UserExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserGroupOrderBy, realmId: IntExpression, to: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserGroupConnection
  userGroupList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserGroupExpression], first: Int, from: UserExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserGroupOrderBy, realmId: IntExpression, to: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): [UserGroup]
  userList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): [User]
  userPhones(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesExpression], from: UserExpression, id: StringExpression, includeDeprecated: Boolean = false, phone: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserPhones
  userPhonesConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesExpression], first: Int, from: UserExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserPhonesOrderBy, phone: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserPhonesConnection
  userPhonesList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesExpression], first: Int, from: UserExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserPhonesOrderBy, phone: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): [UserPhones]
  userRole(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserRoleExpression], from: UserExpression, id: StringExpression, includeDeprecated: Boolean = false, realmId: IntExpression, roleId: IntExpression, to: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserRole
  userRoleConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserRoleExpression], first: Int, from: UserExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserRoleOrderBy, realmId: IntExpression, roleId: IntExpression, to: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserRoleConnection
  userRoleList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserRoleExpression], first: Int, from: UserExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserRoleOrderBy, realmId: IntExpression, roleId: IntExpression, to: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): [UserRole]
  version: Int
}

type Realm implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type RealmConnection {
  edges: [RealmEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RealmConnectionQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RealmExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  offset: Int
  orderBy: RealmOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RealmEdge {
  cursor: ID
  node: Realm
}

input RealmExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RealmExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RealmInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  name: String!
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

input RealmListMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  list: [RealmInput]
  name: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RealmExpression
}

input RealmListQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RealmExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  name: StringExpression
  offset: Int
  orderBy: RealmOrderBy
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RealmMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  id: ID
  isDeprecated: Boolean
  name: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RealmExpression
}

input RealmOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RealmQueryTypeArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RealmExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  name: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type Role implements Meta {
  apis(after: ID, before: ID, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: ApiOrderBy, realm: RealmExpression, role: RoleExpression, type: ApiTypeExpression): [Api]
  apisAggregate(description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: ApiOrderBy, realm: RealmExpression, role: RoleExpression, type: ApiTypeExpression): Api
  apisConnection(description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: ApiOrderBy, realm: RealmExpression, role: RoleExpression, type: ApiTypeExpression): ApiConnection
  composites(after: ID, apis: ApiExpression, before: ID, composites: RoleExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, menus: MenuExpression, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, users: UserExpression): [Role]
  compositesAggregate(apis: ApiExpression, composites: RoleExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, menus: MenuExpression, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, users: UserExpression): Role
  compositesConnection(apis: ApiExpression, composites: RoleExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, menus: MenuExpression, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, users: UserExpression): RoleConnection
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  descriptionCount: Int
  descriptionMax: String
  descriptionMin: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  menus(after: ID, before: ID, description: StringExpression, first: Int, folder: MenuExpression, groupBy: [String!], icon: StringExpression, id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: MenuOrderBy, path: StringExpression, realm: RealmExpression, role: RoleExpression, type: MenuTypeExpression): [Menu]
  menusAggregate(description: StringExpression, first: Int, folder: MenuExpression, groupBy: [String!], icon: StringExpression, id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: MenuOrderBy, path: StringExpression, realm: RealmExpression, role: RoleExpression, type: MenuTypeExpression): Menu
  menusConnection(description: StringExpression, first: Int, folder: MenuExpression, groupBy: [String!], icon: StringExpression, id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: MenuOrderBy, path: StringExpression, realm: RealmExpression, role: RoleExpression, type: MenuTypeExpression): MenuConnection
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String
  permissions(after: ID, before: ID, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, level: PermissionLevelExpression, name: StringExpression, offset: Int, orderBy: PermissionOrderBy, realm: RealmExpression, role: RoleExpression, type: PermissionTypeExpression): [Permission]
  permissionsAggregate(description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, level: PermissionLevelExpression, name: StringExpression, offset: Int, orderBy: PermissionOrderBy, realm: RealmExpression, role: RoleExpression, type: PermissionTypeExpression): Permission
  permissionsConnection(description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, level: PermissionLevelExpression, name: StringExpression, offset: Int, orderBy: PermissionOrderBy, realm: RealmExpression, role: RoleExpression, type: PermissionTypeExpression): PermissionConnection
  realm(id: StringExpression, name: StringExpression): Realm
  realmId: Int
  realmIdAvg: Int
  realmIdCount: Int
  realmIdMax: Int
  realmIdMin: Int
  realmIdSum: Int
  roleApi: [RoleApi]
  roleApiAggregate(apiId: IntExpression, first: Int, from: RoleExpression, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: RoleApiOrderBy, roleId: IntExpression, to: ApiExpression): RoleApi
  roleApiConnection(apiId: IntExpression, first: Int, from: RoleExpression, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: RoleApiOrderBy, roleId: IntExpression, to: ApiExpression): RoleApiConnection
  roleComposite: [RoleComposite]
  roleCompositeAggregate(compositeId: IntExpression, first: Int, from: RoleExpression, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: RoleCompositeOrderBy, roleId: IntExpression, to: RoleExpression): RoleComposite
  roleCompositeConnection(compositeId: IntExpression, first: Int, from: RoleExpression, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: RoleCompositeOrderBy, roleId: IntExpression, to: RoleExpression): RoleCompositeConnection
  roleMenu: [RoleMenu]
  roleMenuAggregate(first: Int, from: RoleExpression, groupBy: [String!], id: StringExpression, last: Int, menuId: IntExpression, offset: Int, orderBy: RoleMenuOrderBy, roleId: IntExpression, to: MenuExpression): RoleMenu
  roleMenuConnection(first: Int, from: RoleExpression, groupBy: [String!], id: StringExpression, last: Int, menuId: IntExpression, offset: Int, orderBy: RoleMenuOrderBy, roleId: IntExpression, to: MenuExpression): RoleMenuConnection
  updateTime: Timestamp
  updateUserId: String
  userRole: [UserRole]
  userRoleAggregate(first: Int, from: UserExpression, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: UserRoleOrderBy, roleId: IntExpression, to: RoleExpression, userId: IntExpression): UserRole
  userRoleConnection(first: Int, from: UserExpression, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: UserRoleOrderBy, roleId: IntExpression, to: RoleExpression, userId: IntExpression): UserRoleConnection
  users(after: ID, before: ID, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): [User]
  usersAggregate(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): User
  usersConnection(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, email: StringExpression, first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): UserConnection
  version: Int
}

type RoleApi implements Meta {
  apiId: Int
  apiIdAvg: Int
  apiIdCount: Int
  apiIdMax: Int
  apiIdMin: Int
  apiIdSum: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from(apis: ApiExpression, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, menus: MenuExpression, name: StringExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleApi: RoleApiExpression, roleComposite: RoleCompositeExpression, roleMenu: RoleMenuExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  roleIdAvg: Int
  roleIdCount: Int
  roleIdMax: Int
  roleIdMin: Int
  roleIdSum: Int
  to(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: ApiTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Api
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type RoleApiConnection {
  edges: [RoleApiEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RoleApiConnectionQueryTypeArguments {
  after: ID
  apiId: IntExpression
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleApiExpression]
  first: Int
  from: RoleExpression
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  offset: Int
  orderBy: RoleApiOrderBy
  realmId: IntExpression
  roleId: IntExpression
  to: ApiExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RoleApiEdge {
  cursor: ID
  node: RoleApi
}

input RoleApiExpression {
  apiId: IntExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleApiExpression]
  from: RoleExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  realmId: IntExpression
  roleId: IntExpression
  to: ApiExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleApiInput {
  apiId: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: RoleInput
  id: ID
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  to: ApiInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

input RoleApiListMutationTypeArguments {
  apiId: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: RoleInput
  id: ID
  isDeprecated: Boolean
  list: [RoleApiInput]
  realmId: Int
  roleId: Int
  to: ApiInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RoleApiExpression
}

input RoleApiListQueryTypeArguments {
  after: ID
  apiId: IntExpression
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleApiExpression]
  first: Int
  from: RoleExpression
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  offset: Int
  orderBy: RoleApiOrderBy
  realmId: IntExpression
  roleId: IntExpression
  to: ApiExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleApiMutationTypeArguments {
  apiId: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: RoleInput
  id: ID
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  to: ApiInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RoleApiExpression
}

input RoleApiOrderBy {
  apiId: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  roleId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RoleApiQueryTypeArguments {
  apiId: IntExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleApiExpression]
  from: RoleExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  realmId: IntExpression
  roleId: IntExpression
  to: ApiExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RoleComposite implements Meta {
  compositeId: Int
  compositeIdAvg: Int
  compositeIdCount: Int
  compositeIdMax: Int
  compositeIdMin: Int
  compositeIdSum: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from(apis: ApiExpression, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, menus: MenuExpression, name: StringExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleApi: RoleApiExpression, roleComposite: RoleCompositeExpression, roleMenu: RoleMenuExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  roleIdAvg: Int
  roleIdCount: Int
  roleIdMax: Int
  roleIdMin: Int
  roleIdSum: Int
  to(apis: ApiExpression, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, menus: MenuExpression, name: StringExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleApi: RoleApiExpression, roleComposite: RoleCompositeExpression, roleMenu: RoleMenuExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type RoleCompositeConnection {
  edges: [RoleCompositeEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RoleCompositeConnectionQueryTypeArguments {
  after: ID
  before: ID
  compositeId: IntExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeExpression]
  first: Int
  from: RoleExpression
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  offset: Int
  orderBy: RoleCompositeOrderBy
  realmId: IntExpression
  roleId: IntExpression
  to: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RoleCompositeEdge {
  cursor: ID
  node: RoleComposite
}

input RoleCompositeExpression {
  compositeId: IntExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeExpression]
  from: RoleExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  realmId: IntExpression
  roleId: IntExpression
  to: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleCompositeInput {
  compositeId: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: RoleInput
  id: ID
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  to: RoleInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

input RoleCompositeListMutationTypeArguments {
  compositeId: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: RoleInput
  id: ID
  isDeprecated: Boolean
  list: [RoleCompositeInput]
  realmId: Int
  roleId: Int
  to: RoleInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RoleCompositeExpression
}

input RoleCompositeListQueryTypeArguments {
  after: ID
  before: ID
  compositeId: IntExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeExpression]
  first: Int
  from: RoleExpression
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  offset: Int
  orderBy: RoleCompositeOrderBy
  realmId: IntExpression
  roleId: IntExpression
  to: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleCompositeMutationTypeArguments {
  compositeId: Int
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: RoleInput
  id: ID
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  to: RoleInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RoleCompositeExpression
}

input RoleCompositeOrderBy {
  compositeId: Sort
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  roleId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RoleCompositeQueryTypeArguments {
  compositeId: IntExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleCompositeExpression]
  from: RoleExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  realmId: IntExpression
  roleId: IntExpression
  to: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RoleConnection {
  edges: [RoleEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RoleConnectionQueryTypeArguments {
  after: ID
  apis: ApiExpression
  before: ID
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  menus: MenuExpression
  name: StringExpression
  offset: Int
  orderBy: RoleOrderBy
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleApi: RoleApiExpression
  roleComposite: RoleCompositeExpression
  roleMenu: RoleMenuExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userRole: UserRoleExpression
  users: UserExpression
  version: IntExpression
}

type RoleEdge {
  cursor: ID
  node: Role
}

input RoleExpression {
  apis: ApiExpression
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  menus: MenuExpression
  name: StringExpression
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleApi: RoleApiExpression
  roleComposite: RoleCompositeExpression
  roleMenu: RoleMenuExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userRole: UserRoleExpression
  users: UserExpression
  version: IntExpression
}

input RoleInput {
  apis: [ApiInput]
  composites: [RoleInput]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  menus: [MenuInput]
  name: String!
  permissions: [PermissionInput]
  realm: RealmInput
  realmId: Int
  roleApi: [RoleApiInput]
  roleComposite: [RoleCompositeInput]
  roleMenu: [RoleMenuInput]
  updateTime: Timestamp
  updateUserId: String
  userRole: [UserRoleInput]
  users: [UserInput]
  version: Int
}

input RoleListMutationTypeArguments {
  apis: [ApiInput]
  composites: [RoleInput]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  list: [RoleInput]
  menus: [MenuInput]
  name: String
  permissions: [PermissionInput]
  realm: RealmInput
  realmId: Int
  roleApi: [RoleApiInput]
  roleComposite: [RoleCompositeInput]
  roleMenu: [RoleMenuInput]
  updateTime: Timestamp
  updateUserId: String
  userRole: [UserRoleInput]
  users: [UserInput]
  version: Int
  where: RoleExpression
}

input RoleListQueryTypeArguments {
  after: ID
  apis: ApiExpression
  before: ID
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  first: Int
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  menus: MenuExpression
  name: StringExpression
  offset: Int
  orderBy: RoleOrderBy
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleApi: RoleApiExpression
  roleComposite: RoleCompositeExpression
  roleMenu: RoleMenuExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userRole: UserRoleExpression
  users: UserExpression
  version: IntExpression
}

type RoleMenu implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from(apis: ApiExpression, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, menus: MenuExpression, name: StringExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleApi: RoleApiExpression, roleComposite: RoleCompositeExpression, roleMenu: RoleMenuExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  menuId: Int
  menuIdAvg: Int
  menuIdCount: Int
  menuIdMax: Int
  menuIdMin: Int
  menuIdSum: Int
  realmId: Int
  roleId: Int
  roleIdAvg: Int
  roleIdCount: Int
  roleIdMax: Int
  roleIdMin: Int
  roleIdSum: Int
  to(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, folder: MenuExpression, icon: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parentId: IntExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: MenuTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Menu
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

type RoleMenuConnection {
  edges: [RoleMenuEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input RoleMenuConnectionQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleMenuExpression]
  first: Int
  from: RoleExpression
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  menuId: IntExpression
  offset: Int
  orderBy: RoleMenuOrderBy
  realmId: IntExpression
  roleId: IntExpression
  to: MenuExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

type RoleMenuEdge {
  cursor: ID
  node: RoleMenu
}

input RoleMenuExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleMenuExpression]
  from: RoleExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  menuId: IntExpression
  realmId: IntExpression
  roleId: IntExpression
  to: MenuExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleMenuInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: RoleInput
  id: ID
  isDeprecated: Boolean
  menuId: Int
  realmId: Int
  roleId: Int
  to: MenuInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
}

input RoleMenuListMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: RoleInput
  id: ID
  isDeprecated: Boolean
  list: [RoleMenuInput]
  menuId: Int
  realmId: Int
  roleId: Int
  to: MenuInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RoleMenuExpression
}

input RoleMenuListQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleMenuExpression]
  first: Int
  from: RoleExpression
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  menuId: IntExpression
  offset: Int
  orderBy: RoleMenuOrderBy
  realmId: IntExpression
  roleId: IntExpression
  to: MenuExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleMenuMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: RoleInput
  id: ID
  isDeprecated: Boolean
  menuId: Int
  realmId: Int
  roleId: Int
  to: MenuInput
  updateTime: Timestamp
  updateUserId: String
  version: Int
  where: RoleMenuExpression
}

input RoleMenuOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  menuId: Sort
  realmId: Sort
  roleId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RoleMenuQueryTypeArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [RoleMenuExpression]
  from: RoleExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  menuId: IntExpression
  realmId: IntExpression
  roleId: IntExpression
  to: MenuExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  version: IntExpression
}

input RoleMutationTypeArguments {
  apis: [ApiInput]
  composites: [RoleInput]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  description: String
  id: ID
  isDeprecated: Boolean
  menus: [MenuInput]
  name: String
  permissions: [PermissionInput]
  realm: RealmInput
  realmId: Int
  roleApi: [RoleApiInput]
  roleComposite: [RoleCompositeInput]
  roleMenu: [RoleMenuInput]
  updateTime: Timestamp
  updateUserId: String
  userRole: [UserRoleInput]
  users: [UserInput]
  version: Int
  where: RoleExpression
}

input RoleOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  description: Sort
  id: Sort
  isDeprecated: Sort
  name: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

input RoleQueryTypeArguments {
  apis: ApiExpression
  composites: RoleExpression
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  description: StringExpression
  exs: [RoleExpression]
  id: StringExpression
  includeDeprecated: Boolean = false
  menus: MenuExpression
  name: StringExpression
  permissions: PermissionExpression
  realm: RealmExpression
  realmId: IntExpression
  roleApi: RoleApiExpression
  roleComposite: RoleCompositeExpression
  roleMenu: RoleMenuExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userRole: UserRoleExpression
  users: UserExpression
  version: IntExpression
}

enum Sort {
  ASC
  DESC
}

input SortExpression {
  in: [Sort]
  opr: Operator = EQ
  val: Sort
}

input StringExpression {
  in: [String]
  opr: Operator = EQ
  skipNull: Boolean = false
  val: String
}

type SubscriptionType implements Meta {
  api(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [ApiExpression], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: ApiTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Api
  apiConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [ApiExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: ApiOrderBy, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: ApiTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): ApiConnection
  apiList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [ApiExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: ApiOrderBy, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: ApiTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Api]
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  group(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupExpression], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: IntExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group
  groupConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupExpression], first: Int, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: IntExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): GroupConnection
  groupList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupExpression], first: Int, groupBy: [String!], groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, parentId: IntExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): [Group]
  groupRole(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleExpression], from: GroupExpression, groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, realmId: IntExpression, roleId: IntExpression, to: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRole
  groupRoleConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleExpression], first: Int, from: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupRoleOrderBy, realmId: IntExpression, roleId: IntExpression, to: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): GroupRoleConnection
  groupRoleList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [GroupRoleExpression], first: Int, from: GroupExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: GroupRoleOrderBy, realmId: IntExpression, roleId: IntExpression, to: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [GroupRole]
  isDeprecated: Boolean
  menu(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [MenuExpression], folder: MenuExpression, icon: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parentId: IntExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: MenuTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Menu
  menuConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [MenuExpression], first: Int, folder: MenuExpression, groupBy: [String!], icon: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: MenuOrderBy, parentId: IntExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: MenuTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): MenuConnection
  menuList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [MenuExpression], first: Int, folder: MenuExpression, groupBy: [String!], icon: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: MenuOrderBy, parentId: IntExpression, path: StringExpression, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: MenuTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Menu]
  permission(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], id: StringExpression, includeDeprecated: Boolean = false, level: PermissionLevelExpression, name: StringExpression, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: PermissionTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Permission
  permissionConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, level: PermissionLevelExpression, name: StringExpression, offset: Int, orderBy: PermissionOrderBy, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: PermissionTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): PermissionConnection
  permissionList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [PermissionExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, level: PermissionLevelExpression, name: StringExpression, offset: Int, orderBy: PermissionOrderBy, realm: RealmExpression, realmId: IntExpression, role: RoleExpression, roleId: IntExpression, type: PermissionTypeExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Permission]
  realm(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RealmExpression], id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): Realm
  realmConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RealmExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RealmOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RealmConnection
  realmId: Int
  realmList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RealmExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, name: StringExpression, offset: Int, orderBy: RealmOrderBy, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [Realm]
  role(apis: ApiExpression, composites: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], id: StringExpression, includeDeprecated: Boolean = false, menus: MenuExpression, name: StringExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleApi: RoleApiExpression, roleComposite: RoleCompositeExpression, roleMenu: RoleMenuExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  roleApi(apiId: IntExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleApiExpression], from: RoleExpression, id: StringExpression, includeDeprecated: Boolean = false, realmId: IntExpression, roleId: IntExpression, to: ApiExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleApi
  roleApiConnection(after: ID, apiId: IntExpression, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleApiExpression], first: Int, from: RoleExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleApiOrderBy, realmId: IntExpression, roleId: IntExpression, to: ApiExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleApiConnection
  roleApiList(after: ID, apiId: IntExpression, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleApiExpression], first: Int, from: RoleExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleApiOrderBy, realmId: IntExpression, roleId: IntExpression, to: ApiExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RoleApi]
  roleComposite(compositeId: IntExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeExpression], from: RoleExpression, id: StringExpression, includeDeprecated: Boolean = false, realmId: IntExpression, roleId: IntExpression, to: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleComposite
  roleCompositeConnection(after: ID, before: ID, compositeId: IntExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeExpression], first: Int, from: RoleExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleCompositeOrderBy, realmId: IntExpression, roleId: IntExpression, to: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleCompositeConnection
  roleCompositeList(after: ID, before: ID, compositeId: IntExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleCompositeExpression], first: Int, from: RoleExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: RoleCompositeOrderBy, realmId: IntExpression, roleId: IntExpression, to: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RoleComposite]
  roleConnection(after: ID, apis: ApiExpression, before: ID, composites: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, menus: MenuExpression, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleApi: RoleApiExpression, roleComposite: RoleCompositeExpression, roleMenu: RoleMenuExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): RoleConnection
  roleList(after: ID, apis: ApiExpression, before: ID, composites: RoleExpression, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, exs: [RoleExpression], first: Int, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, menus: MenuExpression, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleApi: RoleApiExpression, roleComposite: RoleCompositeExpression, roleMenu: RoleMenuExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): [Role]
  roleMenu(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleMenuExpression], from: RoleExpression, id: StringExpression, includeDeprecated: Boolean = false, menuId: IntExpression, realmId: IntExpression, roleId: IntExpression, to: MenuExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleMenu
  roleMenuConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleMenuExpression], first: Int, from: RoleExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, menuId: IntExpression, offset: Int, orderBy: RoleMenuOrderBy, realmId: IntExpression, roleId: IntExpression, to: MenuExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): RoleMenuConnection
  roleMenuList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [RoleMenuExpression], first: Int, from: RoleExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, menuId: IntExpression, offset: Int, orderBy: RoleMenuOrderBy, realmId: IntExpression, roleId: IntExpression, to: MenuExpression, updateTime: StringExpression, updateUserId: StringExpression, version: IntExpression): [RoleMenu]
  updateTime: Timestamp
  updateUserId: String
  user(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): User
  userConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): UserConnection
  userGroup(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserGroupExpression], from: UserExpression, groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, realmId: IntExpression, to: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserGroup
  userGroupConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserGroupExpression], first: Int, from: UserExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserGroupOrderBy, realmId: IntExpression, to: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserGroupConnection
  userGroupList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserGroupExpression], first: Int, from: UserExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserGroupOrderBy, realmId: IntExpression, to: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): [UserGroup]
  userList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, email: StringExpression, exs: [UserExpression], first: Int, groupBy: [String!], groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, last: Int, lastName: StringExpression, login: StringExpression, name: StringExpression, offset: Int, orderBy: UserOrderBy, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): [User]
  userPhones(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesExpression], from: UserExpression, id: StringExpression, includeDeprecated: Boolean = false, phone: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserPhones
  userPhonesConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesExpression], first: Int, from: UserExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserPhonesOrderBy, phone: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserPhonesConnection
  userPhonesList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserPhonesExpression], first: Int, from: UserExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserPhonesOrderBy, phone: StringExpression, realmId: IntExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): [UserPhones]
  userRole(cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserRoleExpression], from: UserExpression, id: StringExpression, includeDeprecated: Boolean = false, realmId: IntExpression, roleId: IntExpression, to: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserRole
  userRoleConnection(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserRoleExpression], first: Int, from: UserExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserRoleOrderBy, realmId: IntExpression, roleId: IntExpression, to: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): UserRoleConnection
  userRoleList(after: ID, before: ID, cond: Conditional = AND, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, exs: [UserRoleExpression], first: Int, from: UserExpression, groupBy: [String!], id: StringExpression, includeDeprecated: Boolean = false, last: Int, offset: Int, orderBy: UserRoleOrderBy, realmId: IntExpression, roleId: IntExpression, to: RoleExpression, updateTime: StringExpression, updateUserId: StringExpression, userId: IntExpression, version: IntExpression): [UserRole]
  version: Int
}

scalar Time

scalar Timestamp

type User implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  disable: Boolean
  email: String
  emailCount: Int
  emailMax: String
  emailMin: String
  groups(after: ID, before: ID, first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, realm: RealmExpression, roles: RoleExpression, subGroups: GroupExpression, users: UserExpression): [Group]
  groupsAggregate(first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, realm: RealmExpression, roles: RoleExpression, subGroups: GroupExpression, users: UserExpression): Group
  groupsConnection(first: Int, groupBy: [String!], id: StringExpression, last: Int, name: StringExpression, offset: Int, orderBy: GroupOrderBy, parent: GroupExpression, realm: RealmExpression, roles: RoleExpression, subGroups: GroupExpression, users: UserExpression): GroupConnection
  hash: String
  hashCount: Int
  hashMax: String
  hashMin: String
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  lastName: String
  lastNameCount: Int
  lastNameMax: String
  lastNameMin: String
  login: String!
  loginCount: Int
  loginMax: String
  loginMin: String
  name: String!
  nameCount: Int
  nameMax: String
  nameMin: String
  phones(first: Int, in: [String], last: Int, offset: Int, opr: Operator = EQ, sort: Sort, val: String): [String]
  realm(id: StringExpression, name: StringExpression): Realm
  realmId: Int
  realmIdAvg: Int
  realmIdCount: Int
  realmIdMax: Int
  realmIdMin: Int
  realmIdSum: Int
  roles(after: ID, apis: ApiExpression, before: ID, composites: RoleExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, menus: MenuExpression, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, users: UserExpression): [Role]
  rolesAggregate(apis: ApiExpression, composites: RoleExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, menus: MenuExpression, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, users: UserExpression): Role
  rolesConnection(apis: ApiExpression, composites: RoleExpression, description: StringExpression, first: Int, groupBy: [String!], id: StringExpression, last: Int, menus: MenuExpression, name: StringExpression, offset: Int, orderBy: RoleOrderBy, permissions: PermissionExpression, realm: RealmExpression, users: UserExpression): RoleConnection
  salt: String
  saltCount: Int
  saltMax: String
  saltMin: String
  updateTime: Timestamp
  updateUserId: String
  userGroup: [UserGroup]
  userGroupAggregate(first: Int, from: UserExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, last: Int, offset: Int, orderBy: UserGroupOrderBy, to: GroupExpression, userId: IntExpression): UserGroup
  userGroupConnection(first: Int, from: UserExpression, groupBy: [String!], groupId: IntExpression, id: StringExpression, last: Int, offset: Int, orderBy: UserGroupOrderBy, to: GroupExpression, userId: IntExpression): UserGroupConnection
  userPhones: [UserPhones]
  userPhonesAggregate(first: Int, from: UserExpression, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: UserPhonesOrderBy, phone: StringExpression, userId: IntExpression): UserPhones
  userPhonesConnection(first: Int, from: UserExpression, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: UserPhonesOrderBy, phone: StringExpression, userId: IntExpression): UserPhonesConnection
  userRole: [UserRole]
  userRoleAggregate(first: Int, from: UserExpression, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: UserRoleOrderBy, roleId: IntExpression, to: RoleExpression, userId: IntExpression): UserRole
  userRoleConnection(first: Int, from: UserExpression, groupBy: [String!], id: StringExpression, last: Int, offset: Int, orderBy: UserRoleOrderBy, roleId: IntExpression, to: RoleExpression, userId: IntExpression): UserRoleConnection
  version: Int
}

type UserConnection {
  edges: [UserEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input UserConnectionQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  first: Int
  groupBy: [String!]
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  offset: Int
  orderBy: UserOrderBy
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  userPhones: UserPhonesExpression
  userRole: UserRoleExpression
  version: IntExpression
}

type UserEdge {
  cursor: ID
  node: User
}

input UserExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  userPhones: UserPhonesExpression
  userRole: UserRoleExpression
  version: IntExpression
}

type UserGroup implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, email: StringExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): User
  groupId: Int
  groupIdAvg: Int
  groupIdCount: Int
  groupIdMax: Int
  groupIdMin: Int
  groupIdSum: Int
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  to(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, groupRole: GroupRoleExpression, id: StringExpression, includeDeprecated: Boolean = false, name: StringExpression, parent: GroupExpression, parentId: IntExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, subGroups: GroupExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, users: UserExpression, version: IntExpression): Group
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  userIdAvg: Int
  userIdCount: Int
  userIdMax: Int
  userIdMin: Int
  userIdSum: Int
  version: Int
}

type UserGroupConnection {
  edges: [UserGroupEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input UserGroupConnectionQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserGroupExpression]
  first: Int
  from: UserExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  offset: Int
  orderBy: UserGroupOrderBy
  realmId: IntExpression
  to: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  version: IntExpression
}

type UserGroupEdge {
  cursor: ID
  node: UserGroup
}

input UserGroupExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserGroupExpression]
  from: UserExpression
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  realmId: IntExpression
  to: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  version: IntExpression
}

input UserGroupInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: UserInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  realmId: Int
  to: GroupInput
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  version: Int
}

input UserGroupListMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: UserInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  list: [UserGroupInput]
  realmId: Int
  to: GroupInput
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  version: Int
  where: UserGroupExpression
}

input UserGroupListQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserGroupExpression]
  first: Int
  from: UserExpression
  groupBy: [String!]
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  offset: Int
  orderBy: UserGroupOrderBy
  realmId: IntExpression
  to: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  version: IntExpression
}

input UserGroupMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: UserInput
  groupId: Int
  id: ID
  isDeprecated: Boolean
  realmId: Int
  to: GroupInput
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  version: Int
  where: UserGroupExpression
}

input UserGroupOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  groupId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  userId: Sort
  version: Sort
}

input UserGroupQueryTypeArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserGroupExpression]
  from: UserExpression
  groupId: IntExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  realmId: IntExpression
  to: GroupExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  version: IntExpression
}

input UserInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  disable: Boolean
  email: String
  groups: [GroupInput]
  hash: String
  id: ID
  isDeprecated: Boolean
  lastName: String
  login: String!
  name: String!
  phones: [String]
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  salt: String
  updateTime: Timestamp
  updateUserId: String
  userGroup: [UserGroupInput]
  userPhones: [UserPhonesInput]
  userRole: [UserRoleInput]
  version: Int
}

input UserListMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  disable: Boolean
  email: String
  groups: [GroupInput]
  hash: String
  id: ID
  isDeprecated: Boolean
  lastName: String
  list: [UserInput]
  login: String
  name: String
  phones: [String]
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  salt: String
  updateTime: Timestamp
  updateUserId: String
  userGroup: [UserGroupInput]
  userPhones: [UserPhonesInput]
  userRole: [UserRoleInput]
  version: Int
  where: UserExpression
}

input UserListQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  first: Int
  groupBy: [String!]
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  offset: Int
  orderBy: UserOrderBy
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  userPhones: UserPhonesExpression
  userRole: UserRoleExpression
  version: IntExpression
}

input UserMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  disable: Boolean
  email: String
  groups: [GroupInput]
  hash: String
  id: ID
  isDeprecated: Boolean
  lastName: String
  login: String
  name: String
  phones: [String]
  realm: RealmInput
  realmId: Int
  roles: [RoleInput]
  salt: String
  updateTime: Timestamp
  updateUserId: String
  userGroup: [UserGroupInput]
  userPhones: [UserPhonesInput]
  userRole: [UserRoleInput]
  version: Int
  where: UserExpression
}

input UserOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  disable: Sort
  email: Sort
  hash: Sort
  id: Sort
  isDeprecated: Sort
  lastName: Sort
  login: Sort
  name: Sort
  realmId: Sort
  salt: Sort
  updateTime: Sort
  updateUserId: Sort
  version: Sort
}

type UserPhones implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, email: StringExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): User
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  phone: String
  phoneCount: Int
  phoneMax: String
  phoneMin: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  userIdAvg: Int
  userIdCount: Int
  userIdMax: Int
  userIdMin: Int
  userIdSum: Int
  version: Int
}

type UserPhonesConnection {
  edges: [UserPhonesEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input UserPhonesConnectionQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesExpression]
  first: Int
  from: UserExpression
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  offset: Int
  orderBy: UserPhonesOrderBy
  phone: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  version: IntExpression
}

type UserPhonesEdge {
  cursor: ID
  node: UserPhones
}

input UserPhonesExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesExpression]
  from: UserExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  phone: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  version: IntExpression
}

input UserPhonesInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: UserInput
  id: ID
  isDeprecated: Boolean
  phone: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  version: Int
}

input UserPhonesListMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: UserInput
  id: ID
  isDeprecated: Boolean
  list: [UserPhonesInput]
  phone: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  version: Int
  where: UserPhonesExpression
}

input UserPhonesListQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesExpression]
  first: Int
  from: UserExpression
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  offset: Int
  orderBy: UserPhonesOrderBy
  phone: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  version: IntExpression
}

input UserPhonesMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: UserInput
  id: ID
  isDeprecated: Boolean
  phone: String
  realmId: Int
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  version: Int
  where: UserPhonesExpression
}

input UserPhonesOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  phone: Sort
  realmId: Sort
  updateTime: Sort
  updateUserId: Sort
  userId: Sort
  version: Sort
}

input UserPhonesQueryTypeArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserPhonesExpression]
  from: UserExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  phone: StringExpression
  realmId: IntExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  version: IntExpression
}

input UserQueryTypeArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  disable: BooleanExpression
  email: StringExpression
  exs: [UserExpression]
  groups: GroupExpression
  hash: StringExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  lastName: StringExpression
  login: StringExpression
  name: StringExpression
  phones: StringExpression
  realm: RealmExpression
  realmId: IntExpression
  roles: RoleExpression
  salt: StringExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userGroup: UserGroupExpression
  userPhones: UserPhonesExpression
  userRole: UserRoleExpression
  version: IntExpression
}

type UserRole implements Meta {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from(createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, disable: BooleanExpression, email: StringExpression, groups: GroupExpression, hash: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, lastName: StringExpression, login: StringExpression, name: StringExpression, phones: StringExpression, realm: RealmExpression, realmId: IntExpression, roles: RoleExpression, salt: StringExpression, updateTime: StringExpression, updateUserId: StringExpression, userGroup: UserGroupExpression, userPhones: UserPhonesExpression, userRole: UserRoleExpression, version: IntExpression): User
  id: ID
  idCount: Int
  idMax: Int
  idMin: Int
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  roleIdAvg: Int
  roleIdCount: Int
  roleIdMax: Int
  roleIdMin: Int
  roleIdSum: Int
  to(apis: ApiExpression, composites: RoleExpression, createGroupId: StringExpression, createTime: StringExpression, createUserId: StringExpression, description: StringExpression, id: StringExpression, includeDeprecated: Boolean = false, menus: MenuExpression, name: StringExpression, permissions: PermissionExpression, realm: RealmExpression, realmId: IntExpression, roleApi: RoleApiExpression, roleComposite: RoleCompositeExpression, roleMenu: RoleMenuExpression, updateTime: StringExpression, updateUserId: StringExpression, userRole: UserRoleExpression, users: UserExpression, version: IntExpression): Role
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  userIdAvg: Int
  userIdCount: Int
  userIdMax: Int
  userIdMin: Int
  userIdSum: Int
  version: Int
}

type UserRoleConnection {
  edges: [UserRoleEdge]
  pageInfo: PageInfo
  totalCount: Int
}

input UserRoleConnectionQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserRoleExpression]
  first: Int
  from: UserExpression
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  offset: Int
  orderBy: UserRoleOrderBy
  realmId: IntExpression
  roleId: IntExpression
  to: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  version: IntExpression
}

type UserRoleEdge {
  cursor: ID
  node: UserRole
}

input UserRoleExpression {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserRoleExpression]
  from: UserExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  realmId: IntExpression
  roleId: IntExpression
  to: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  version: IntExpression
}

input UserRoleInput {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: UserInput
  id: ID
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  to: RoleInput
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  version: Int
}

input UserRoleListMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: UserInput
  id: ID
  isDeprecated: Boolean
  list: [UserRoleInput]
  realmId: Int
  roleId: Int
  to: RoleInput
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  version: Int
  where: UserRoleExpression
}

input UserRoleListQueryTypeArguments {
  after: ID
  before: ID
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserRoleExpression]
  first: Int
  from: UserExpression
  groupBy: [String!]
  id: StringExpression
  includeDeprecated: Boolean = false
  last: Int
  offset: Int
  orderBy: UserRoleOrderBy
  realmId: IntExpression
  roleId: IntExpression
  to: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  version: IntExpression
}

input UserRoleMutationTypeArguments {
  createGroupId: String
  createTime: Timestamp
  createUserId: String
  from: UserInput
  id: ID
  isDeprecated: Boolean
  realmId: Int
  roleId: Int
  to: RoleInput
  updateTime: Timestamp
  updateUserId: String
  userId: Int
  version: Int
  where: UserRoleExpression
}

input UserRoleOrderBy {
  createGroupId: Sort
  createTime: Sort
  createUserId: Sort
  id: Sort
  isDeprecated: Sort
  realmId: Sort
  roleId: Sort
  updateTime: Sort
  updateUserId: Sort
  userId: Sort
  version: Sort
}

input UserRoleQueryTypeArguments {
  cond: Conditional = AND
  createGroupId: StringExpression
  createTime: StringExpression
  createUserId: StringExpression
  exs: [UserRoleExpression]
  from: UserExpression
  id: StringExpression
  includeDeprecated: Boolean = false
  realmId: IntExpression
  roleId: IntExpression
  to: RoleExpression
  updateTime: StringExpression
  updateUserId: StringExpression
  userId: IntExpression
  version: IntExpression
}

input ValidationInput {
  allOf: [ValidationInput]
  anyOf: [ValidationInput]
  const: String
  contentEncoding: String
  contentMediaType: String
  dependentRequired: [Property]
  else: ValidationInput
  enum: [String]
  exclusiveMaximum: Float
  exclusiveMinimum: Float
  format: String
  if: ValidationInput
  items: ValidationInput
  maxItems: Int
  maxLength: Int
  maximum: Float
  minItems: Int
  minLength: Int
  minimum: Float
  multipleOf: Float
  not: ValidationInput
  oneOf: [ValidationInput]
  pattern: String
  properties: [Property]
  then: ValidationInput
  uniqueItems: Boolean
}
