mutation Mutation_groupRole_to($groupRole_id: ID, $groupRole_to: RoleInput, $composites: RoleExpression, $createGroupId: StringExpression, $createTime: StringExpression, $createUserId: StringExpression, $description: StringExpression, $id: StringExpression, $includeDeprecated: Boolean, $name: StringExpression, $permissions: PermissionExpression, $realm: RealmExpression, $realmId: StringExpression, $roleComposite: RoleCompositeExpression, $updateTime: StringExpression, $updateUserId: StringExpression, $userRole: UserRoleExpression, $users: UserExpression, $version: IntExpression, $skipNullArguments: Boolean = true, $update: Boolean = false, $mergeToList: [String]) {
  groupRole(id: $groupRole_id to: $groupRole_to) @skipNullArguments(if: $skipNullArguments) @update(if: $update) @mergeToList(arguments: $mergeToList) {
    createGroupId
    createTime
    createUserId
    groupId
    id
    isDeprecated
    realmId
    roleId
    updateTime
    updateUserId
    version
    to(composites: $composites createGroupId: $createGroupId createTime: $createTime createUserId: $createUserId description: $description id: $id includeDeprecated: $includeDeprecated name: $name permissions: $permissions realm: $realm realmId: $realmId roleComposite: $roleComposite updateTime: $updateTime updateUserId: $updateUserId userRole: $userRole users: $users version: $version) @skipNullArguments(if: $skipNullArguments) @update(if: $update) @mergeToList(arguments: $mergeToList) {
      createGroupId
      createTime
      createUserId
      description
      id
      isDeprecated
      name
      realmId
      updateTime
      updateUserId
      version
    }
  }
}