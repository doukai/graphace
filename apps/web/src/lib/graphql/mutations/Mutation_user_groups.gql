mutation Mutation_user_groups($user_id: String, $user_groups: [GroupInput], $first: Int, $last: Int, $offset: Int, $orderBy: GroupOrderBy, $groupBy: [String!], $id: StringExpression, $name: StringExpression, $description: StringExpression, $path: StringExpression, $deep: IntExpression, $parentId: StringExpression, $parent: GroupExpression, $subGroups: GroupExpression, $users: UserExpression, $roles: RoleExpression, $realm: RealmExpression, $mergeToList: [String]) {
  user(where: {id: {val: $user_id}}  groups: $user_groups) @mergeToList(arguments: $mergeToList) {
    id
    name
    description
    lastName
    login
    email
    phones
    disable
    isDeprecated
    version
    realmId
    createUserId
    createTime
    updateUserId
    updateTime
    createGroupId
    syncUserPolicy
    groupsConnection(first: $first last: $last offset: $offset orderBy: $orderBy groupBy: $groupBy id: $id name: $name description: $description path: $path deep: $deep parentId: $parentId parent: $parent subGroups: $subGroups users: $users roles: $roles realm: $realm) {
      totalCount
      edges {
        node {
          id
          name
          description
          path
          deep
          isDeprecated
          version
          realmId
          createUserId
          createTime
          updateUserId
          updateTime
          createGroupId
          syncGroupPolicy
          parent {
            name
            description
          }
          subGroups(first: 3) {
            name
            description
          }
          users(first: 3) {
            name
            description
          }
          roles(first: 3) {
            name
            description
          }
          realm {
            name
            description
          }
        }
      }
    }
  }
}