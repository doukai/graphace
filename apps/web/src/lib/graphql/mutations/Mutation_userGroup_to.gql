mutation Mutation_userGroup_to($userGroup_id: ID, $userGroup_to: GroupInput, $createGroupId: StringExpression, $createTime: StringExpression, $createUserId: StringExpression, $groupRole: GroupRoleExpression, $id: StringExpression, $includeDeprecated: Boolean, $name: StringExpression, $parent: GroupExpression, $parentId: IntExpression, $realm: RealmExpression, $realmId: StringExpression, $roles: RoleExpression, $subGroups: GroupExpression, $updateTime: StringExpression, $updateUserId: StringExpression, $userGroup: UserGroupExpression, $users: UserExpression, $version: IntExpression, $skipNullArguments: Boolean = true, $update: Boolean = false, $mergeToList: [String]) {
  userGroup(id: $userGroup_id to: $userGroup_to) @skipNullArguments(if: $skipNullArguments) @update(if: $update) @mergeToList(arguments: $mergeToList) {
    createGroupId
    createTime
    createUserId
    groupId
    id
    isDeprecated
    realmId
    updateTime
    updateUserId
    userId
    version
    to(createGroupId: $createGroupId createTime: $createTime createUserId: $createUserId groupRole: $groupRole id: $id includeDeprecated: $includeDeprecated name: $name parent: $parent parentId: $parentId realm: $realm realmId: $realmId roles: $roles subGroups: $subGroups updateTime: $updateTime updateUserId: $updateUserId userGroup: $userGroup users: $users version: $version) @skipNullArguments(if: $skipNullArguments) @update(if: $update) @mergeToList(arguments: $mergeToList) {
      createGroupId
      createTime
      createUserId
      id
      isDeprecated
      name
      parentId
      realmId
      updateTime
      updateUserId
      version
    }
  }
}