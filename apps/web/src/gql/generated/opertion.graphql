query CreateGroupId {
    createGroupId 
}
        
query CreateTime {
    createTime 
}
        
query CreateUserId {
    createUserId 
}
        
query FindRole2($disable: Boolean, $name: String, $type: Int) {
    findRole2(disable: $disable, name: $name, type: $type) {
        createGroupId
		createTime
		createUserId
		id
		isDeprecated
		name
		realmId
		type
		updateTime
		updateUserId
		version
    }
}
        
query IsDeprecated {
    isDeprecated 
}
        
query OrgLevel($organization: OrganizationInput) {
    orgLevel(organization: $organization) 
}
        
query OrgLevel5($organization: OrganizationInput) {
    orgLevel5(organization: $organization) 
}
        
query Organization($above: OrganizationExpression, $aboveId: IntExpression, $cond: Conditional, $createGroupId: StringExpression, $createTime: StringExpression, $createUserId: StringExpression, $id: StringExpression, $includeDeprecated: Boolean, $name: StringExpression, $realmId: StringExpression, $updateTime: StringExpression, $updateUserId: StringExpression, $users: UserExpression, $version: IntExpression) {
    organization(above: $above, aboveId: $aboveId, cond: $cond, createGroupId: $createGroupId, createTime: $createTime, createUserId: $createUserId, id: $id, includeDeprecated: $includeDeprecated, name: $name, realmId: $realmId, updateTime: $updateTime, updateUserId: $updateUserId, users: $users, version: $version) {
        aboveId
		createGroupId
		createTime
		createUserId
		id
		isDeprecated
		name
		orgLevel3
		realmId
		roleDisable
		updateTime
		updateUserId
		version
    }
}
        
query OrganizationList($above: OrganizationExpression, $aboveId: IntExpression, $after: ID, $before: ID, $cond: Conditional, $createGroupId: StringExpression, $createTime: StringExpression, $createUserId: StringExpression, $first: Int, $groupBy: [String!], $id: StringExpression, $includeDeprecated: Boolean, $last: Int, $name: StringExpression, $offset: Int, $orderBy: OrganizationOrderBy, $realmId: StringExpression, $updateTime: StringExpression, $updateUserId: StringExpression, $users: UserExpression, $version: IntExpression) {
    organizationList(above: $above, aboveId: $aboveId, after: $after, before: $before, cond: $cond, createGroupId: $createGroupId, createTime: $createTime, createUserId: $createUserId, first: $first, groupBy: $groupBy, id: $id, includeDeprecated: $includeDeprecated, last: $last, name: $name, offset: $offset, orderBy: $orderBy, realmId: $realmId, updateTime: $updateTime, updateUserId: $updateUserId, users: $users, version: $version) {
        aboveId
		createGroupId
		createTime
		createUserId
		id
		isDeprecated
		name
		orgLevel3
		realmId
		roleDisable
		updateTime
		updateUserId
		version
    }
}
        
query Parent2($organization: OrganizationInput) {
    parent2(organization: $organization) {
        aboveId
		createGroupId
		createTime
		createUserId
		id
		isDeprecated
		name
		orgLevel3
		realmId
		roleDisable
		updateTime
		updateUserId
		version
    }
}
        
query RealmId {
    realmId 
}
        
query Role($cond: Conditional, $createGroupId: StringExpression, $createTime: StringExpression, $createUserId: StringExpression, $id: StringExpression, $includeDeprecated: Boolean, $name: StringExpression, $realmId: StringExpression, $type: RoleTypeExpression, $updateTime: StringExpression, $updateUserId: StringExpression, $users: UserExpression, $version: IntExpression) {
    role(cond: $cond, createGroupId: $createGroupId, createTime: $createTime, createUserId: $createUserId, id: $id, includeDeprecated: $includeDeprecated, name: $name, realmId: $realmId, type: $type, updateTime: $updateTime, updateUserId: $updateUserId, users: $users, version: $version) {
        createGroupId
		createTime
		createUserId
		id
		isDeprecated
		name
		realmId
		type
		updateTime
		updateUserId
		version
    }
}
query RoleDisable2($organization: OrganizationInput) {
    roleDisable2(organization: $organization) 
}
        
query RoleList($after: ID, $before: ID, $cond: Conditional, $createGroupId: StringExpression, $createTime: StringExpression, $createUserId: StringExpression, $first: Int, $groupBy: [String!], $id: StringExpression, $includeDeprecated: Boolean, $last: Int, $name: StringExpression, $offset: Int, $orderBy: RoleOrderBy, $realmId: StringExpression, $type: RoleTypeExpression, $updateTime: StringExpression, $updateUserId: StringExpression, $users: UserExpression, $version: IntExpression) {
    roleList(after: $after, before: $before, cond: $cond, createGroupId: $createGroupId, createTime: $createTime, createUserId: $createUserId, first: $first, groupBy: $groupBy, id: $id, includeDeprecated: $includeDeprecated, last: $last, name: $name, offset: $offset, orderBy: $orderBy, realmId: $realmId, type: $type, updateTime: $updateTime, updateUserId: $updateUserId, users: $users, version: $version) {
        createGroupId
		createTime
		createUserId
		id
		isDeprecated
		name
		realmId
		type
		updateTime
		updateUserId
		version
    }
}
        
query RoleRoleType($cond: Conditional, $createGroupId: StringExpression, $createTime: StringExpression, $createUserId: StringExpression, $id: StringExpression, $includeDeprecated: Boolean, $realmId: StringExpression, $roleId: IntExpression, $type: RoleTypeExpression, $updateTime: StringExpression, $updateUserId: StringExpression, $version: IntExpression) {
    roleRoleType(cond: $cond, createGroupId: $createGroupId, createTime: $createTime, createUserId: $createUserId, id: $id, includeDeprecated: $includeDeprecated, realmId: $realmId, roleId: $roleId, type: $type, updateTime: $updateTime, updateUserId: $updateUserId, version: $version) {
        createGroupId
		createTime
		createUserId
		id
		isDeprecated
		realmId
		roleId
		type
		updateTime
		updateUserId
		version
    }
}
        
query RoleRoleTypeList($after: ID, $before: ID, $cond: Conditional, $createGroupId: StringExpression, $createTime: StringExpression, $createUserId: StringExpression, $first: Int, $groupBy: [String!], $id: StringExpression, $includeDeprecated: Boolean, $last: Int, $offset: Int, $orderBy: RoleRoleTypeOrderBy, $realmId: StringExpression, $roleId: IntExpression, $type: RoleTypeExpression, $updateTime: StringExpression, $updateUserId: StringExpression, $version: IntExpression) {
    roleRoleTypeList(after: $after, before: $before, cond: $cond, createGroupId: $createGroupId, createTime: $createTime, createUserId: $createUserId, first: $first, groupBy: $groupBy, id: $id, includeDeprecated: $includeDeprecated, last: $last, offset: $offset, orderBy: $orderBy, realmId: $realmId, roleId: $roleId, type: $type, updateTime: $updateTime, updateUserId: $updateUserId, version: $version) {
        createGroupId
		createTime
		createUserId
		id
		isDeprecated
		realmId
		roleId
		type
		updateTime
		updateUserId
		version
    }
}
        
query UpdateTime {
    updateTime 
}
        
query UpdateUserId {
    updateUserId 
}
        
query User($age: IntExpression, $cond: Conditional, $createGroupId: StringExpression, $createTime: StringExpression, $createUserId: StringExpression, $disable: BooleanExpression, $id: StringExpression, $includeDeprecated: Boolean, $login: StringExpression, $name: StringExpression, $organization: OrganizationExpression, $organizationId: IntExpression, $password: StringExpression, $phones: StringExpression, $realmId: StringExpression, $roles: RoleExpression, $sex: SexExpression, $test1: IntExpression, $test2: BooleanExpression, $updateTime: StringExpression, $updateUserId: StringExpression, $userProfile: UserProfileExpression, $version: IntExpression) {
    user(age: $age, cond: $cond, createGroupId: $createGroupId, createTime: $createTime, createUserId: $createUserId, disable: $disable, id: $id, includeDeprecated: $includeDeprecated, login: $login, name: $name, organization: $organization, organizationId: $organizationId, password: $password, phones: $phones, realmId: $realmId, roles: $roles, sex: $sex, test1: $test1, test2: $test2, updateTime: $updateTime, updateUserId: $updateUserId, userProfile: $userProfile, version: $version) {
        age
		createGroupId
		createTime
		createUserId
		disable
		id
		isDeprecated
		login
		name
		organizationId
		password
		phones
		realmId
		sex
		test1
		test2
		updateTime
		updateUserId
		userDetail2
		version
    }
}
        
query UserByOrg2($organization: OrganizationInput) {
    userByOrg2(organization: $organization) {
        age
		createGroupId
		createTime
		createUserId
		disable
		id
		isDeprecated
		login
		name
		organizationId
		password
		phones
		realmId
		sex
		test1
		test2
		updateTime
		updateUserId
		userDetail2
		version
    }
}
query UserDetail($user: UserInput) {
    userDetail(user: $user) 
}
        
query UserDetail6($user: UserInput) {
    userDetail6(user: $user) 
}
        
query UserList($after: ID, $age: IntExpression, $before: ID, $cond: Conditional, $createGroupId: StringExpression, $createTime: StringExpression, $createUserId: StringExpression, $disable: BooleanExpression, $first: Int, $groupBy: [String!], $id: StringExpression, $includeDeprecated: Boolean, $last: Int, $login: StringExpression, $name: StringExpression, $offset: Int, $orderBy: UserOrderBy, $organization: OrganizationExpression, $organizationId: IntExpression, $password: StringExpression, $phones: StringExpression, $realmId: StringExpression, $roles: RoleExpression, $sex: SexExpression, $test1: IntExpression, $test2: BooleanExpression, $updateTime: StringExpression, $updateUserId: StringExpression, $userProfile: UserProfileExpression, $version: IntExpression) {
    userList(after: $after, age: $age, before: $before, cond: $cond, createGroupId: $createGroupId, createTime: $createTime, createUserId: $createUserId, disable: $disable, first: $first, groupBy: $groupBy, id: $id, includeDeprecated: $includeDeprecated, last: $last, login: $login, name: $name, offset: $offset, orderBy: $orderBy, organization: $organization, organizationId: $organizationId, password: $password, phones: $phones, realmId: $realmId, roles: $roles, sex: $sex, test1: $test1, test2: $test2, updateTime: $updateTime, updateUserId: $updateUserId, userProfile: $userProfile, version: $version) {
        age
		createGroupId
		createTime
		createUserId
		disable
		id
		isDeprecated
		login
		name
		organizationId
		password
		phones
		realmId
		sex
		test1
		test2
		updateTime
		updateUserId
		userDetail2
		version
    }
}
        
query UserPhones($cond: Conditional, $createGroupId: StringExpression, $createTime: StringExpression, $createUserId: StringExpression, $id: StringExpression, $includeDeprecated: Boolean, $phone: StringExpression, $realmId: StringExpression, $updateTime: StringExpression, $updateUserId: StringExpression, $userId: IntExpression, $version: IntExpression) {
    userPhones(cond: $cond, createGroupId: $createGroupId, createTime: $createTime, createUserId: $createUserId, id: $id, includeDeprecated: $includeDeprecated, phone: $phone, realmId: $realmId, updateTime: $updateTime, updateUserId: $updateUserId, userId: $userId, version: $version) {
        createGroupId
		createTime
		createUserId
		id
		isDeprecated
		phone
		realmId
		updateTime
		updateUserId
		userId
		version
    }
}
query UserPhonesList($after: ID, $before: ID, $cond: Conditional, $createGroupId: StringExpression, $createTime: StringExpression, $createUserId: StringExpression, $first: Int, $groupBy: [String!], $id: StringExpression, $includeDeprecated: Boolean, $last: Int, $offset: Int, $orderBy: UserPhonesOrderBy, $phone: StringExpression, $realmId: StringExpression, $updateTime: StringExpression, $updateUserId: StringExpression, $userId: IntExpression, $version: IntExpression) {
    userPhonesList(after: $after, before: $before, cond: $cond, createGroupId: $createGroupId, createTime: $createTime, createUserId: $createUserId, first: $first, groupBy: $groupBy, id: $id, includeDeprecated: $includeDeprecated, last: $last, offset: $offset, orderBy: $orderBy, phone: $phone, realmId: $realmId, updateTime: $updateTime, updateUserId: $updateUserId, userId: $userId, version: $version) {
        createGroupId
		createTime
		createUserId
		id
		isDeprecated
		phone
		realmId
		updateTime
		updateUserId
		userId
		version
    }
}
        
query UserProfile($address: StringExpression, $cond: Conditional, $createGroupId: StringExpression, $createTime: StringExpression, $createUserId: StringExpression, $email: StringExpression, $id: StringExpression, $includeDeprecated: Boolean, $qq: StringExpression, $realmId: StringExpression, $updateTime: StringExpression, $updateUserId: StringExpression, $user: UserExpression, $userId: StringExpression, $version: IntExpression) {
    userProfile(address: $address, cond: $cond, createGroupId: $createGroupId, createTime: $createTime, createUserId: $createUserId, email: $email, id: $id, includeDeprecated: $includeDeprecated, qq: $qq, realmId: $realmId, updateTime: $updateTime, updateUserId: $updateUserId, user: $user, userId: $userId, version: $version) {
        address
		createGroupId
		createTime
		createUserId
		email
		id
		isDeprecated
		qq
		realmId
		updateTime
		updateUserId
		userId
		version
    }
}
        
query UserProfileList($address: StringExpression, $after: ID, $before: ID, $cond: Conditional, $createGroupId: StringExpression, $createTime: StringExpression, $createUserId: StringExpression, $email: StringExpression, $first: Int, $groupBy: [String!], $id: StringExpression, $includeDeprecated: Boolean, $last: Int, $offset: Int, $orderBy: UserProfileOrderBy, $qq: StringExpression, $realmId: StringExpression, $updateTime: StringExpression, $updateUserId: StringExpression, $user: UserExpression, $userId: StringExpression, $version: IntExpression) {
    userProfileList(address: $address, after: $after, before: $before, cond: $cond, createGroupId: $createGroupId, createTime: $createTime, createUserId: $createUserId, email: $email, first: $first, groupBy: $groupBy, id: $id, includeDeprecated: $includeDeprecated, last: $last, offset: $offset, orderBy: $orderBy, qq: $qq, realmId: $realmId, updateTime: $updateTime, updateUserId: $updateUserId, user: $user, userId: $userId, version: $version) {
        address
		createGroupId
		createTime
		createUserId
		email
		id
		isDeprecated
		qq
		realmId
		updateTime
		updateUserId
		userId
		version
    }
}
        
query UserRole($cond: Conditional, $createGroupId: StringExpression, $createTime: StringExpression, $createUserId: StringExpression, $id: StringExpression, $includeDeprecated: Boolean, $realmId: StringExpression, $roleId: IntExpression, $updateTime: StringExpression, $updateUserId: StringExpression, $userId: IntExpression, $version: IntExpression) {
    userRole(cond: $cond, createGroupId: $createGroupId, createTime: $createTime, createUserId: $createUserId, id: $id, includeDeprecated: $includeDeprecated, realmId: $realmId, roleId: $roleId, updateTime: $updateTime, updateUserId: $updateUserId, userId: $userId, version: $version) {
        createGroupId
		createTime
		createUserId
		id
		isDeprecated
		realmId
		roleId
		updateTime
		updateUserId
		userId
		version
    }
}
        
query UserRoleList($after: ID, $before: ID, $cond: Conditional, $createGroupId: StringExpression, $createTime: StringExpression, $createUserId: StringExpression, $first: Int, $groupBy: [String!], $id: StringExpression, $includeDeprecated: Boolean, $last: Int, $offset: Int, $orderBy: UserRoleOrderBy, $realmId: StringExpression, $roleId: IntExpression, $updateTime: StringExpression, $updateUserId: StringExpression, $userId: IntExpression, $version: IntExpression) {
    userRoleList(after: $after, before: $before, cond: $cond, createGroupId: $createGroupId, createTime: $createTime, createUserId: $createUserId, first: $first, groupBy: $groupBy, id: $id, includeDeprecated: $includeDeprecated, last: $last, offset: $offset, orderBy: $orderBy, realmId: $realmId, roleId: $roleId, updateTime: $updateTime, updateUserId: $updateUserId, userId: $userId, version: $version) {
        createGroupId
		createTime
		createUserId
		id
		isDeprecated
		realmId
		roleId
		updateTime
		updateUserId
		userId
		version
    }
}
        
query UserTest1($cond: Conditional, $createGroupId: StringExpression, $createTime: StringExpression, $createUserId: StringExpression, $id: StringExpression, $includeDeprecated: Boolean, $realmId: StringExpression, $test1: IntExpression, $updateTime: StringExpression, $updateUserId: StringExpression, $userId: IntExpression, $version: IntExpression) {
    userTest1(cond: $cond, createGroupId: $createGroupId, createTime: $createTime, createUserId: $createUserId, id: $id, includeDeprecated: $includeDeprecated, realmId: $realmId, test1: $test1, updateTime: $updateTime, updateUserId: $updateUserId, userId: $userId, version: $version) {
        createGroupId
		createTime
		createUserId
		id
		isDeprecated
		realmId
		test1
		updateTime
		updateUserId
		userId
		version
    }
}
        